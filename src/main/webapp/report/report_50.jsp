<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A2;
	double sheet10_B2;
	String sheet10_E2;
	String sheet10_F2;
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_E3;
	String sheet10_F3;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_A5;
	String sheet10_B5;
	String sheet10_E5;
	String sheet10_F5;
	String sheet10_A6;
	String sheet10_B6;
	String sheet10_A7;
	double sheet10_B7;
	String sheet10_A8;
	String sheet10_B8;
	String sheet10_A9;
	String sheet10_B9;
	String sheet10_A11;
	String sheet10_B11;
	String sheet10_C11;
	String sheet10_D11;
	String sheet10_F11;
	String sheet10_A12;
	String sheet10_B12;
	String sheet10_C12;
	String sheet10_D12;
	String sheet10_F12;
	double sheet10_G12;
	String sheet10_A13;
	String sheet10_B13;
	String sheet10_C13;
	String sheet10_D13;
	String sheet10_F13;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_M;		//ResultSet M 객체를 생성하기 위한 Statement 객체
	private ResultSet M;		//ResultSet M 객체
	private java.sql.Statement stat_J;		//ResultSet J 객체를 생성하기 위한 Statement 객체
	private ResultSet J;		//ResultSet J 객체
	private java.sql.Statement stat_L;		//ResultSet L 객체를 생성하기 위한 Statement 객체
	private ResultSet L;		//ResultSet L 객체
	private java.sql.Statement stat_totSum;		//ResultSet totSum 객체를 생성하기 위한 Statement 객체
	private ResultSet totSum;		//ResultSet totSum 객체

	//-----SQL 변수 선언-----
	private String sql_M;		//ResultSet M 객체를 생성하기 위한 쿼리문 저장
	private String sql_J;		//ResultSet J 객체를 생성하기 위한 쿼리문 저장
	private String sql_L;		//ResultSet L 객체를 생성하기 위한 쿼리문 저장
	private String sql_totSum;		//ResultSet totSum 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet M 객체에서 필드 값을 받는 쿼리 필드 변수
	private double M_PROB_NO;
	private String M_R_TEXT;
	private String M_DATES;
	private String M_PROB_COMMENT;
	private String M_PROB_LEVEL;
	private String M_IMP_VAL;
	private String M_CODETYPE;
	private String M_USE_YN;
	private String M_CODETEXT;
	private String M_CODEDESC;
	private String M_FILE_YN;
	private double M_GROUPSEQ;

	//ResultSet J 객체에서 필드 값을 받는 쿼리 필드 변수
	private double J_SUBSEQ;

	//ResultSet L 객체에서 필드 값을 받는 쿼리 필드 변수
	private double L_PROB_NO;
	private String L_GRCODENM;
	private String L_GRSEQ;
	private String L_STU_TOTAL;
	private double L_SCR;
	private String L_O_RAT;
	private String L_X_RAT;
	private double L_STU_TOTAL_NUM;
	private double L_AVG_O_RAT;
	private double L_AVG_X_RAT;
	private double L_TOT_O_RAT;
	private double L_TOT_X_RAT;

	//ResultSet totSum 객체에서 필드 값을 받는 쿼리 필드 변수
	private String totSum_TOT_COUNT;
	private String totSum_TOT_STU;
	private String totSum_TOT_AVG_O;
	private String totSum_TOT_AVG_X;

	//파라미터 변수 선언
	String p_prob_no_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(totSum!=null) totSum.close();
				if(stat_totSum!=null) stat_totSum.close();
				if(L!=null) L.close();
				if(stat_L!=null) stat_L.close();
				if(J!=null) J.close();
				if(stat_J!=null) stat_J.close();
				if(M!=null) M.close();
				if(stat_M!=null) stat_M.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(38, 41, 543, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart1(true, true);    //Void 밴드 호출
		getScriptFromL(true);    //반복 밴드 호출
		getScriptFroma(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----part1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=248;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet M 객체의 생성
			if(M==null){
				M = stat_M.executeQuery(sql_M);
			}else{
				M.beforeFirst();
			}
			//ResultSet J 객체의 생성
			if(J==null){
				J = stat_J.executeQuery(sql_J);
			}else{
				J.beforeFirst();
			}

			//데이터 fetch
			if(M.next()){
				setFieldVariableFromM();	//ResultSet M에서 필드 값 설정
			}else{
				setFieldInitFromM();	//ResultSet M의 필드 값 초기화
			}
			if(J.next()){
				setFieldVariableFromJ();	//ResultSet J에서 필드 값 설정
			}else{
				setFieldInitFromJ();	//ResultSet J의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B2=0;
			sheet10_F2="";
			sheet10_B3="";
			sheet10_F3="";
			sheet10_B4="";
			sheet10_F4="";
			sheet10_B5="";
			sheet10_F5="";
			sheet10_B6="";
			sheet10_B7=0;
			sheet10_B8="";
			sheet10_B9="";

			//데이터 변수 할당
			sheet10_B2=M_PROB_NO;
			sheet10_F2=M_R_TEXT;
			sheet10_B3=M_DATES;
			sheet10_F3=M_PROB_COMMENT;
			sheet10_B4=M_PROB_LEVEL;
			sheet10_F4=M_IMP_VAL;
			sheet10_B5=M_CODETYPE;
			sheet10_F5=M_USE_YN;
			sheet10_B6=M_CODETEXT;
			sheet10_B7=J_SUBSEQ;
			sheet10_B8=M_CODEDESC;
			sheet10_B9=M_FILE_YN;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----L RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : L
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromL(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A12="";
		sheet10_B12="";
		sheet10_C12="";
		sheet10_D12="";
		sheet10_F12="";

		//DataSet 객체 생성
		//ResultSet L 객체의 생성
		if(L==null){
			L = stat_L.executeQuery(sql_L);
		}else{
			L.beforeFirst();
		}

		while(L.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL();	//RecordSet L에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A12=L_GRCODENM;
			sheet10_B12=L_GRSEQ;
			sheet10_C12=L_STU_TOTAL;
			sheet10_D12=L_O_RAT;
			sheet10_F12=L_X_RAT;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptL();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----a VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : a
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFroma(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet totSum 객체의 생성
			if(totSum==null){
				totSum = stat_totSum.executeQuery(sql_totSum);
			}else{
				totSum.beforeFirst();
			}

			//데이터 fetch
			if(totSum.next()){
				setFieldVariableFromtotSum();	//ResultSet totSum에서 필드 값 설정
			}else{
				setFieldInitFromtotSum();	//ResultSet totSum의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B13="";
			sheet10_C13="";
			sheet10_D13="";
			sheet10_F13="";

			//데이터 변수 할당
			sheet10_B13=totSum_TOT_COUNT;
			sheet10_C13=totSum_TOT_STU;
			sheet10_D13=totSum_TOT_AVG_O;
			sheet10_F13=totSum_TOT_AVG_X;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScripta();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----part1 스크립트 문 출력 함수----
	private void writeScriptpart1( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+38)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",135,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+38)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+38)+",187,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+38)+",187,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+38)+",187,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+38)+",187,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+38)+",187,0,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B2+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+38)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+38)+",75,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+38)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+38)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+38)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+38)+",75,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E2+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+38)+",107,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+38)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+38)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+38)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+38)+",107,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F2+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+58)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+58)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+58)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+58)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+58)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+58)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+58)+",187,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+58)+",187,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+58)+",187,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+58)+",187,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+58)+",187,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+58)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+58)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+58)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+58)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+58)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+58)+",75,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E3+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+58)+",107,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+58)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+58)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+58)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+58)+",107,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F3+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+78)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+78)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+78)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+78)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+78)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+78)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+78)+",187,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+78)+",187,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+78)+",187,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+78)+",187,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+78)+",187,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+78)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+78)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+78)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+78)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+78)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+78)+",75,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+78)+",107,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+78)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+78)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+78)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+78)+",107,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+98)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+98)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+98)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+98)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+98)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+98)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+98)+",187,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+98)+",187,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+98)+",187,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+98)+",187,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+98)+",187,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+98)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+98)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+98)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+98)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+98)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+98)+",75,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E5+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+98)+",107,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+98)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+98)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+98)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+98)+",107,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F5+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+118)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+118)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+118)+",369,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+118)+",369,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+118)+",369,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+118)+",369,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+118)+",369,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+138)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+138)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+138)+",369,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+138)+",369,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+138)+",369,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+138)+",369,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+138)+",369,0,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B7+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+158)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+158)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+158)+",369,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+158)+",369,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+158)+",369,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+158)+",369,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+158)+",369,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B8+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+178)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",135,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+178)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A9+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+178)+",369,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+178)+",369,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+178)+",369,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+178)+",369,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+178)+",369,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
	}

	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.println("^CELLBG("+(nXCurPos+135)+","+(nYCurPos)+",73,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
		out.println("^CELLBG("+(nXCurPos+208)+","+(nYCurPos)+",73,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C11+"\r");
		out.println("^CELLBG("+(nXCurPos+281)+","+(nYCurPos)+",116,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+281)+","+(nYCurPos)+",116,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D11+"\r");
		out.println("^CELLBG("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos)+",107,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F11+"\r");
	}

	//----L 스크립트 문 출력 함수----
	private void writeScriptL( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B12+"\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C12+"\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+281)+","+(nYCurPos)+",116,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D12+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos)+",107,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F12+"\r");
	}

	//----a 스크립트 문 출력 함수----
	private void writeScripta( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",135,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A13+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B13+"\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",73,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos)+",73,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C13+"\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+281)+","+(nYCurPos)+",116,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+281)+","+(nYCurPos)+",116,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D13+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",107,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos)+",107,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F13+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_prob_no_Param=toKor(GetB(request.getParameter("p_prob_no")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_M=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_J=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_totSum=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_M = "select  ";
		sql_M = sql_M + "    prob_no, ";
		sql_M = sql_M + "    decode(text_seq,0,'없음','있음') as r_text, ";
		sql_M = sql_M + "    dates, ";
		sql_M = sql_M + "    prob_comment, ";
		sql_M = sql_M + "    decode(prob_level,'H','상','M','중','하') as prob_level, ";
		sql_M = sql_M + "    decode(imp_val,'H','상','M','중','하') as imp_val, ";
		sql_M = sql_M + "    decode(codetype,'S','객관식','M','객관식','주관식') as codetype, ";
		sql_M = sql_M + "    decode(use_yn,'Y','사용','사용안함') as use_yn, ";
		sql_M = sql_M + "    codetext, ";
		sql_M = sql_M + "    codedesc, ";
		sql_M = sql_M + "    decode(groupseq,'0','없음','','없음','있음') as file_yn, ";
		sql_M = sql_M + "    groupseq ";
		sql_M = sql_M + "from tb_expbank ";
		sql_M = sql_M + "where prob_no = '" + p_prob_no_Param + "'";
		sql_J = "select subseq from tb_expbank_row where isanswer='Y' and prob_no = '" + p_prob_no_Param + "'";
		sql_L = "select  prob_no, ";
		sql_L = sql_L + "searchgrcodenm(grcode,grseq) as grcodenm, ";
		sql_L = sql_L + "grseq, ";
		sql_L = sql_L + "count(prob_no)||'명' as stu_total, ";
		sql_L = sql_L + "nvl(sum(decode(scr,'O',1,0)),0) as scr, ";
		sql_L = sql_L + "round(nvl(sum(decode(scr,'O',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2)||'% ('||nvl(sum(decode(scr,'O',1,0)),0)||'명)' as o_rat, ";
		sql_L = sql_L + "round(nvl(sum(decode(scr,'X',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2)||'% ('||nvl(sum(decode(scr,'X',1,0)),0)||'명)' as x_rat, ";
		sql_L = sql_L + "count(prob_no) as stu_total_num, ";
		sql_L = sql_L + "round(nvl(sum(decode(scr,'O',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2) as avg_o_rat, ";
		sql_L = sql_L + "round(nvl(sum(decode(scr,'X',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2) as avg_x_rat, ";
		sql_L = sql_L + "nvl(sum(decode(scr,'O',1,0)),0) as tot_o_rat, ";
		sql_L = sql_L + "nvl(sum(decode(scr,'X',1,0)),0) as tot_x_rat ";
		sql_L = sql_L + "from tb_on_subjexamans ";
		sql_L = sql_L + "where prob_no = '" + p_prob_no_Param + "' ";
		sql_L = sql_L + "group by grcode,grseq,prob_no";
		sql_totSum = "SELECT to_char(count(*)) as tot_count ";
		sql_totSum = sql_totSum + "           , to_char(sum(stu_total_num)) as tot_stu ";
		sql_totSum = sql_totSum + "          ,  to_char(round(nvl(avg(avg_o_rat),0),2) ||'% ('|| sum(tot_o_rat) || '명)' )as tot_avg_o ";
		sql_totSum = sql_totSum + "          ,  to_char(round(nvl(avg(avg_x_rat),0),2) ||'% ('|| sum(tot_x_rat) || '명)') as tot_avg_x ";
		sql_totSum = sql_totSum + "FROM  (  ";
		sql_totSum = sql_totSum + "select  prob_no,  ";
		sql_totSum = sql_totSum + "searchgrcodenm(grcode,grseq) as grcodenm, ";
		sql_totSum = sql_totSum + "grseq, ";
		sql_totSum = sql_totSum + "count(prob_no)||'명' as stu_total, ";
		sql_totSum = sql_totSum + "nvl(sum(decode(scr,'O',1,0)),0) as scr, ";
		sql_totSum = sql_totSum + "round(nvl(sum(decode(scr,'O',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2)||'% ('||nvl(sum(decode(scr,'O',1,0)),0)||'명)' as o_rat, ";
		sql_totSum = sql_totSum + "round(nvl(sum(decode(scr,'X',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2)||'% ('||nvl(sum(decode(scr,'X',1,0)),0)||'명)' as x_rat, ";
		sql_totSum = sql_totSum + "count(prob_no) as stu_total_num, ";
		sql_totSum = sql_totSum + "round(nvl(sum(decode(scr,'O',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2) as avg_o_rat, ";
		sql_totSum = sql_totSum + "round(nvl(sum(decode(scr,'X',1,0)),0)/decode(count(prob_no),0,1,count(prob_no))*100,2) as avg_x_rat, ";
		sql_totSum = sql_totSum + "nvl(sum(decode(scr,'O',1,0)),0) as tot_o_rat, ";
		sql_totSum = sql_totSum + "nvl(sum(decode(scr,'X',1,0)),0) as tot_x_rat ";
		sql_totSum = sql_totSum + "from tb_on_subjexamans ";
		sql_totSum = sql_totSum + "where prob_no = '" + p_prob_no_Param + "' ";
		sql_totSum = sql_totSum + "group by grcode,grseq,prob_no )";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet M 객체에서 필드 값 설정 함수
	private void setFieldVariableFromM() throws Exception{
		M_PROB_NO=M.getDouble(1);
		M_R_TEXT=GetB(M.getString(2));
		M_DATES=GetB(M.getString(3));
		M_PROB_COMMENT=GetB(M.getString(4));
		M_PROB_LEVEL=GetB(M.getString(5));
		M_IMP_VAL=GetB(M.getString(6));
		M_CODETYPE=GetB(M.getString(7));
		M_USE_YN=GetB(M.getString(8));
		M_CODETEXT=GetB(M.getString(9));
		M_CODEDESC=GetB(M.getString(10));
		M_FILE_YN=GetB(M.getString(11));
		M_GROUPSEQ=M.getDouble(12);
	}

	//ResultSet M 객체의 필드 값 초기화 함수
	private void setFieldInitFromM(){
		M_PROB_NO=0;
		M_R_TEXT="";
		M_DATES="";
		M_PROB_COMMENT="";
		M_PROB_LEVEL="";
		M_IMP_VAL="";
		M_CODETYPE="";
		M_USE_YN="";
		M_CODETEXT="";
		M_CODEDESC="";
		M_FILE_YN="";
		M_GROUPSEQ=0;
	}

	//ResultSet J 객체에서 필드 값 설정 함수
	private void setFieldVariableFromJ() throws Exception{
		J_SUBSEQ=J.getDouble(1);
	}

	//ResultSet J 객체의 필드 값 초기화 함수
	private void setFieldInitFromJ(){
		J_SUBSEQ=0;
	}

	//ResultSet L 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL() throws Exception{
		L_PROB_NO=L.getDouble(1);
		L_GRCODENM=GetB(L.getString(2));
		L_GRSEQ=GetB(L.getString(3));
		L_STU_TOTAL=GetB(L.getString(4));
		L_SCR=L.getDouble(5);
		L_O_RAT=GetB(L.getString(6));
		L_X_RAT=GetB(L.getString(7));
		L_STU_TOTAL_NUM=L.getDouble(8);
		L_AVG_O_RAT=L.getDouble(9);
		L_AVG_X_RAT=L.getDouble(10);
		L_TOT_O_RAT=L.getDouble(11);
		L_TOT_X_RAT=L.getDouble(12);
	}

	//ResultSet L 객체의 필드 값 초기화 함수
	private void setFieldInitFromL(){
		L_PROB_NO=0;
		L_GRCODENM="";
		L_GRSEQ="";
		L_STU_TOTAL="";
		L_SCR=0;
		L_O_RAT="";
		L_X_RAT="";
		L_STU_TOTAL_NUM=0;
		L_AVG_O_RAT=0;
		L_AVG_X_RAT=0;
		L_TOT_O_RAT=0;
		L_TOT_X_RAT=0;
	}

	//ResultSet totSum 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtotSum() throws Exception{
		totSum_TOT_COUNT=GetB(totSum.getString(1));
		totSum_TOT_STU=GetB(totSum.getString(2));
		totSum_TOT_AVG_O=GetB(totSum.getString(3));
		totSum_TOT_AVG_X=GetB(totSum.getString(4));
	}

	//ResultSet totSum 객체의 필드 값 초기화 함수
	private void setFieldInitFromtotSum(){
		totSum_TOT_COUNT="";
		totSum_TOT_STU="";
		totSum_TOT_AVG_O="";
		totSum_TOT_AVG_X="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A2="번호";
		sheet10_E2="참조지문";
		sheet10_A3="차시";
		sheet10_E3="세부분류";
		sheet10_A4="난이도";
		sheet10_E4="중요도";
		sheet10_A5="문항유형";
		sheet10_E5="사용여부";
		sheet10_A6="문제";
		sheet10_A7="정답";
		sheet10_A8="해설";
		sheet10_A9="참고파일";
		sheet10_A11="과정명";
		sheet10_B11="기수명";
		sheet10_C11="응시인원";
		sheet10_D11="정답율(정답자수)";
		sheet10_F11="오답율(오답자수)";
		sheet10_G12=1;
		sheet10_A13="총계";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
