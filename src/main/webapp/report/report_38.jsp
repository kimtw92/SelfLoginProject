<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_B3;
	String sheet10_B4;
	String sheet10_B5;
	String sheet10_B6;
	String sheet10_B8;
	String sheet10_B9;
	String sheet10_B10;
	String sheet10_B11;
	String sheet10_B12;
	String sheet10_B13;
	String sheet10_B14;
	String sheet10_B16;
	String sheet10_B17;
	String sheet10_B18;
	String sheet10_B19;
	String sheet10_B21;
	String sheet10_B22;
	String sheet10_B23;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 41, 546, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----part1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=757;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----part1 스크립트 문 출력 함수----
	private void writeScriptpart1( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",504,1,12,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,37,1)");
		out.println(sheet10_A1+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+57)+",454,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+57)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+57)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+57)+",454,0,10,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+77)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+77)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+77)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+97)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+97)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+97)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+117)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+117)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+117)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+137)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+137)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+157)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+157)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+157)+",454,0,10,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B8+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+177)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+177)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+177)+",454,0,10,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+197)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+197)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+197)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B10+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+217)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+217)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+217)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+237)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+237)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+237)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B12+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+257)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+257)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+257)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B13+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+277)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+277)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+277)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B14+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+297)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+297)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+317)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+317)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+317)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B16+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+337)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+337)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+337)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B17+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+357)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+357)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+357)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B18+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+377)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+377)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+377)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B19+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+397)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+397)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+417)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+417)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+417)+",454,0,10,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B21+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+437)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+437)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+437)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B22+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+457)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+457)+",454,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+25)+","+(nYCurPos+457)+",454,0,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B23+"\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+477)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+477)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+497)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+497)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+517)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+517)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+537)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+537)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+557)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+557)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+577)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+577)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+597)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+597)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+617)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+617)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+637)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+637)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+657)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+657)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+677)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+677)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+697)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+697)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+717)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+717)+",454,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+737)+",454,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+737)+",454,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+25)+","+(nYCurPos+737)+",454,20,0,RGB[0,0,0],3)\r");
	}

	//파라미터 설정 함수
	private void setParam(){
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="교육생 학생수칙규정";
		sheet10_B3="□ 교육생준수사항";
		sheet10_B4="    ○ 교육시간 엄수 : 8:45분까지 등원, 매 교육 5분전까지 강의실 입실";
		sheet10_B5="    ○ 품위유지 : 금연 및 명찰작용";
		sheet10_B6="    ※의문사항에 대한 문의 : 과정장 및 교학과에 문의";
		sheet10_B8="□ 사고의 종류 및 조치";
		sheet10_B9="    ○ 1급 사고 : 퇴교조치 및 소속기관장에 통보";
		sheet10_B10="        - 대리시험 및 시험중 부정행위";
		sheet10_B11="        - 무단외출, 외박, 결강, 결석";
		sheet10_B12="        - 원내에서의 음주, 도박, 절도행위";
		sheet10_B13="        - 기타 정당한 지시 불이행등";
		sheet10_B14="       ※선택전문교육 (1.5이상의 경고시 퇴교)";
		sheet10_B16="   ○ 2급 사고 : 감점조치 (감점기준 참조)";
		sheet10_B17="       - 외출, 외박, 결강, 결석";
		sheet10_B18="       - 사전 승인사항 제외 (본인결혼 및 직계존비속 사망시)";
		sheet10_B19="       - 기타 교육원장이 필요하다고 인정되는 사유";
		sheet10_B21="□ 시설물 관리";
		sheet10_B22="   ○ 교육원내의 시설 및 비품을 분실 또는 파손할 경우 변상책임";
		sheet10_B23="   ○ 분실 또는 파손의 원인이 고의 또는 중대한 과실이 있을때는 퇴교조치";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
