<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_B2;
	String sheet10_C2;
	String sheet10_D2;
	String sheet10_E2;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_A7;
	String sheet10_B7;
	String sheet10_C7;
	String sheet10_D7;
	String sheet10_E7;
	String sheet10_A10;
	String sheet10_B10;
	String sheet10_C10;
	String sheet10_D10;
	String sheet10_E10;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 41, 546, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----part1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=599;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----part1 스크립트 문 출력 함수----
	private void writeScriptpart1( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",504,1,24,0/,바탕,RGB[0,0,0],BOLD, , ,NONE,62,1)");
		out.println(sheet10_A1+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+62)+",43,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+62)+",43,20,5,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+62)+",43,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+62)+",43,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+62)+",43,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+62)+",246,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+62)+",246,20,5,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+62)+",246,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+62)+",246,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos+62)+",246,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B2+"\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+62)+",49,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+62)+",49,20,5,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+62)+",49,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+62)+",49,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+289)+","+(nYCurPos+62)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C2+"\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+62)+",49,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+62)+",49,20,5,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+62)+",49,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+62)+",49,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+338)+","+(nYCurPos+62)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D2+"\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+62)+",117,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+62)+",117,20,5,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+62)+",117,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+62)+",117,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+387)+","+(nYCurPos+62)+",117,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E2+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+82)+",43,5,5,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+82)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+82)+",43,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+82)+",246,5,5,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+82)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+82)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+82)+",49,5,5,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+82)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+82)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+82)+",49,5,5,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+82)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+82)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+82)+",117,5,5,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+82)+",117,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+82)+",117,5,1,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+87)+",43,51,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+87)+",43,51,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+87)+",43,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,51,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+87)+",246,51,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+87)+",246,51,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos+87)+",246,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,51,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+87)+",49,51,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+87)+",49,51,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+289)+","+(nYCurPos+87)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,51,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+87)+",49,51,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+87)+",49,51,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+338)+","+(nYCurPos+87)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,51,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+87)+",117,51,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+87)+",117,51,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+387)+","+(nYCurPos+87)+",117,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,51,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",43,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",43,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+138)+",246,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+138)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+138)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+138)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+138)+",117,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+138)+",117,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+138)+",117,5,1,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+143)+",43,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+143)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+143)+",43,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+143)+",246,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+143)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+143)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+143)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+143)+",117,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+143)+",117,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+143)+",117,5,1,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+148)+",43,67,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+148)+",43,67,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+148)+",43,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,67,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+148)+",246,67,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+148)+",246,67,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos+148)+",246,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,67,1)");
		out.println(sheet10_B7+"\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+148)+",49,67,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+148)+",49,67,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+289)+","+(nYCurPos+148)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,67,1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+148)+",49,67,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+148)+",49,67,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+338)+","+(nYCurPos+148)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,67,1)");
		out.println(sheet10_D7+"\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+148)+",117,67,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+148)+",117,67,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+387)+","+(nYCurPos+148)+",117,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,67,1)");
		out.println(sheet10_E7+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+215)+",43,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+215)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+215)+",43,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+215)+",246,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+215)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+215)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+215)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+215)+",117,5,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+215)+",117,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+215)+",117,5,1,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+220)+",43,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+220)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+220)+",43,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+220)+",246,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+220)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+220)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+220)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+220)+",117,5,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+220)+",117,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+220)+",117,5,1,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+225)+",43,369,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+225)+",43,369,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+225)+",43,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,369,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+225)+",246,369,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+225)+",246,369,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos+225)+",246,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,369,1)");
		out.println(sheet10_B10+"\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+225)+",49,369,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+225)+",49,369,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+289)+","+(nYCurPos+225)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,369,1)");
		out.println(sheet10_C10+"\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+225)+",49,369,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+225)+",49,369,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+338)+","+(nYCurPos+225)+",49,1,11,0/,바탕,RGB[0,0,0], , , ,NONE,369,1)");
		out.println(sheet10_D10+"\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+225)+",117,369,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+225)+",117,369,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+387)+","+(nYCurPos+225)+",117,0,11,0/,바탕,RGB[0,0,0], , , ,NONE,369,1)");
		out.println(sheet10_E10+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+594)+",43,5,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+594)+",43,5,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+594)+",246,5,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+594)+",246,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+43)+","+(nYCurPos+594)+",246,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+594)+",49,5,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+594)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+289)+","+(nYCurPos+594)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+594)+",49,5,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+594)+",49,5,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+338)+","+(nYCurPos+594)+",49,5,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+594)+",117,5,1,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+387)+","+(nYCurPos+594)+",117,5,1,RGB[0,0,0],3)\r");
	}

	//파라미터 설정 함수
	private void setParam(){
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="감   점   기   준   표";
		sheet10_A2="구분";
		sheet10_B2="감점사고내용";
		sheet10_C2="기준";
		sheet10_D2="감점";
		sheet10_E2="비고";
		sheet10_A4="단체감점";
		sheet10_B4="1. 단체생활이 극히 무질서 한 때2. 전반의 수업태도가 극히 불량한 때3. 본원 지시에 단체적으로 불응한 때";
		sheet10_C4="1회1회1회";
		sheet10_D4="0.50.50.5";
		sheet10_E4="학생장의 확인서첨부(불응시 직권감점)";
		sheet10_A7="반별감점";
		sheet10_B7="1. 반별 공용물, 사물정돈 및 청소불량2. 반별 분위기 파괴3. 반별 생활태도 불량4. 공동구역 청소상태 불량";
		sheet10_C7="1일1일1일1회";
		sheet10_D7="0.30.30.30.3";
		sheet10_E7="사감의사 참고사감의사 참고";
		sheet10_A10="개인감점";
		sheet10_B10="1. 대리등록2. 지연등록3. 정당한 사유없는 결석4. 수업시간 지각5. 정당한 사유없는 결강6. 정당한 사유없는 외출, 외박";
		sheet10_B10=sheet10_B10 + "7. 조퇴8. 용모, 복장 불단정 및 장발9. 교관, 직원강사에 대한 불손태도10. 낙서 및 지정장소외의 흡연, 휴지투기등";
		sheet10_B10=sheet10_B10 + "11. 관물훼손 및 파괴등12. 수업태도 불량(잡담, 이석, 책상위 다리등)13. 식당등 시설이용질서 문란14. 점호, 구보, 체조, 청소등 무단불참";
		sheet10_B10=sheet10_B10 + "15. 유계외출, 외박후 정당한 사유없이 귀원지각16. 제한구역 출입17. 각종 보고서제출 지연18. 소등 불이행";
		sheet10_B10=sheet10_B10 + "19. 학생장 지시 불이행20. 고성방가21. 무단면회22. 무단전화사용23. 기타 경미한 위반사항";
		sheet10_C10="1시간1회10분1시간1시간1시간1회1회1회1회1회1회1회1회1회1회1회1회1회1회1회1회";
		sheet10_D10="0.50.51.00.30.50.30.30.50.50.51.00.50.50.50.50.50.50.20.51.01.00.50.2";
		sheet10_E10="o 3시간이상은 퇴교o 결석 및 결강, 외박시   공적증빙서첨부고의성인 경우 퇴교심한 경우 퇴교";
		sheet10_E10=sheet10_E10 + "";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
