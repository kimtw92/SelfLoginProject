<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_K3;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_G4;
	String sheet10_H4;
	String sheet10_I4;
	String sheet10_J4;
	String sheet10_K4;
	String sheet10_L4;
	String sheet10_M4;
	String sheet10_N4;
	String sheet10_O4;
	String sheet10_A6;
	long sheet10_B6;
	long sheet10_C6;
	long sheet10_D6;
	long sheet10_E6;
	long sheet10_F6;
	long sheet10_G6;
	long sheet10_H6;
	long sheet10_I6;
	long sheet10_J6;
	long sheet10_K6;
	long sheet10_L6;
	long sheet10_M6;
	long sheet10_N6;
	long sheet10_O6;
	String sheet10_A5;
	long sheet10_B5;
	long sheet10_C5;
	long sheet10_D5;
	long sheet10_E5;
	long sheet10_F5;
	long sheet10_G5;
	long sheet10_H5;
	long sheet10_I5;
	long sheet10_J5;
	long sheet10_K5;
	long sheet10_L5;
	long sheet10_M5;
	long sheet10_N5;
	long sheet10_O5;
	int part1_conPage;
	int part1_conYPos;
	String sheet20_A1;
	String sheet20_L2;
	int[] nAutoHeight_list2=new int[2];
	String sheet20_A4;
	double sheet20_A5;
	String sheet30_A2;
	String sheet30_D3;
	String sheet30_A4;
	String sheet30_B4;
	String sheet30_C4;
	String sheet30_D4;
	String sheet30_E4;
	String sheet30_F4;
	String sheet30_G4;
	String sheet30_H4;
	String sheet30_I4;
	String sheet30_J4;
	double sheet30_A5;
	double sheet30_B5;
	double sheet30_C5;
	double sheet30_D5;
	double sheet30_E5;
	double sheet30_F5;
	double sheet30_G5;
	double sheet30_H5;
	double sheet30_I5;
	double sheet30_J5;
	String sheet40_A1;
	String sheet40_F2;
	String sheet40_A3;
	String sheet40_B3;
	String sheet40_C3;
	String sheet40_D3;
	String sheet40_E3;
	String sheet40_F3;
	String sheet40_G3;
	String sheet40_H3;
	String sheet40_I3;
	String sheet40_J3;
	String sheet40_A4;
	double sheet40_B4;
	double sheet40_C4;
	double sheet40_D4;
	double sheet40_E4;
	double sheet40_F4;
	double sheet40_G4;
	double sheet40_H4;
	double sheet40_I4;
	double sheet40_J4;
	String sheet40_A5;
	double sheet40_B5;
	double sheet40_C5;
	double sheet40_D5;
	double sheet40_E5;
	double sheet40_F5;
	double sheet40_G5;
	double sheet40_H5;
	double sheet40_I5;
	double sheet40_J5;
	String sheet40_A6;
	double sheet40_B6;
	double sheet40_C6;
	double sheet40_D6;
	double sheet40_E6;
	double sheet40_F6;
	double sheet40_G6;
	double sheet40_H6;
	double sheet40_I6;
	double sheet40_J6;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_list;		//ResultSet list 객체를 생성하기 위한 Statement 객체
	private ResultSet list;		//ResultSet list 객체
	private java.sql.Statement stat_list4;		//ResultSet list4 객체를 생성하기 위한 Statement 객체
	private ResultSet list4;		//ResultSet list4 객체
	private java.sql.Statement stat_list3;		//ResultSet list3 객체를 생성하기 위한 Statement 객체
	private ResultSet list3;		//ResultSet list3 객체
	private java.sql.Statement stat_list2;		//ResultSet list2 객체를 생성하기 위한 Statement 객체
	private ResultSet list2;		//ResultSet list2 객체

	//-----SQL 변수 선언-----
	private String sql_list;		//ResultSet list 객체를 생성하기 위한 쿼리문 저장
	private String sql_list4;		//ResultSet list4 객체를 생성하기 위한 쿼리문 저장
	private String sql_list3;		//ResultSet list3 객체를 생성하기 위한 쿼리문 저장
	private String sql_list2;		//ResultSet list2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet list 객체에서 필드 값을 받는 쿼리 필드 변수
	private String list_CODENM;
	private double list_계;
	private double list_시;
	private double list_중구;
	private double list_동구;
	private double list_남구;
	private double list_연수구;
	private double list_남동구;
	private double list_부평구;
	private double list_계양군;
	private double list_서구;
	private double list_강화군;
	private double list_옹진군;
	private double list_기타;
	private double list_기타기관;
	private String list_CODE;

	//ResultSet list4 객체에서 필드 값을 받는 쿼리 필드 변수
	private double list4_AVG_AGE;
	private double list4_T;
	private double list4_TM;
	private double list4_TF;
	private double list4_M1;
	private double list4_M2;
	private double list4_M3;
	private double list4_M4;
	private double list4_M5;
	private double list4_M6;
	private double list4_M7;
	private double list4_M8;
	private double list4_F1;
	private double list4_F2;
	private double list4_F3;
	private double list4_F4;
	private double list4_F5;
	private double list4_F6;
	private double list4_F7;
	private double list4_F8;
	private double list4_T1;
	private double list4_T2;
	private double list4_T3;
	private double list4_T4;
	private double list4_T5;
	private double list4_T6;
	private double list4_T7;
	private double list4_T8;

	//ResultSet list3 객체에서 필드 값을 받는 쿼리 필드 변수
	private double list3_Y0;
	private double list3_Y2;
	private double list3_Y3;
	private double list3_Y4;
	private double list3_Y5;
	private double list3_Y6;
	private double list3_Y7;
	private double list3_Y8;
	private double list3_Y9;
	private double list3_Y10;
	private double list3_AVG_YEAR;

	//ResultSet list2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String list2_CODE;
	private String list2_CODENM;
	private double list2_TCOUNT;
	private double list2_SORT;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;

	//-----사용자 정의 변수 및 함수-----
	private boolean bIsCheck;


	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			bIsCheck = false;

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(list2!=null) list2.close();
				if(stat_list2!=null) stat_list2.close();
				if(list3!=null) list3.close();
				if(stat_list3!=null) stat_list3.close();
				if(list4!=null) list4.close();
				if(stat_list4!=null) stat_list4.close();
				if(list!=null) list.close();
				if(stat_list!=null) stat_list.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(69, 98, 532, 787, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart1(true, true);    //Void 밴드 호출
		getScriptFrompart1_list(true);    //반복 밴드 호출
		getScriptFrompart1_blank(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(69, 98, 532, 787, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart2(true, true);    //Void 밴드 호출
		getScriptFromlist2(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(69, 98, 532, 787, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(69, 98, 532, 787, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----part1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=129;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----part1_con ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1_con
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrompart1_con(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이
		int nSaveYPos=0;

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_B5=0L;
			sheet10_C5=0L;
			sheet10_D5=0L;
			sheet10_E5=0L;
			sheet10_F5=0L;
			sheet10_G5=0L;
			sheet10_H5=0L;
			sheet10_I5=0L;
			sheet10_J5=0L;
			sheet10_K5=0L;
			sheet10_L5=0L;
			sheet10_M5=0L;
			sheet10_N5=0L;
			sheet10_O5=0L;

			//출력 좌표 및 페이지 설정
			if(bIsPrint){   //현재 Y좌표와 페이지 번호를 저장
				repositionPageOverpart1_con();
			}
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				nSaveYPos=nYCurPos;   //현재 Y좌표 임시변수에 저장
				nYCurPos=part1_conYPos;   //조건 밴드 출력 Y좌표 설정
				out.print("-- " + part1_conPage + " PAGE --\r");
				writeScriptpart1_con();   //스크립트문 출력
				out.print("-- " + nPageNum + " PAGE --\r");
				nYCurPos=nSaveYPos;
				sheet10_B5=0L;
				sheet10_C5=0L;
				sheet10_D5=0L;
				sheet10_E5=0L;
				sheet10_F5=0L;
				sheet10_G5=0L;
				sheet10_H5=0L;
				sheet10_I5=0L;
				sheet10_J5=0L;
				sheet10_K5=0L;
				sheet10_L5=0L;
				sheet10_M5=0L;
				sheet10_N5=0L;
				sheet10_O5=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_B5=(long)SUM(sheet10_B6, sheet10_B5);
			sheet10_C5=(long)SUM(sheet10_C6, sheet10_C5);
			sheet10_D5=(long)SUM(sheet10_D6, sheet10_D5);
			sheet10_E5=(long)SUM(sheet10_E6, sheet10_E5);
			sheet10_F5=(long)SUM(sheet10_F6, sheet10_F5);
			sheet10_G5=(long)SUM(sheet10_G6, sheet10_G5);
			sheet10_H5=(long)SUM(sheet10_H6, sheet10_H5);
			sheet10_I5=(long)SUM(sheet10_I6, sheet10_I5);
			sheet10_J5=(long)SUM(sheet10_J6, sheet10_J5);
			sheet10_K5=(long)SUM(sheet10_K6, sheet10_K5);
			sheet10_L5=(long)SUM(sheet10_L6, sheet10_L5);
			sheet10_M5=(long)SUM(sheet10_M6, sheet10_M5);
			sheet10_N5=(long)SUM(sheet10_N6, sheet10_N5);
			sheet10_O5=(long)SUM(sheet10_O6, sheet10_O5);
		}   //end if(!bIsLast)
	}

	//----part1_con 조건 밴드 출력 영역 설정 혹은 페이지 넘기기 함수----
	private void repositionPageOverpart1_con( ) throws Exception{
		//스크립트 출력 영역 검사
		if(isPageSkip(nYCurPos+20)){
			pageSkip(10);
			bIsBeforePageSkip=true;
		}

		//출력 좌표 및 페이지 설정
		part1_conYPos=nYCurPos;
		part1_conPage=nPageNum;
		nYCurPos=nYCurPos+20;
	}

	//-----part1_list RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : part1_list
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrompart1_list(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_part1_con=false;   //part1_con 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A6="";
		sheet10_B6=0L;
		sheet10_C6=0L;
		sheet10_D6=0L;
		sheet10_E6=0L;
		sheet10_F6=0L;
		sheet10_G6=0L;
		sheet10_H6=0L;
		sheet10_I6=0L;
		sheet10_J6=0L;
		sheet10_K6=0L;
		sheet10_L6=0L;
		sheet10_M6=0L;
		sheet10_N6=0L;
		sheet10_O6=0L;

		//DataSet 객체 생성
		//ResultSet list 객체의 생성
		if(list==null){
			list = stat_list.executeQuery(sql_list);
		}else{
			list.beforeFirst();
		}

		while(list.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromlist();	//RecordSet list에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				bIsTrue_part1_con=false;    //part1_con 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A6=list_CODENM;
			sheet10_B6=(long)list_계;
			sheet10_C6=(long)list_시;
			sheet10_D6=(long)list_중구;
			sheet10_E6=(long)list_동구;
			sheet10_F6=(long)list_남구;
			sheet10_G6=(long)list_연수구;
			sheet10_H6=(long)list_남동구;
			sheet10_I6=(long)list_부평구;
			sheet10_J6=(long)list_계양군;
			sheet10_K6=(long)list_서구;
			sheet10_L6=(long)list_강화군;
			sheet10_M6=(long)list_옹진군;
			sheet10_N6=(long)list_기타;
			sheet10_O6=(long)list_기타기관;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFrompart1_con(bIsFirst, false, bIsTrue_part1_con, true);   //part1_con 조건 밴드 호출
			if(bIsTrue_part1_con){    //part1_con 조건 밴드 출력 후 다음 출력 좌표를 구하거나 페이지 넘기기
				repositionPageOverpart1_con();
			}

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptpart1_list();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFrompart1_con(bIsFirst, true, true, true);   //part1_con 조건 밴드 호출
	}

	//----part1_blank VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1_blank
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1_blank(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----movePos14 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos14
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos14(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----part2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : part2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=35;    //밴드 출력 높이
		boolean bIsTrue_movePos14=false;   //movePos14 조건 밴드 플래그 선언

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//조건 밴드 출력 조건문
		if(nXCurPos == 420){    //movePos14 밴드 조건문
			bIsTrue_movePos14=true;
		}else{
			bIsTrue_movePos14=false;
		}

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)

		//조건 밴드 호출
		getScriptFrommovePos14(bIsFirst, false, bIsTrue_movePos14, false);    //movePos14 조건 밴드 호출
	}

	//----list2_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : list2_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlist2_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=5;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptlist2_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----movePos01 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos01
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos01(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos02 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos02
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos02(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos03 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos03
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos03(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos04 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos04
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos04(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos05 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos05
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos05(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos06 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos06
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos06(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos07 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos07
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos07(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos08 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos08
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos08(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos09 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos09
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos09(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos10 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos10
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos10(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos11 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos11
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos11(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos12 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos12
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos12(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos13 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos13
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos13(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos15 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos15
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos15(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos16 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos16
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos16(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			System.out.println("nXCurPos:"+nXCurPos);
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (list2.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 80;
				nXCurPos = nXCurPos + 27;

				getScriptFromlist2_header(true, true);
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos17 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : movePos17
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos17(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			nXCurPos = nXStartPos;
			nYCurPos = nYCurPos + 5;
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//-----list2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : list2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=75;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움체
		//폰트 사이즈 : 9
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};
		boolean bIsTrue_movePos01=false;   //movePos01 조건 밴드 플래그 선언
		boolean bIsTrue_movePos02=false;   //movePos02 조건 밴드 플래그 선언
		boolean bIsTrue_movePos03=false;   //movePos03 조건 밴드 플래그 선언
		boolean bIsTrue_movePos04=false;   //movePos04 조건 밴드 플래그 선언
		boolean bIsTrue_movePos05=false;   //movePos05 조건 밴드 플래그 선언
		boolean bIsTrue_movePos06=false;   //movePos06 조건 밴드 플래그 선언
		boolean bIsTrue_movePos07=false;   //movePos07 조건 밴드 플래그 선언
		boolean bIsTrue_movePos08=false;   //movePos08 조건 밴드 플래그 선언
		boolean bIsTrue_movePos09=false;   //movePos09 조건 밴드 플래그 선언
		boolean bIsTrue_movePos10=false;   //movePos10 조건 밴드 플래그 선언
		boolean bIsTrue_movePos11=false;   //movePos11 조건 밴드 플래그 선언
		boolean bIsTrue_movePos12=false;   //movePos12 조건 밴드 플래그 선언
		boolean bIsTrue_movePos13=false;   //movePos13 조건 밴드 플래그 선언
		boolean bIsTrue_movePos15=false;   //movePos15 조건 밴드 플래그 선언
		boolean bIsTrue_movePos16=false;   //movePos16 조건 밴드 플래그 선언
		boolean bIsTrue_movePos17=false;   //movePos17 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet20_A4="";
		sheet20_A5=0;

		//DataSet 객체 생성
		//ResultSet list2 객체의 생성
		if(list2==null){
			list2 = stat_list2.executeQuery(sql_list2);
		}else{
			list2.beforeFirst();
		}

		while(list2.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromlist2();	//RecordSet list2에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(nXCurPos == 69){    //movePos01 밴드 조건문
				bIsTrue_movePos01=true;
			}else{
				bIsTrue_movePos01=false;
			}
			if(nXCurPos == 96){    //movePos02 밴드 조건문
				bIsTrue_movePos02=true;
			}else{
				bIsTrue_movePos02=false;
			}
			if(nXCurPos == 123){    //movePos03 밴드 조건문
				bIsTrue_movePos03=true;
			}else{
				bIsTrue_movePos03=false;
			}
			if(nXCurPos == 150){    //movePos04 밴드 조건문
				bIsTrue_movePos04=true;
			}else{
				bIsTrue_movePos04=false;
			}
			if(nXCurPos == 177){    //movePos05 밴드 조건문
				bIsTrue_movePos05=true;
			}else{
				bIsTrue_movePos05=false;
			}
			if(nXCurPos == 204){    //movePos06 밴드 조건문
				bIsTrue_movePos06=true;
			}else{
				bIsTrue_movePos06=false;
			}
			if(nXCurPos == 231){    //movePos07 밴드 조건문
				bIsTrue_movePos07=true;
			}else{
				bIsTrue_movePos07=false;
			}
			if(nXCurPos == 258){    //movePos08 밴드 조건문
				bIsTrue_movePos08=true;
			}else{
				bIsTrue_movePos08=false;
			}
			if(nXCurPos == 285){    //movePos09 밴드 조건문
				bIsTrue_movePos09=true;
			}else{
				bIsTrue_movePos09=false;
			}
			if(nXCurPos == 312){    //movePos10 밴드 조건문
				bIsTrue_movePos10=true;
			}else{
				bIsTrue_movePos10=false;
			}
			if(nXCurPos == 339){    //movePos11 밴드 조건문
				bIsTrue_movePos11=true;
			}else{
				bIsTrue_movePos11=false;
			}
			if(nXCurPos == 336){    //movePos12 밴드 조건문
				bIsTrue_movePos12=true;
			}else{
				bIsTrue_movePos12=false;
			}
			if(nXCurPos == 393){    //movePos13 밴드 조건문
				bIsTrue_movePos13=true;
			}else{
				bIsTrue_movePos13=false;
			}
			if(nXCurPos == 447){    //movePos15 밴드 조건문
				bIsTrue_movePos15=true;
			}else{
				bIsTrue_movePos15=false;
			}
			if(nXCurPos == 474){    //movePos16 밴드 조건문
				bIsTrue_movePos16=true;
			}else{
				bIsTrue_movePos16=false;
			}
			if(nXCurPos == 501){    //movePos17 밴드 조건문
				bIsTrue_movePos17=true;
			}else{
				bIsTrue_movePos17=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromlist2_header(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_movePos01=false;    //movePos01 조건 밴드 플래그 초기화
				bIsTrue_movePos02=false;    //movePos02 조건 밴드 플래그 초기화
				bIsTrue_movePos03=false;    //movePos03 조건 밴드 플래그 초기화
				bIsTrue_movePos04=false;    //movePos04 조건 밴드 플래그 초기화
				bIsTrue_movePos05=false;    //movePos05 조건 밴드 플래그 초기화
				bIsTrue_movePos06=false;    //movePos06 조건 밴드 플래그 초기화
				bIsTrue_movePos07=false;    //movePos07 조건 밴드 플래그 초기화
				bIsTrue_movePos08=false;    //movePos08 조건 밴드 플래그 초기화
				bIsTrue_movePos09=false;    //movePos09 조건 밴드 플래그 초기화
				bIsTrue_movePos10=false;    //movePos10 조건 밴드 플래그 초기화
				bIsTrue_movePos11=false;    //movePos11 조건 밴드 플래그 초기화
				bIsTrue_movePos12=false;    //movePos12 조건 밴드 플래그 초기화
				bIsTrue_movePos13=false;    //movePos13 조건 밴드 플래그 초기화
				bIsTrue_movePos15=false;    //movePos15 조건 밴드 플래그 초기화
				bIsTrue_movePos16=false;    //movePos16 조건 밴드 플래그 초기화
				bIsTrue_movePos17=false;    //movePos17 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			if (list2_CODENM.equals("X")) {
				sheet20_A4 = "합   계";
			} else {
				sheet20_A4=list2_CODENM;
			}
			sheet20_A5=list2_TCOUNT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFrommovePos01(bIsFirst, false, bIsTrue_movePos01, true);   //movePos01 조건 밴드 호출
			getScriptFrommovePos02(bIsFirst, false, bIsTrue_movePos02, false);    //movePos02 조건 밴드 호출
			getScriptFrommovePos03(bIsFirst, false, bIsTrue_movePos03, false);    //movePos03 조건 밴드 호출
			getScriptFrommovePos04(bIsFirst, false, bIsTrue_movePos04, false);    //movePos04 조건 밴드 호출
			getScriptFrommovePos05(bIsFirst, false, bIsTrue_movePos05, false);    //movePos05 조건 밴드 호출
			getScriptFrommovePos06(bIsFirst, false, bIsTrue_movePos06, false);    //movePos06 조건 밴드 호출
			getScriptFrommovePos07(bIsFirst, false, bIsTrue_movePos07, false);    //movePos07 조건 밴드 호출
			getScriptFrommovePos08(bIsFirst, false, bIsTrue_movePos08, false);    //movePos08 조건 밴드 호출
			getScriptFrommovePos09(bIsFirst, false, bIsTrue_movePos09, false);    //movePos09 조건 밴드 호출
			getScriptFrommovePos10(bIsFirst, false, bIsTrue_movePos10, false);    //movePos10 조건 밴드 호출
			getScriptFrommovePos11(bIsFirst, false, bIsTrue_movePos11, false);    //movePos11 조건 밴드 호출
			getScriptFrommovePos12(bIsFirst, false, bIsTrue_movePos12, false);    //movePos12 조건 밴드 호출
			getScriptFrommovePos13(bIsFirst, false, bIsTrue_movePos13, false);    //movePos13 조건 밴드 호출
			getScriptFrommovePos15(bIsFirst, false, bIsTrue_movePos15, false);    //movePos15 조건 밴드 호출
			getScriptFrommovePos16(bIsFirst, false, bIsTrue_movePos16, false);    //movePos16 조건 밴드 호출
			getScriptFrommovePos17(bIsFirst, false, bIsTrue_movePos17, false);    //movePos17 조건 밴드 호출

			//Auto Size Code
			nAutoHeight_list2[0]=0;
			nAutoHeight_list2[1]=0;
			nAutoHeight_list2[0]=getPrintHeight(sheet20_A4, charWidth, 9, 27, 55, nAutoHeight_list2[0]);
			nAutoHeight_list2[0]=nAutoHeight_list2[0]+55;
			nAutoHeight_list2[1]=nAutoHeight_list2[0]+nAutoHeight_list2[1]+20;
			nBandHeight=nAutoHeight_list2[1];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromlist2_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptlist2();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFrommovePos01(bIsFirst, true, true, true);   //movePos01 조건 밴드 호출
		getScriptFrommovePos02(bIsFirst, true, true, false);    //movePos02 조건 밴드 호출
		getScriptFrommovePos03(bIsFirst, true, true, false);    //movePos03 조건 밴드 호출
		getScriptFrommovePos04(bIsFirst, true, true, false);    //movePos04 조건 밴드 호출
		getScriptFrommovePos05(bIsFirst, true, true, false);    //movePos05 조건 밴드 호출
		getScriptFrommovePos06(bIsFirst, true, true, false);    //movePos06 조건 밴드 호출
		getScriptFrommovePos07(bIsFirst, true, true, false);    //movePos07 조건 밴드 호출
		getScriptFrommovePos08(bIsFirst, true, true, false);    //movePos08 조건 밴드 호출
		getScriptFrommovePos09(bIsFirst, true, true, false);    //movePos09 조건 밴드 호출
		getScriptFrommovePos10(bIsFirst, true, true, false);    //movePos10 조건 밴드 호출
		getScriptFrommovePos11(bIsFirst, true, true, false);    //movePos11 조건 밴드 호출
		getScriptFrommovePos12(bIsFirst, true, true, false);    //movePos12 조건 밴드 호출
		getScriptFrommovePos13(bIsFirst, true, true, false);    //movePos13 조건 밴드 호출
		getScriptFrommovePos15(bIsFirst, true, true, false);    //movePos15 조건 밴드 호출
		getScriptFrommovePos16(bIsFirst, true, true, false);    //movePos16 조건 밴드 호출
		getScriptFrommovePos17(bIsFirst, true, true, false);    //movePos17 조건 밴드 호출
	}

	//----part3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : part3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=115;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet list3 객체의 생성
			if(list3==null){
				list3 = stat_list3.executeQuery(sql_list3);
			}else{
				list3.beforeFirst();
			}

			//데이터 fetch
			if(list3.next()){
				setFieldVariableFromlist3();	//ResultSet list3에서 필드 값 설정
			}else{
				setFieldInitFromlist3();	//ResultSet list3의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_A5=0;
			sheet30_B5=0;
			sheet30_C5=0;
			sheet30_D5=0;
			sheet30_E5=0;
			sheet30_F5=0;
			sheet30_G5=0;
			sheet30_H5=0;
			sheet30_I5=0;
			sheet30_J5=0;

			//데이터 변수 할당
			sheet30_A5=list3_Y0;
			sheet30_B5=list3_Y2;
			sheet30_C5=list3_Y3;
			sheet30_D5=list3_Y4;
			sheet30_E5=list3_Y5;
			sheet30_F5=list3_Y6;
			sheet30_G5=list3_Y7;
			sheet30_H5=list3_Y8;
			sheet30_I5=list3_Y9;
			sheet30_J5=list3_Y10;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----part4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : part4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=130;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet list4 객체의 생성
			if(list4==null){
				list4 = stat_list4.executeQuery(sql_list4);
			}else{
				list4.beforeFirst();
			}

			//데이터 fetch
			if(list4.next()){
				setFieldVariableFromlist4();	//ResultSet list4에서 필드 값 설정
			}else{
				setFieldInitFromlist4();	//ResultSet list4의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet40_B4=0;
			sheet40_C4=0;
			sheet40_D4=0;
			sheet40_E4=0;
			sheet40_F4=0;
			sheet40_G4=0;
			sheet40_H4=0;
			sheet40_I4=0;
			sheet40_J4=0;
			sheet40_B5=0;
			sheet40_C5=0;
			sheet40_D5=0;
			sheet40_E5=0;
			sheet40_F5=0;
			sheet40_G5=0;
			sheet40_H5=0;
			sheet40_I5=0;
			sheet40_J5=0;
			sheet40_B6=0;
			sheet40_C6=0;
			sheet40_D6=0;
			sheet40_E6=0;
			sheet40_F6=0;
			sheet40_G6=0;
			sheet40_H6=0;
			sheet40_I6=0;
			sheet40_J6=0;

			//데이터 변수 할당
			sheet40_B4=list4_TM;
			sheet40_C4=list4_M1;
			sheet40_D4=list4_M2;
			sheet40_E4=list4_M3;
			sheet40_F4=list4_M4;
			sheet40_G4=list4_M5;
			sheet40_H4=list4_M6;
			sheet40_I4=list4_M7;
			sheet40_J4=list4_M8;
			sheet40_B5=list4_TF;
			sheet40_C5=list4_F1;
			sheet40_D5=list4_F2;
			sheet40_E5=list4_F3;
			sheet40_F5=list4_F4;
			sheet40_G5=list4_F5;
			sheet40_H5=list4_F6;
			sheet40_I5=list4_F7;
			sheet40_J5=list4_F8;
			sheet40_B6=list4_T;
			sheet40_C6=list4_T1;
			sheet40_D6=list4_T2;
			sheet40_E6=list4_T3;
			sheet40_F6=list4_T4;
			sheet40_G6=list4_T5;
			sheet40_H6=list4_T6;
			sheet40_I6=list4_T7;
			sheet40_J6=list4_T8;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----part1 스크립트 문 출력 함수----
	private void writeScriptpart1( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",459,1,20,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,31,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+31)+",135,0,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
		out.print("^PRINT("+(nXCurPos+324)+","+(nYCurPos+51)+",135,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,15,1)");
		out.println(sheet10_K3+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+66)+",81,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+66)+",81,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+66)+",81,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+66)+",81,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+66)+",81,63,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+66)+",81,63,0,RGB[0,0,0],5)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+66)+",81,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLBG("+(nXCurPos+81)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+81)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLBG("+(nXCurPos+108)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+108)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLBG("+(nXCurPos+135)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLBG("+(nXCurPos+162)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+162)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLBG("+(nXCurPos+189)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+189)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLBG("+(nXCurPos+216)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+216)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_G4+"\r");
		out.println("^CELLBG("+(nXCurPos+243)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+243)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_H4+"\r");
		out.println("^CELLBG("+(nXCurPos+270)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+270)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_I4+"\r");
		out.println("^CELLBG("+(nXCurPos+297)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+297)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_J4+"\r");
		out.println("^CELLBG("+(nXCurPos+324)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+324)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_K4+"\r");
		out.println("^CELLBG("+(nXCurPos+351)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+351)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_L4+"\r");
		out.println("^CELLBG("+(nXCurPos+378)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+378)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_M4+"\r");
		out.println("^CELLBG("+(nXCurPos+405)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+405)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_N4+"\r");
		out.println("^CELLBG("+(nXCurPos+432)+","+(nYCurPos+66)+",27,63,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+66)+",27,63,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos+66)+",27,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,63,1)");
		out.println(sheet10_O4+"\r");
	}

	//----part1_con 스크립트 문 출력 함수----
	private void writeScriptpart1_con( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",81,1,9,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+81)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+108)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C5+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D5+"\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+162)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E5+"\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+189)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F5+"\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+216)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G5+"\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+243)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H5+"\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+270)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I5+"\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+297)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_J5+"\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+324)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_K5+"\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+351)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_L5+"\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+378)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_M5+"\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+405)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_N5+"\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_O5+"\r");
	}

	//----part1_list 스크립트 문 출력 함수----
	private void writeScriptpart1_list( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",81,1,9,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+81)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+81)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+108)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+108)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C6+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D6+"\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+162)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E6+"\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+189)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+189)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F6+"\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+216)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+216)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G6+"\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+243)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+243)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H6+"\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+270)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+270)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I6+"\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+297)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+297)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_J6+"\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+324)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+324)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_K6+"\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+351)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+351)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_L6+"\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+378)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+378)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_M6+"\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+405)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+405)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_N6+"\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",27,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos)+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_O6+"\r");
	}

	//----movePos14 스크립트 문 출력 함수----
	private void writeScriptmovePos14( ) throws Exception{
	}

	//----part2 스크립트 문 출력 함수----
	private void writeScriptpart2( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",108,0,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet20_A1+"\r");
		out.print("^PRINT("+(nXCurPos+297)+","+(nYCurPos+20)+",162,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,15,1)");
		out.println(sheet20_L2+"\r");
	}

	//----list2_header 스크립트 문 출력 함수----
	private void writeScriptlist2_header( ) throws Exception{
	}

	//----movePos01 스크립트 문 출력 함수----
	private void writeScriptmovePos01( ) throws Exception{
	}

	//----movePos02 스크립트 문 출력 함수----
	private void writeScriptmovePos02( ) throws Exception{
	}

	//----movePos03 스크립트 문 출력 함수----
	private void writeScriptmovePos03( ) throws Exception{
	}

	//----movePos04 스크립트 문 출력 함수----
	private void writeScriptmovePos04( ) throws Exception{
	}

	//----movePos05 스크립트 문 출력 함수----
	private void writeScriptmovePos05( ) throws Exception{
	}

	//----movePos06 스크립트 문 출력 함수----
	private void writeScriptmovePos06( ) throws Exception{
	}

	//----movePos07 스크립트 문 출력 함수----
	private void writeScriptmovePos07( ) throws Exception{
	}

	//----movePos08 스크립트 문 출력 함수----
	private void writeScriptmovePos08( ) throws Exception{
	}

	//----movePos09 스크립트 문 출력 함수----
	private void writeScriptmovePos09( ) throws Exception{
	}

	//----movePos10 스크립트 문 출력 함수----
	private void writeScriptmovePos10( ) throws Exception{
	}

	//----movePos11 스크립트 문 출력 함수----
	private void writeScriptmovePos11( ) throws Exception{
	}

	//----movePos12 스크립트 문 출력 함수----
	private void writeScriptmovePos12( ) throws Exception{
	}

	//----movePos13 스크립트 문 출력 함수----
	private void writeScriptmovePos13( ) throws Exception{
	}

	//----movePos15 스크립트 문 출력 함수----
	private void writeScriptmovePos15( ) throws Exception{
	}

	//----movePos16 스크립트 문 출력 함수----
	private void writeScriptmovePos16( ) throws Exception{
	}

	//----movePos17 스크립트 문 출력 함수----
	private void writeScriptmovePos17( ) throws Exception{
	}

	//----list2 스크립트 문 출력 함수----
	private void writeScriptlist2( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",27,"+(nAutoHeight_list2[0])+",1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",27,"+(nAutoHeight_list2[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",27,"+(nAutoHeight_list2[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",27,"+(nAutoHeight_list2[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",27,"+(nAutoHeight_list2[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",27,1,9,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list2[0])+",1)");
		out.println(sheet20_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+nAutoHeight_list2[0])+",27,"+(nAutoHeight_list2[1]-nAutoHeight_list2[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+nAutoHeight_list2[0])+",27,"+(nAutoHeight_list2[1]-nAutoHeight_list2[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+nAutoHeight_list2[0])+",27,"+(nAutoHeight_list2[1]-nAutoHeight_list2[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+nAutoHeight_list2[0])+",27,"+(nAutoHeight_list2[1]-nAutoHeight_list2[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+nAutoHeight_list2[0])+",27,1,9,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list2[1]-nAutoHeight_list2[0])+",1)");
		out.println(sheet20_A5+"\r");
	}

	//----part3 스크립트 문 출력 함수----
	private void writeScriptpart3( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",92,0,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet30_A2+"\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+40)+",322,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,15,1)");
		out.println(sheet30_D3+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_A4+"\r");
		out.println("^CELLBG("+(nXCurPos+46)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_B4+"\r");
		out.println("^CELLBG("+(nXCurPos+92)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_C4+"\r");
		out.println("^CELLBG("+(nXCurPos+138)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_D4+"\r");
		out.println("^CELLBG("+(nXCurPos+184)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_E4+"\r");
		out.println("^CELLBG("+(nXCurPos+230)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_F4+"\r");
		out.println("^CELLBG("+(nXCurPos+276)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_G4+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_H4+"\r");
		out.println("^CELLBG("+(nXCurPos+368)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_I4+"\r");
		out.println("^CELLBG("+(nXCurPos+414)+","+(nYCurPos+55)+",46,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+55)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+55)+",46,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_J4+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_B5+"\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_C5+"\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_D5+"\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_E5+"\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_F5+"\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_G5+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_H5+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_I5+"\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+75)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+75)+",46,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet30_J5+"\r");
	}

	//----part4 스크립트 문 출력 함수----
	private void writeScriptpart4( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",138,0,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet40_A1+"\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+20)+",230,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,15,1)");
		out.println(sheet40_F2+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_A3+"\r");
		out.println("^CELLBG("+(nXCurPos+46)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+92)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_C3+"\r");
		out.println("^CELLBG("+(nXCurPos+138)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+184)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+230)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+276)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_G3+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_H3+"\r");
		out.println("^CELLBG("+(nXCurPos+368)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+35)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_I3+"\r");
		out.println("^CELLBG("+(nXCurPos+414)+","+(nYCurPos+35)+",46,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+35)+",46,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+35)+",46,0,9,0/,돋움,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet40_J3+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+70)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_G4+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_H4+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_I4+"\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+70)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+70)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_J4+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+90)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_B5+"\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_C5+"\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_D5+"\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_E5+"\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_F5+"\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_G5+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_H5+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_I5+"\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+90)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+90)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_J5+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+110)+",46,1,9,0/,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_A6+"\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+46)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+46)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_B6+"\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_C6+"\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+138)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+138)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_D6+"\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+184)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+184)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_E6+"\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+230)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+230)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_F6+"\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_G6+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_H6+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_I6+"\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+414)+","+(nYCurPos+110)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+414)+","+(nYCurPos+110)+",46,1,9,1/0/0,돋움,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet40_J6+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_list=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_list4=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_list3=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_list2=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_list = "SELECT c.codenm ";
		sql_list = sql_list + "    , count(*) 계 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'6280000',1,0)) 시 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3490000',1,0)) 중구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3500000',1,0)) 동구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3510000',1,0)) 남구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3520000',1,0)) 연수구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3530000',1,0)) 남동구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3540000',1,0)) 부평구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3550000',1,0)) 계양군 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3560000',1,0)) 서구 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3570000',1,0)) 강화군 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'3580000',1,0)) 옹진군 ";
		sql_list = sql_list + "    , sum(decode(a.dept,null,1,0)) 기타 ";
		sql_list = sql_list + "    , sum(decode(a.dept,'9999999',1,0)) 기타기관 ";
		sql_list = sql_list + "    , c.code ";
		sql_list = sql_list + "    FROM  TB_APP_INFO a, TB_JIK b, TB_JIKGUBUN c  ";
		sql_list = sql_list + "WHERE a.grchk='Y' and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "'  ";
		sql_list = sql_list + "AND a.jik=b.jik  ";
		sql_list = sql_list + "AND c.jikgubun='dogs' AND b.dogs=c.code GROUP BY b.dogs,c.code,c.codenm";
		sql_list4 = "SELECT round(sum(TO_CHAR(SYSDATE,'YYYY')-(decode(substr(b.resno,7,1),'1','19','2','19','3','20','4','20',0)||SUBSTR(b.resno,1,2))+1)/count(*),0) avg_age,count(*) t ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',1,'3',1,0)) tm,sum(decode(substr(b.resno,7,1),'2',1,'4',1,0)) tf ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(sign(SearchAge(b.resno)-25),-1,1,0,0,1,0),'3',decode(sign(SearchAge(b.resno)-25),-1,1,0,0,1,0))) m1 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'26',1,'27',1,'28',1,'29',1,'30',1,0),'3',decode(SearchAge(b.resno),'26',1,'27',1,'28',1,'29',1,'30',1,0))) m2 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'31',1,'32',1,'33',1,'34',1,'35',1,0),'3',decode(SearchAge(b.resno),'31',1,'32',1,'33',1,'34',1,'35',1,0))) m3 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'36',1,'37',1,'38',1,'39',1,'40',1,0),'3',decode(SearchAge(b.resno),'36',1,'37',1,'38',1,'39',1,'40',1,0))) m4 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'41',1,'42',1,'43',1,'44',1,'45',1,0),'3',decode(SearchAge(b.resno),'41',1,'42',1,'43',1,'44',1,'45',1,0))) m5 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'46',1,'47',1,'48',1,'49',1,'50',1,0),'3',decode(SearchAge(b.resno),'46',1,'47',1,'48',1,'49',1,'50',1,0))) m6 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(SearchAge(b.resno),'51',1,'52',1,'53',1,'54',1,'55',1,0),'3',decode(SearchAge(b.resno),'51',1,'52',1,'53',1,'54',1,'55',1,0))) m7 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'1',decode(sign(SearchAge(b.resno)-54),-1,0,0,0,1,1),'3',decode(sign(SearchAge(b.resno)-54),-1,0,0,0,1,1))) m8 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(sign(SearchAge(b.resno)-25),-1,1,0,0,1,0),'4',decode(sign(SearchAge(b.resno)-25),-1,1,0,0,1,0))) f1 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'26',1,'27',1,'28',1,'29',1,'30',1,0),'4',decode(SearchAge(b.resno),'26',1,'27',1,'28',1,'29',1,'30',1,0))) f2 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'31',1,'32',1,'33',1,'34',1,'35',1,0),'4',decode(SearchAge(b.resno),'31',1,'32',1,'33',1,'34',1,'35',1,0))) f3 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'36',1,'37',1,'38',1,'39',1,'40',1,0),'4',decode(SearchAge(b.resno),'36',1,'37',1,'38',1,'39',1,'40',1,0))) f4 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'41',1,'42',1,'43',1,'44',1,'45',1,0),'4',decode(SearchAge(b.resno),'41',1,'42',1,'43',1,'44',1,'45',1,0))) f5 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'46',1,'47',1,'48',1,'49',1,'50',1,0),'4',decode(SearchAge(b.resno),'46',1,'47',1,'48',1,'49',1,'50',1,0))) f6 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(SearchAge(b.resno),'51',1,'52',1,'53',1,'54',1,'55',1,0),'4',decode(SearchAge(b.resno),'51',1,'52',1,'53',1,'54',1,'55',1,0))) f7 ";
		sql_list4 = sql_list4 + ",sum(decode(substr(b.resno,7,1),'2',decode(sign(SearchAge(b.resno)-54),-1,0,0,0,1,1),'4',decode(sign(SearchAge(b.resno)-54),-1,0,0,0,1,1))) f8 ";
		sql_list4 = sql_list4 + ",sum(decode(sign(SearchAge(b.resno)-25),-1,1,0,0,1,0)) t1 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'26',1,'27',1,'28',1,'29',1,'30',1,0)) t2 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'31',1,'32',1,'33',1,'34',1,'35',1,0)) t3 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'36',1,'37',1,'38',1,'39',1,'40',1,0)) t4 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'41',1,'42',1,'43',1,'44',1,'45',1,0)) t5 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'46',1,'47',1,'48',1,'49',1,'50',1,0)) t6 ";
		sql_list4 = sql_list4 + ",sum(decode(SearchAge(b.resno),'51',1,'52',1,'53',1,'54',1,'55',1,0)) t7 ";
		sql_list4 = sql_list4 + ",sum(decode(sign(SearchAge(b.resno)-54),-1,0,0,0,1,1)) t8  ";
		sql_list4 = sql_list4 + "FROM TB_APP_INFO a, TB_MEMBER b  ";
		sql_list4 = sql_list4 + "WHERE a.grchk='Y' ";
		sql_list4 = sql_list4 + "and a.grcode='" + p_grcode_Param + "'  ";
		sql_list4 = sql_list4 + "and a.grseq='" + p_grseq_Param + "'  ";
		sql_list4 = sql_list4 + "AND  a.userno=b.userno";
		sql_list3 = "SELECT count(*) y0 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'1',1,'2',1,0)) y2 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'3',1,0)) y3 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'4',1,0)) y4 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'5',1,0)) y5 ";
		sql_list3 = sql_list3 + ", sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'6',1,0)) y6 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'7',1,0)) y7 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'8',1,0)) y8 ";
		sql_list3 = sql_list3 + ",sum(decode(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')+1,'9',1,0)) y9 ";
		sql_list3 = sql_list3 + ",sum(decode(sign(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(b.upsdate,'YYYY')-8),-1,0,0,0,1,1)) y10  , ";
		sql_list3 = sql_list3 + "round((sum(TO_CHAR(SYSDATE,'YYYY')-SUBSTR(nvl(TO_CHAR(b.upsdate,'YYYY'),TO_CHAR(SYSDATE,'YYYY')-1),1,4)+1))/count(*),0) avg_year ";
		sql_list3 = sql_list3 + "FROM TB_APP_INFO a, TB_MEMBER b  ";
		sql_list3 = sql_list3 + "WHERE a.grchk='Y' ";
		sql_list3 = sql_list3 + "and a.grcode='" + p_grcode_Param + "'  ";
		sql_list3 = sql_list3 + "and a.grseq='" + p_grseq_Param + "'  ";
		sql_list3 = sql_list3 + "AND  a.userno=b.userno";
		sql_list2 = "SELECT '' as code ";
		sql_list2 = sql_list2 + "     , 'X' as codenm ";
		sql_list2 = sql_list2 + "     , sum(decode(c.code,null,0,1)) tcount  ";
		sql_list2 = sql_list2 + "     , 1 as sort ";
		sql_list2 = sql_list2 + "FROM tb_app_info a,tb_jik b,tb_jikgubun c ";
		sql_list2 = sql_list2 + " WHERE a.jik=b.jik(+) and b.jikr=c.code(+)  ";
		sql_list2 = sql_list2 + " and c.jikgubun='jikr'  ";
		sql_list2 = sql_list2 + " and a.grcode='" + p_grcode_Param + "'  ";
		sql_list2 = sql_list2 + " and a.grseq='" + p_grseq_Param + "'  ";
		sql_list2 = sql_list2 + " and a.grchk='Y'  ";
		sql_list2 = sql_list2 + "union  ";
		sql_list2 = sql_list2 + "SELECT c.code,decode(c.code,null,'기타',c.codenm) codenm ";
		sql_list2 = sql_list2 + "     , sum(decode(c.code,null,0,1)) tcount  ";
		sql_list2 = sql_list2 + "     , 2 as sort ";
		sql_list2 = sql_list2 + "FROM tb_app_info a,tb_jik b,tb_jikgubun c ";
		sql_list2 = sql_list2 + " WHERE a.jik=b.jik(+) and b.jikr=c.code(+)  ";
		sql_list2 = sql_list2 + " and c.jikgubun='jikr'  ";
		sql_list2 = sql_list2 + " and a.grcode='" + p_grcode_Param + "'  ";
		sql_list2 = sql_list2 + " and a.grseq='" + p_grseq_Param + "'  ";
		sql_list2 = sql_list2 + " and a.grchk='Y' GROUP BY c.code,c.codenm ";
		sql_list2 = sql_list2 + "order by sort";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet list 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlist() throws Exception{
		list_CODENM=GetB(list.getString(1));
		list_계=list.getDouble(2);
		list_시=list.getDouble(3);
		list_중구=list.getDouble(4);
		list_동구=list.getDouble(5);
		list_남구=list.getDouble(6);
		list_연수구=list.getDouble(7);
		list_남동구=list.getDouble(8);
		list_부평구=list.getDouble(9);
		list_계양군=list.getDouble(10);
		list_서구=list.getDouble(11);
		list_강화군=list.getDouble(12);
		list_옹진군=list.getDouble(13);
		list_기타=list.getDouble(14);
		list_기타기관=list.getDouble(15);
		list_CODE=GetB(list.getString(16));
	}

	//ResultSet list 객체의 필드 값 초기화 함수
	private void setFieldInitFromlist(){
		list_CODENM="";
		list_계=0;
		list_시=0;
		list_중구=0;
		list_동구=0;
		list_남구=0;
		list_연수구=0;
		list_남동구=0;
		list_부평구=0;
		list_계양군=0;
		list_서구=0;
		list_강화군=0;
		list_옹진군=0;
		list_기타=0;
		list_기타기관=0;
		list_CODE="";
	}

	//ResultSet list4 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlist4() throws Exception{
		list4_AVG_AGE=list4.getDouble(1);
		list4_T=list4.getDouble(2);
		list4_TM=list4.getDouble(3);
		list4_TF=list4.getDouble(4);
		list4_M1=list4.getDouble(5);
		list4_M2=list4.getDouble(6);
		list4_M3=list4.getDouble(7);
		list4_M4=list4.getDouble(8);
		list4_M5=list4.getDouble(9);
		list4_M6=list4.getDouble(10);
		list4_M7=list4.getDouble(11);
		list4_M8=list4.getDouble(12);
		list4_F1=list4.getDouble(13);
		list4_F2=list4.getDouble(14);
		list4_F3=list4.getDouble(15);
		list4_F4=list4.getDouble(16);
		list4_F5=list4.getDouble(17);
		list4_F6=list4.getDouble(18);
		list4_F7=list4.getDouble(19);
		list4_F8=list4.getDouble(20);
		list4_T1=list4.getDouble(21);
		list4_T2=list4.getDouble(22);
		list4_T3=list4.getDouble(23);
		list4_T4=list4.getDouble(24);
		list4_T5=list4.getDouble(25);
		list4_T6=list4.getDouble(26);
		list4_T7=list4.getDouble(27);
		list4_T8=list4.getDouble(28);
	}

	//ResultSet list4 객체의 필드 값 초기화 함수
	private void setFieldInitFromlist4(){
		list4_AVG_AGE=0;
		list4_T=0;
		list4_TM=0;
		list4_TF=0;
		list4_M1=0;
		list4_M2=0;
		list4_M3=0;
		list4_M4=0;
		list4_M5=0;
		list4_M6=0;
		list4_M7=0;
		list4_M8=0;
		list4_F1=0;
		list4_F2=0;
		list4_F3=0;
		list4_F4=0;
		list4_F5=0;
		list4_F6=0;
		list4_F7=0;
		list4_F8=0;
		list4_T1=0;
		list4_T2=0;
		list4_T3=0;
		list4_T4=0;
		list4_T5=0;
		list4_T6=0;
		list4_T7=0;
		list4_T8=0;
	}

	//ResultSet list3 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlist3() throws Exception{
		list3_Y0=list3.getDouble(1);
		list3_Y2=list3.getDouble(2);
		list3_Y3=list3.getDouble(3);
		list3_Y4=list3.getDouble(4);
		list3_Y5=list3.getDouble(5);
		list3_Y6=list3.getDouble(6);
		list3_Y7=list3.getDouble(7);
		list3_Y8=list3.getDouble(8);
		list3_Y9=list3.getDouble(9);
		list3_Y10=list3.getDouble(10);
		list3_AVG_YEAR=list3.getDouble(11);
	}

	//ResultSet list3 객체의 필드 값 초기화 함수
	private void setFieldInitFromlist3(){
		list3_Y0=0;
		list3_Y2=0;
		list3_Y3=0;
		list3_Y4=0;
		list3_Y5=0;
		list3_Y6=0;
		list3_Y7=0;
		list3_Y8=0;
		list3_Y9=0;
		list3_Y10=0;
		list3_AVG_YEAR=0;
	}

	//ResultSet list2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlist2() throws Exception{
		list2_CODE=GetB(list2.getString(1));
		list2_CODENM=GetB(list2.getString(2));
		list2_TCOUNT=list2.getDouble(3);
		list2_SORT=list2.getDouble(4);
	}

	//ResultSet list2 객체의 필드 값 초기화 함수
	private void setFieldInitFromlist2(){
		list2_CODE="";
		list2_CODENM="";
		list2_TCOUNT=0;
		list2_SORT=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="교 육 생 현 황";
		sheet10_A2="1.교육인원(직급별)";
		sheet10_K3="(단위 : 명)";
		sheet10_A4="          기관별직급별";
		sheet10_B4="계";
		sheet10_C4="시";
		sheet10_D4="중구";
		sheet10_E4="동구";
		sheet10_F4="남구";
		sheet10_G4="연수구";
		sheet10_H4="남동구";
		sheet10_I4="부평구";
		sheet10_J4="계양구";
		sheet10_K4="서구";
		sheet10_L4="강화군";
		sheet10_M4="웅진군";
		sheet10_N4="기타";
		sheet10_O4="기타기관";
		sheet10_A5="계";
		sheet20_A1="2.직렬별";
		sheet20_L2="(단위 : 명)";
		sheet30_A2="3.학력별";
		sheet30_D3="(단위 : 명)";
		sheet30_A4="계";
		sheet30_B4="3년미만";
		sheet30_C4="3년";
		sheet30_D4="4년";
		sheet30_E4="5년";
		sheet30_F4="6년";
		sheet30_G4="7년";
		sheet30_H4="8년";
		sheet30_I4="9년";
		sheet30_J4="10년이상";
		sheet40_A1="4.연령별";
		sheet40_F2="(단위 :  명)";
		sheet40_A3="구분";
		sheet40_B3="계";
		sheet40_C3="25세이하";
		sheet40_D3="26~30세";
		sheet40_E3="31~35세";
		sheet40_F3="36~40세";
		sheet40_G3="41~45세";
		sheet40_H3="46~50세";
		sheet40_I3="51~55세";
		sheet40_J3="56세이상";
		sheet40_A4="남";
		sheet40_A5="여";
		sheet40_A6="인원";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
