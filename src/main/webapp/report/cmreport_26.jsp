<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*,java.util.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_J3;
	String sheet10_K3;
	String sheet10_A5;
	String sheet10_B5;
	String sheet10_J5;
	double sheet10_K5;
	double sheet10_L5;
	String sheet10_A7;
	String sheet10_C7;
	String sheet10_D7;
	String sheet10_E7;
	String sheet10_F7;
	String sheet10_G7;
	String sheet10_H7;
	String sheet10_I7;
	String sheet10_A8;
	double sheet10_C8;
	double sheet10_D8;
	double sheet10_E8;
	double sheet10_F8;
	double sheet10_G8;
	double sheet10_H8;
	double sheet10_I8;
	String sheet10_A10;
	String sheet10_A11;
	String sheet10_E11;
	String sheet10_A12;
	double sheet10_E12;
	String sheet10_A13;
	double sheet10_E13;
	String sheet20_A2;
	double sheet20_K2;
	String sheet20_A3;
	String sheet20_B3;
	String sheet20_C3;
	String sheet20_D3;
	String sheet20_E3;
	String sheet20_F3;
	String sheet20_G3;
	String sheet20_H3;
	String sheet20_I3;
	String sheet20_J3;
	String sheet20_A4;
	double sheet20_B4;
	double sheet20_C4;
	double sheet20_D4;
	double sheet20_E4;
	double sheet20_F4;
	double sheet20_G4;
	double sheet20_H4;
	double sheet20_I4;
	double sheet20_J4;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_T;		//ResultSet T 객체를 생성하기 위한 Statement 객체
	private ResultSet T;		//ResultSet T 객체
	private java.sql.Statement stat_GR;		//ResultSet GR 객체를 생성하기 위한 Statement 객체
	private ResultSet GR;		//ResultSet GR 객체
	private java.sql.Statement stat_DP;		//ResultSet DP 객체를 생성하기 위한 Statement 객체
	private ResultSet DP;		//ResultSet DP 객체
	private java.sql.Statement stat_L1;		//ResultSet L1 객체를 생성하기 위한 Statement 객체
	private ResultSet L1;		//ResultSet L1 객체
	private java.sql.Statement stat_AG;		//ResultSet AG 객체를 생성하기 위한 Statement 객체
	private ResultSet AG;		//ResultSet AG 객체
	private java.sql.Statement stat_L2;		//ResultSet L2 객체를 생성하기 위한 Statement 객체
	private ResultSet L2;		//ResultSet L2 객체

	//-----SQL 변수 선언-----
	private String sql_T;		//ResultSet T 객체를 생성하기 위한 쿼리문 저장
	private String sql_GR;		//ResultSet GR 객체를 생성하기 위한 쿼리문 저장
	private String sql_DP;		//ResultSet DP 객체를 생성하기 위한 쿼리문 저장
	private String sql_L1;		//ResultSet L1 객체를 생성하기 위한 쿼리문 저장
	private String sql_AG;		//ResultSet AG 객체를 생성하기 위한 쿼리문 저장
	private String sql_L2;		//ResultSet L2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet T 객체에서 필드 값을 받는 쿼리 필드 변수
	private double T_STUCNT5;
	private double T_STUCNT6;
	private double T_STUCNT7;
	private double T_STUCNT8;
	private double T_STUCNT9;
	private double T_STUCNT10;
	private double T_STUCNTTOT;

	//ResultSet GR 객체에서 필드 값을 받는 쿼리 필드 변수
	private String GR_STARTED;
	private String GR_ENDDATE;
	private String GR_GRTITLE;

	//ResultSet DP 객체에서 필드 값을 받는 쿼리 필드 변수
	private double DP_DEPT_CNT;
	private double DP_STUCNT;
	private String DP_DEPTNM;

	//ResultSet L1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L1_CODE;
	private String L1_JIKRNM;
	private double L1_STUCNT;

	//ResultSet AG 객체에서 필드 값을 받는 쿼리 필드 변수
	private double AG_AVG_AGE;

	//ResultSet L2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L2_GUBUN;
	private String L2_GUBUNNM;
	private double L2_STUCNTTOT;
	private double L2_STUCNT25;
	private double L2_STUCNT30;
	private double L2_STUCNT35;
	private double L2_STUCNT40;
	private double L2_STUCNT45;
	private double L2_STUCNT50;
	private double L2_STUCNT55;
	private double L2_STUCNT56;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(L2!=null) L2.close();
				if(stat_L2!=null) stat_L2.close();
				if(AG!=null) AG.close();
				if(stat_AG!=null) stat_AG.close();
				if(L1!=null) L1.close();
				if(stat_L1!=null) stat_L1.close();
				if(DP!=null) DP.close();
				if(stat_DP!=null) stat_DP.close();
				if(GR!=null) GR.close();
				if(stat_GR!=null) stat_GR.close();
				if(T!=null) T.close();
				if(stat_T!=null) stat_T.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 79, 546, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle01(true, true);    //머리글 밴드 호출
		getScriptFrompart1(true, true);    //Void 밴드 호출
		getScriptFromL1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(41, 79, 546, 801, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromL2(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title01 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title01
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet GR 객체의 생성
			if(GR==null){
				GR = stat_GR.executeQuery(sql_GR);
			}else{
				GR.beforeFirst();
			}

			//데이터 fetch
			if(GR.next()){
				setFieldVariableFromGR();	//ResultSet GR에서 필드 값 설정
			}else{
				setFieldInitFromGR();	//ResultSet GR의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";

			//데이터 변수 할당
			sheet10_A1=GR_GRTITLE;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle01();
		}   //end if(bIsPrint)
	}

	//----part1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=140;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet GR 객체의 생성
			if(GR==null){
				GR = stat_GR.executeQuery(sql_GR);
			}else{
				GR.beforeFirst();
			}
			//ResultSet DP 객체의 생성
			if(DP==null){
				DP = stat_DP.executeQuery(sql_DP);
			}else{
				DP.beforeFirst();
			}
			//ResultSet T 객체의 생성
			if(T==null){
				T = stat_T.executeQuery(sql_T);
			}else{
				T.beforeFirst();
			}

			//데이터 fetch
			if(GR.next()){
				setFieldVariableFromGR();	//ResultSet GR에서 필드 값 설정
			}else{
				setFieldInitFromGR();	//ResultSet GR의 필드 값 초기화
			}
			if(DP.next()){
				setFieldVariableFromDP();	//ResultSet DP에서 필드 값 설정
			}else{
				setFieldInitFromDP();	//ResultSet DP의 필드 값 초기화
			}
			if(T.next()){
				setFieldVariableFromT();	//ResultSet T에서 필드 값 설정
			}else{
				setFieldInitFromT();	//ResultSet T의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B3="";
			sheet10_J3="";
			sheet10_K3="";
			sheet10_B5="";
			sheet10_J5="";
			sheet10_K5=0;
			sheet10_L5=0;
			sheet10_C8=0;
			sheet10_D8=0;
			sheet10_E8=0;
			sheet10_F8=0;
			sheet10_G8=0;
			sheet10_H8=0;
			sheet10_I8=0;

			//데이터 변수 할당
			sheet10_B3= GR_STARTED + " ~ " + GR_ENDDATE;
			sheet10_J3=GR_STARTED;
			sheet10_K3=GR_ENDDATE;
			sheet10_B5= DP_DEPTNM + "등 " + DP_DEPT_CNT + "개 기관" + DP_STUCNT +"명";
			sheet10_J5=DP_DEPTNM;
			sheet10_K5=DP_DEPT_CNT;
			sheet10_L5=DP_STUCNT;
			sheet10_C8=T_STUCNT5;
			sheet10_D8=T_STUCNT6;
			sheet10_E8=T_STUCNT7;
			sheet10_F8=T_STUCNT8;
			sheet10_G8=T_STUCNT9;
			sheet10_H8=T_STUCNT10;
			sheet10_I8=T_STUCNTTOT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----L1_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L1_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL1_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL1_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----con ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : con
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromcon(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_E13=0;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromL1_header(false, true);	//반복 헤더 호출
				}
				writeScriptcon();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet10_E13=0;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_E13=SUM(sheet10_E12, sheet10_E13);
		}   //end if(!bIsLast)
	}

	//-----L1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : L1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromL1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_con=false;   //con 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A12="";
		sheet10_E12=0;

		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}

		while(L1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL1();	//RecordSet L1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromL1_header(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_con=false;    //con 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A12=L1_JIKRNM;
			sheet10_E12=L1_STUCNT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromcon(bIsFirst, false, bIsTrue_con, true);   //con 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromL1_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptL1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromcon(bIsFirst, true, true, true);   //con 조건 밴드 호출
	}

	//----L2_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : L2_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL2_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=65;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet AG 객체의 생성
			if(AG==null){
				AG = stat_AG.executeQuery(sql_AG);
			}else{
				AG.beforeFirst();
			}

			//데이터 fetch
			if(AG.next()){
				setFieldVariableFromAG();	//ResultSet AG에서 필드 값 설정
			}else{
				setFieldInitFromAG();	//ResultSet AG의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_A2="";
			sheet20_K2=0;

			//데이터 변수 할당
			sheet20_A2= "□ 연령별 : 평균( " + AG_AVG_AGE + "세)";
			sheet20_K2=AG_AVG_AGE;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL2_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----L2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : L2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromL2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet20_A4="";
		sheet20_B4=0;
		sheet20_C4=0;
		sheet20_D4=0;
		sheet20_E4=0;
		sheet20_F4=0;
		sheet20_G4=0;
		sheet20_H4=0;
		sheet20_I4=0;
		sheet20_J4=0;

		//DataSet 객체 생성
		//ResultSet L2 객체의 생성
		if(L2==null){
			L2 = stat_L2.executeQuery(sql_L2);
		}else{
			L2.beforeFirst();
		}

		while(L2.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL2();	//RecordSet L2에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromL2_header(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A4=L2_GUBUNNM;
			sheet20_B4=L2_STUCNTTOT;
			sheet20_C4=L2_STUCNT25;
			sheet20_D4=L2_STUCNT30;
			sheet20_E4=L2_STUCNT35;
			sheet20_F4=L2_STUCNT40;
			sheet20_G4=L2_STUCNT45;
			sheet20_H4=L2_STUCNT50;
			sheet20_I4=L2_STUCNT55;
			sheet20_J4=L2_STUCNT56;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromL2_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptL2();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----title01 스크립트 문 출력 함수----
	private void writeScripttitle01( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(41,41,504,0,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
	}

	//----part1 스크립트 문 출력 함수----
	private void writeScriptpart1( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",83,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.print("^PRINT("+(nXCurPos+83)+","+(nYCurPos+20)+",421,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+60)+",83,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.print("^PRINT("+(nXCurPos+83)+","+(nYCurPos+60)+",421,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+90)+",105,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",105,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",105,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",105,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+90)+",105,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+90)+",105,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLBG("+(nXCurPos+105)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+105)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLBG("+(nXCurPos+162)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+162)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D7+"\r");
		out.println("^CELLBG("+(nXCurPos+219)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E7+"\r");
		out.println("^CELLBG("+(nXCurPos+276)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F7+"\r");
		out.println("^CELLBG("+(nXCurPos+333)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+333)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G7+"\r");
		out.println("^CELLBG("+(nXCurPos+390)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+390)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H7+"\r");
		out.println("^CELLBG("+(nXCurPos+447)+","+(nYCurPos+90)+",57,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+90)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+447)+","+(nYCurPos+90)+",57,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I7+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",105,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",105,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",105,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+110)+",105,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+110)+",105,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+105)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+105)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C8+"\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+162)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+162)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D8+"\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E8+"\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+276)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+276)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F8+"\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+333)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+333)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G8+"\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+390)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+390)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H8+"\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+447)+","+(nYCurPos+110)+",57,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+447)+","+(nYCurPos+110)+",57,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I8+"\r");
	}

	//----L1_header 스크립트 문 출력 함수----
	private void writeScriptL1_header( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",83,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+20)+",219,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",219,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",219,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",219,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",219,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",219,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.println("^CELLBG("+(nXCurPos+219)+","+(nYCurPos+20)+",285,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+20)+",285,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+20)+",285,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+20)+",285,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos+20)+",285,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos+20)+",285,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E11+"\r");
	}

	//----con 스크립트 문 출력 함수----
	private void writeScriptcon( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",219,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A13+"\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos)+",285,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E13+"\r");
	}

	//----L1 스크립트 문 출력 함수----
	private void writeScriptL1( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",219,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",219,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+219)+","+(nYCurPos)+",285,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos)+",285,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E12+"\r");
	}

	//----L2_header 스크립트 문 출력 함수----
	private void writeScriptL2_header( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+10)+",254,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A2+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_A3+"\r");
		out.println("^CELLBG("+(nXCurPos+50)+","+(nYCurPos+30)+",54,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos+30)+",54,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos+30)+",54,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos+30)+",54,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos+30)+",54,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+50)+","+(nYCurPos+30)+",54,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+104)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_C3+"\r");
		out.println("^CELLBG("+(nXCurPos+154)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+154)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+204)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+204)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+254)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+254)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+304)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+304)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_G3+"\r");
		out.println("^CELLBG("+(nXCurPos+354)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+354)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_H3+"\r");
		out.println("^CELLBG("+(nXCurPos+404)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+404)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_I3+"\r");
		out.println("^CELLBG("+(nXCurPos+454)+","+(nYCurPos+30)+",50,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos+30)+",50,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+454)+","+(nYCurPos+30)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet20_J3+"\r");
	}

	//----L2 스크립트 문 출력 함수----
	private void writeScriptL2( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos)+",54,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos)+",54,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos)+",54,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+50)+","+(nYCurPos)+",54,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+50)+","+(nYCurPos)+",54,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+154)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+154)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+204)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+204)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+254)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+254)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+304)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+304)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_G4+"\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+354)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+354)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_H4+"\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+404)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+404)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_I4+"\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+454)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+454)+","+(nYCurPos)+",50,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_J4+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=GetB(request.getParameter("p_grcode"));
		p_grseq_Param=GetB(request.getParameter("p_grseq"));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","cmlms","fhxl21");stat_T=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_GR=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_DP=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_AG=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L2=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_T = "select  sum(decode(is_dognm(code) ,'5급', 1, 0)) stucnt5,  sum(decode(is_dognm(code) ,'6급', 1, 0)) stucnt6, ";
		sql_T = sql_T + "                   sum(decode(is_dognm(code) ,'7급', 1, 0)) stucnt7,  sum(decode(is_dognm(code) ,'8급', 1, 0)) stucnt8, ";
		sql_T = sql_T + "                   sum(decode(is_dognm(code) ,'9급', 1, 0)) stucnt9,  sum(decode(is_dognm(code) ,'9급10급', 1, 0)) stucnt10, ";
		sql_T = sql_T + "                   count(*) stucnttot ";
		sql_T = sql_T + "from  ";
		sql_T = sql_T + "( ";
		sql_T = sql_T + "select a.grcode, a.grseq, jg.code, a.userno  ";
		sql_T = sql_T + "from  cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c, cmtb_jikgubun jg, cmtb_jik j   ";
		sql_T = sql_T + "where jg.jikgubun(+)='dogs' and a.jik=j.jik(+) and j.dogs=jg.code(+) and a.grcode=b.grcode and a.grseq=b.grseq  ";
		sql_T = sql_T + "          and a.off_userno=c.off_userno and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y' ";
		sql_T = sql_T + ")";
		sql_GR = "select to_char(started,'yyyy.mm.dd') started, to_char(enddate, 'yyyy.mm.dd') enddate ,  ";
		sql_GR = sql_GR + "         grcodeniknm || ' ' || substr(grseq, 1, 4) ||'년 ' || substr(grseq, -2) ||'기' as grtitle ";
		sql_GR = sql_GR + "         from cmtb_grseq where grcode='" + p_grcode_Param + "' and grseq='" + p_grseq_Param + "'";
		sql_DP = "select dept_cnt, stucnt , (select deptnm from cmtb_dept where dept=a.mdept) deptnm ";
		sql_DP = sql_DP + "      from ( ";
		sql_DP = sql_DP + "         select count(distinct dept) dept_cnt, count(*) stucnt, min(dept) mdept ";
		sql_DP = sql_DP + "         from (select a.dept, a.off_userno from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c  ";
		sql_DP = sql_DP + "                  where a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno and a.grcode='" + p_grcode_Param + "'  ";
		sql_DP = sql_DP + "                  and a.grseq='" + p_grseq_Param + "' and a.grchk='Y')  ";
		sql_DP = sql_DP + "      ) a";
		sql_L1 = "select code, decode(jikrnm, null, '기타', jikrnm) as jikrnm, stucnt ";
		sql_L1 = sql_L1 + "        from ( ";
		sql_L1 = sql_L1 + "                 select  ";
		sql_L1 = sql_L1 + "	jg.code, jg.codenm jikrnm, count(*)  stucnt ";
		sql_L1 = sql_L1 + "                from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c, cmtb_jikgubun jg, cmtb_jik j   ";
		sql_L1 = sql_L1 + "                where jg.jikgubun(+)='jiks' and a.jik=j.jik(+) and j.jikr=jg.code(+)  ";
		sql_L1 = sql_L1 + "                          and a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno  ";
		sql_L1 = sql_L1 + "                          and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y' ";
		sql_L1 = sql_L1 + "               group by jg.code, jg.codenm)";
		sql_AG = "select round(avg((to_number(substr(grseq,1,4))-to_number(birth_year)+1)),2) avg_age ";
		sql_AG = sql_AG + "      from (select a.grcode, a.grseq, to_char(c.birth_date,'yyyy') birth_year, a.userno  ";
		sql_AG = sql_AG + "              from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c  ";
		sql_AG = sql_AG + "               where a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno  ";
		sql_AG = sql_AG + "                        and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y' and c.birth_date is not null ";
		sql_AG = sql_AG + ")";
		sql_L2 = "select gubun, decode(gubun, 'M', '남', 'F', '여', '계') gubunnm, stucnttot, stucnt25, stucnt30, stucnt35, stucnt40, stucnt45, ";
		sql_L2 = sql_L2 + "                 stucnt50, stucnt55, stucnt56 ";
		sql_L2 = sql_L2 + "from ";
		sql_L2 = sql_L2 + "(select 'M' as gubun, count(*) as stucnttot, ";
		sql_L2 = sql_L2 + " sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) <= 25 or to_char(c.birth_date,'yyyy') is null then 1 else 0 end) stucnt25, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 26 and 30 then 1 else 0 end) stucnt30,sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 31 and 35 then 1 else 0 end) stucnt35, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 36 and 40 then 1 else 0 end) stucnt40, ";
		sql_L2 = sql_L2 + "sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 41 and 45 then 1 else 0 end) stucnt45, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 46 and 50 then 1 else 0 end) stucnt50, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 51 and 55 then 1 else 0 end) stucnt55, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) >= 56 then 1 else 0 end) stucnt56 ";
		sql_L2 = sql_L2 + "from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c  ";
		sql_L2 = sql_L2 + "where a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno  ";
		sql_L2 = sql_L2 + "         and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y' and c.sex='M' ";
		sql_L2 = sql_L2 + "union all ";
		sql_L2 = sql_L2 + "select 'F' as gubun, count(*) as stucnttot,  sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) <= 25 or to_char(c.birth_date,'yyyy') is null then 1 else 0 end) stucnt25, ";
		sql_L2 = sql_L2 + "sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 26 and 30 then 1 else 0 end) stucnt30, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 31 and 35 then 1 else 0 end) stucnt35, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 36 and 40 then 1 else 0 end) stucnt40, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 41 and 45 then 1 else 0 end) stucnt45, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 46 and 50 then 1 else 0 end) stucnt50, ";
		sql_L2 = sql_L2 + " sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 51 and 55 then 1 else 0 end) stucnt55, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) >= 56 then 1 else 0 end) stucnt56 ";
		sql_L2 = sql_L2 + "from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c  ";
		sql_L2 = sql_L2 + "where a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno  ";
		sql_L2 = sql_L2 + "         and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y' and c.sex='F' ";
		sql_L2 = sql_L2 + "union all ";
		sql_L2 = sql_L2 + "select 'T' as gubun, count(*) as stucnttot, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) <= 25 or to_char(c.birth_date,'yyyy') is null then 1 else 0 end) stucnt25, ";
		sql_L2 = sql_L2 + " sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 26 and 30 then 1 else 0 end) stucnt30, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 31 and 35 then 1 else 0 end) stucnt35, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 36 and 40 then 1 else 0 end) stucnt40, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 41 and 45 then 1 else 0 end) stucnt45, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 46 and 50 then 1 else 0 end) stucnt50, ";
		sql_L2 = sql_L2 + " sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) between 51 and 55 then 1 else 0 end) stucnt55, sum(case when (to_number(substr(a.grseq,1,4))-to_number(to_char(c.birth_date,'yyyy'))+1) >= 56 then 1 else 0 end) stucnt56 ";
		sql_L2 = sql_L2 + "from cmtb_offapp_info a, cmtb_grseq b, cmtb_offmember c  ";
		sql_L2 = sql_L2 + "where a.grcode=b.grcode and a.grseq=b.grseq and a.off_userno=c.off_userno  ";
		sql_L2 = sql_L2 + "and a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grchk='Y'  ";
		sql_L2 = sql_L2 + ")";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet T 객체에서 필드 값 설정 함수
	private void setFieldVariableFromT() throws Exception{
		T_STUCNT5=T.getDouble(1);
		T_STUCNT6=T.getDouble(2);
		T_STUCNT7=T.getDouble(3);
		T_STUCNT8=T.getDouble(4);
		T_STUCNT9=T.getDouble(5);
		T_STUCNT10=T.getDouble(6);
		T_STUCNTTOT=T.getDouble(7);
	}

	//ResultSet T 객체의 필드 값 초기화 함수
	private void setFieldInitFromT(){
		T_STUCNT5=0;
		T_STUCNT6=0;
		T_STUCNT7=0;
		T_STUCNT8=0;
		T_STUCNT9=0;
		T_STUCNT10=0;
		T_STUCNTTOT=0;
	}

	//ResultSet GR 객체에서 필드 값 설정 함수
	private void setFieldVariableFromGR() throws Exception{
		GR_STARTED=GetB(GR.getString(1));
		GR_ENDDATE=GetB(GR.getString(2));
		GR_GRTITLE=GetB(GR.getString(3));
	}

	//ResultSet GR 객체의 필드 값 초기화 함수
	private void setFieldInitFromGR(){
		GR_STARTED="";
		GR_ENDDATE="";
		GR_GRTITLE="";
	}

	//ResultSet DP 객체에서 필드 값 설정 함수
	private void setFieldVariableFromDP() throws Exception{
		DP_DEPT_CNT=DP.getDouble(1);
		DP_STUCNT=DP.getDouble(2);
		DP_DEPTNM=GetB(DP.getString(3));
	}

	//ResultSet DP 객체의 필드 값 초기화 함수
	private void setFieldInitFromDP(){
		DP_DEPT_CNT=0;
		DP_STUCNT=0;
		DP_DEPTNM="";
	}

	//ResultSet L1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL1() throws Exception{
		L1_CODE=GetB(L1.getString(1));
		L1_JIKRNM=GetB(L1.getString(2));
		L1_STUCNT=L1.getDouble(3);
	}

	//ResultSet L1 객체의 필드 값 초기화 함수
	private void setFieldInitFromL1(){
		L1_CODE="";
		L1_JIKRNM="";
		L1_STUCNT=0;
	}

	//ResultSet AG 객체에서 필드 값 설정 함수
	private void setFieldVariableFromAG() throws Exception{
		AG_AVG_AGE=AG.getDouble(1);
	}

	//ResultSet AG 객체의 필드 값 초기화 함수
	private void setFieldInitFromAG(){
		AG_AVG_AGE=0;
	}

	//ResultSet L2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL2() throws Exception{
		L2_GUBUN=GetB(L2.getString(1));
		L2_GUBUNNM=GetB(L2.getString(2));
		L2_STUCNTTOT=L2.getDouble(3);
		L2_STUCNT25=L2.getDouble(4);
		L2_STUCNT30=L2.getDouble(5);
		L2_STUCNT35=L2.getDouble(6);
		L2_STUCNT40=L2.getDouble(7);
		L2_STUCNT45=L2.getDouble(8);
		L2_STUCNT50=L2.getDouble(9);
		L2_STUCNT55=L2.getDouble(10);
		L2_STUCNT56=L2.getDouble(11);
	}

	//ResultSet L2 객체의 필드 값 초기화 함수
	private void setFieldInitFromL2(){
		L2_GUBUN="";
		L2_GUBUNNM="";
		L2_STUCNTTOT=0;
		L2_STUCNT25=0;
		L2_STUCNT30=0;
		L2_STUCNT35=0;
		L2_STUCNT40=0;
		L2_STUCNT45=0;
		L2_STUCNT50=0;
		L2_STUCNT55=0;
		L2_STUCNT56=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A3="□ 교육기간 :";
		sheet10_A5="□ 교육인원 :";
		sheet10_A7="구분";
		sheet10_C7="5급";
		sheet10_D7="6급";
		sheet10_E7="7급";
		sheet10_F7="8급";
		sheet10_G7="9급";
		sheet10_H7="기능9급";
		sheet10_I7="총계";
		sheet10_A8="인원";
		sheet10_A10="□ 직렬별";
		sheet10_A11="구분";
		sheet10_E11="인원";
		sheet10_A13="합계";
		sheet20_A3="구분";
		sheet20_B3="계";
		sheet20_C3="25세이하";
		sheet20_D3="26세~30세";
		sheet20_E3="31세~35세";
		sheet20_F3="36세~40세";
		sheet20_G3="41세~45세";
		sheet20_H3="46세~50세";
		sheet20_I3="51세~55세";
		sheet20_J3="56세이상";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle01(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
