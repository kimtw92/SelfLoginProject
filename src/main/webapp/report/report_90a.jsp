<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_B3;
	String sheet10_C3;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_B5;
	String sheet10_C5;
	String sheet10_B8;
	String sheet10_B9;
	String sheet10_A24;
	String sheet10_A26;
	String sheet20_A2;
	String sheet20_D2;
	String sheet20_E2;
	String sheet20_F2;
	String sheet20_G2;
	String sheet20_A3;
	String sheet20_D3;
	double sheet20_E3;
	String sheet20_F3;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_info;		//ResultSet info 객체를 생성하기 위한 Statement 객체
	private ResultSet info;		//ResultSet info 객체
	private java.sql.Statement stat_L;		//ResultSet L 객체를 생성하기 위한 Statement 객체
	private ResultSet L;		//ResultSet L 객체

	//-----SQL 변수 선언-----
	private String sql_info;		//ResultSet info 객체를 생성하기 위한 쿼리문 저장
	private String sql_L;		//ResultSet L 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String info_DEPTNO;
	private String info_NAME;
	private String info_RES_NO;

	//ResultSet L 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L_EDU_TIME;
	private String L_GRCODENM;
	private double L_TTIME;
	private String L_LECNM;

	//파라미터 변수 선언
	String p_userno_Param;

	//-----사용자 정의 변수 및 함수-----
	private String removeHtmlTag(String srcText) {
		//대체(치환)하고 하는 문자열이 더 있는 경우 아래의 배열에 쌍으로 추가
		String[] relSrc = {"&NBSP;", "&lt;", "&gt;", "&amp;", "&quot;"};
		String[] relTgt = {" ", "<", ">", "&", "\"" };

		int pointer = 0, st = 0, ed = 0;
		int size = srcText.length();
		StringBuffer buf = new StringBuffer(size);

		while (st != -1) {
			st = srcText.indexOf("<", st);
			if (st != -1) {
				ed = srcText.indexOf(">", st+1);
				if (ed == -1) {
					break;
				} 
				buf.append(srcText.substring(pointer, st));
				pointer = st = ed + 1;
			}
		}
		if (pointer < size) {
			buf.append(srcText.substring(pointer));
		}

		srcText = buf.toString();
		// 특수문자열의 대체가 불필요한 경우 아래의 for 문을 주석처리 가능
		for (int i = 0; i < relSrc.length; i++) {
			pointer = st = 0;
			if (srcText.indexOf(relSrc[i], pointer) == -1) continue;

			buf.setLength(0);
			size = srcText.length();
			int len = relSrc[i].length();

			while ((pointer = srcText.indexOf(relSrc[i], pointer)) != -1) {
				buf.append(srcText.substring(st, pointer));
				buf.append(relTgt[i]);
				pointer += len;
				st = pointer;
			}
			if (st < size) {
				buf.append(srcText.substring(st));
			}
			srcText = buf.toString();
		}

		return srcText;
	}


	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1 함수 호출
			executeSheet1();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(L!=null) L.close();
				if(stat_L!=null) stat_L.close();
				if(info!=null) info.close();
				if(stat_info!=null) stat_info.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1 Start-----
	//-----폼 형식 : 절대 양식
	private void executeSheet1( ) throws Exception{
		//지역 변수 선언 및 초기화
		boolean bIsFirst;    //절대 양식에서 각 밴드 함수에 대한 최초 호출 여부
		bIsFirst=true;
		//각 반복 밴드에서 참조하는 데이터셋 객체의 현재 위치
		int []nPos_a=new int[1];
		nPos_a[0]=0;
		//각 반복 밴드에서 참조하는 데이터셋 객체의 필드 값 설정 함수 호출 여부 설정
		boolean []bIsLoop_a=new boolean[1];
		bIsLoop_a[0]=true;
		nLoopRef=1;    //참조 반복 밴드의 수 설정

		//현재 페이지 번호 설정
		nPageNum=nMaxPage+1;

		do{
			//페이지 번호 출력
			out.print("-- " + nPageNum + " PAGE --\r");

			//밴드 함수 호출
			getScriptFromVoidBand100(bIsFirst);    //VoidBand100 함수 호출
			getScriptFromVoidBand200(bIsFirst);    //VoidBand200 함수 호출
			getScriptFroma(bIsFirst, nPos_a, bIsLoop_a);    //a 함수 호출

			//다음 페이지 번호 설정
			nPageNum=nPageNum+1;

			//밴드 호출 인자 설정
			bIsFirst=false;
		}while(nLoopRef!=0);

		//최대 페이지 번호 설정
		nMaxPage=nPageNum-1;
	}

	//-----밴드 함수-----
	//----VoidBand100 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : VoidBand100
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	private void getScriptFromVoidBand100(boolean bIsFirst) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=1271;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet info 객체의 생성
			if(info==null){
				info = stat_info.executeQuery(sql_info);
			}else{
				info.beforeFirst();
			}

			//데이터 fetch
			if(info.next()){
				setFieldVariableFrominfo();	//ResultSet info에서 필드 값 설정
			}else{
				setFieldInitFrominfo();	//ResultSet info의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C3="";
			sheet10_C4="";
			sheet10_C5="";

			//데이터 변수 할당
			sheet10_C3=info_NAME;
			sheet10_C4=info_DEPTNO;
			sheet10_C5=info_RES_NO;
		}   //end if(bIsFirst)

		//출력 좌표 설정
		nXCurPos=52;
		nYCurPos=69;

		//스크립트 출력 함수 호출
		writeScriptVoidBand100();
	}

	//----VoidBand200 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : VoidBand200
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	private void getScriptFromVoidBand200(boolean bIsFirst) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=276;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//출력 좌표 설정
		nXCurPos=52;
		nYCurPos=69;

		//스크립트 출력 함수 호출
		writeScriptVoidBand200();
	}

	//-----a RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : a
	//-----밴드 종류 : 반복 밴드
	//-----bIsFirst : 쉬트 함수나 부모 반복 밴드에서 최초 호출 여부 판단
	//-----nPosDataSet : 밴드에 연결된 데이터셋의 현재 커런트 로우의 위치 자식 반복 밴드에서는 전달되지 않음
	//-----bIsLoop : 밴드에 연결된 데이터셋의 끝에 도달했는지 판단 자식 반복 밴드에서는 전달되지 않음
	private void getScriptFroma(boolean bIsFirst, int []nPosDataSet, boolean []bIsLoop) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이
		int i;    //루프 카운트 변수 선언
		int nRepeatNum=10;    //출력 Line 수

		//데이터 변수 초기화
		sheet20_A3="";
		sheet20_D3="";
		sheet20_E3=0;
		sheet20_F3="";

		//DataSet 객체 생성 및 커서 설정
		if(bIsFirst){
			//ResultSet L 객체의 생성
			if(L==null){
				L = stat_L.executeQuery(sql_L);
			}else{
				L.beforeFirst();
			}
		}else if(bIsLoop[0]){
			L.absolute(nPosDataSet[0]);
		}

		//출력 좌표 설정
		nXCurPos=52;		//밴드 시작 X좌표 설정
		nYCurPos=345;		//밴드 시작 Y좌표 설정

		for(i=0; i<nRepeatNum; i++){   //자동으로 생성되는 반복 밴드의 루프문
			if(bIsLoop[0]){
				if(L.next()){   //반복 밴드의 데이터셋의 끝이 아닌 경우
					//데이터 fetch
					setFieldVariableFromL();	//RecordSet L에서 필드 값 설정

					//데이터 변수 할당
					sheet20_A3=L_EDU_TIME;
					sheet20_D3=L_GRCODENM;
					sheet20_E3=L_TTIME;
					sheet20_F3=L_LECNM;
				}else{   //데이터 셋의 끝에 도달한 경우
					//루프 참조 변수 설정
					bIsLoop[0]=false;
					nLoopRef=nLoopRef-1;		//루프 참조 변수 감소
				}
			}   //end if(bIsLoop)

			//스크립트 출력 함수 호출
			writeScripta(bIsLoop[0]);

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;		//다음 레코드를 출력할 좌표 설정
		}   //for end

		//DataSet 커서 및 루프 참조 변수 설정
		if(bIsLoop[0]){
			if(L.next()){
				nPosDataSet[0]=L.getRow()-1;	//쉬트 반복시 접근할 데이터셋의 현재 위치 저장
			}else{
				bIsLoop[0]=false;
				nLoopRef=nLoopRef-1;		//루프 참조 변수 감소
			}
		}
	}

	//-----스크립트 출력 함수-----
	//----VoidBand100 스크립트 문 출력 함수----
	private void writeScriptVoidBand100( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",489,1,22,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,41,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT("+(nXCurPos+18)+","+(nYCurPos+76)+",88,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.print("^PRINT("+(nXCurPos+106)+","+(nYCurPos+76)+",221,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C3+"\r");
		out.print("^PRINT("+(nXCurPos+18)+","+(nYCurPos+96)+",88,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B4+"\r");
		out.print("^PRINT("+(nXCurPos+106)+","+(nYCurPos+96)+",221,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C4+"\r");
		out.print("^PRINT("+(nXCurPos+18)+","+(nYCurPos+116)+",88,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.print("^PRINT("+(nXCurPos+106)+","+(nYCurPos+116)+",221,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C5+"\r");
		out.print("^PRINT("+(nXCurPos+18)+","+(nYCurPos+176)+",471,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B8+"\r");
		out.print("^PRINT("+(nXCurPos+18)+","+(nYCurPos+196)+",471,0,12,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+631)+",489,1,13,5/YYYY.MM.DD*,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A24+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+671)+",489,1,15,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A26+"\r");
	}

	//----VoidBand200 스크립트 문 출력 함수----
	private void writeScriptVoidBand200( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+256)+",136,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+256)+",136,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+256)+",136,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+256)+",136,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+256)+",136,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+256)+",136,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A2+"\r");
		out.println("^CELLBG("+(nXCurPos+136)+","+(nYCurPos+256)+",129,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos+256)+",129,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos+256)+",129,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos+256)+",129,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos+256)+",129,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+136)+","+(nYCurPos+256)+",129,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D2+"\r");
		out.println("^CELLBG("+(nXCurPos+265)+","+(nYCurPos+256)+",47,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+256)+",47,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+256)+",47,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+256)+",47,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+256)+",47,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos+256)+",47,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E2+"\r");
		out.println("^CELLBG("+(nXCurPos+312)+","+(nYCurPos+256)+",124,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+256)+",124,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+256)+",124,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+256)+",124,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+256)+",124,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos+256)+",124,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F2+"\r");
		out.println("^CELLBG("+(nXCurPos+436)+","+(nYCurPos+256)+",54,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos+256)+",54,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos+256)+",54,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos+256)+",54,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos+256)+",54,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+436)+","+(nYCurPos+256)+",54,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_G2+"\r");
	}

	//----a 스크립트 문 출력 함수----
	private void writeScripta(boolean bIsPrint) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",136,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",136,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",136,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",136,25,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos)+",129,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos)+",129,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos)+",129,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+136)+","+(nYCurPos)+",129,25,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",47,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",47,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",47,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",47,25,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",124,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",124,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",124,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",124,25,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos)+",54,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos)+",54,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos)+",54,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+436)+","+(nYCurPos)+",54,25,0,RGB[0,0,0],3)\r");

		//고정 데이터 출력

		//수식 데이터 출력
		if(bIsPrint){
			out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",136,1,10,0/,굴림,RGB[0,0,0], , , ,XL,25,1)");
			out.println(sheet20_A3+"\r");
			out.print("^PRINT("+(nXCurPos+136)+","+(nYCurPos)+",129,1,10,0/,굴림,RGB[0,0,0], , , ,XL,25,1)");
			out.println(sheet20_D3+"\r");
			out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos)+",47,1,10,1/0/0,굴림,RGB[0,0,0], , , ,XL,25,1)");
			out.println(sheet20_E3+"\r");
			out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos)+",124,1,10,0/,굴림,RGB[0,0,0], , , ,XL,25,1)");
			out.println(sheet20_F3+"\r");
		}

		//고정 데이터 출력

		//수식 데이터 출력
		if(bIsPrint){
		}
	}

	//파라미터 설정 함수
	private void setParam(){
		p_userno_Param=GetB(request.getParameter("p_userno"));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_info = "select deptsub || '(' || mjiknm || ') ' as deptno, ";
		sql_info = sql_info + "  name, ";
		sql_info = sql_info + "  substr(resno, 1, 6)||'-'||substr(resno, 7, 7) as res_no ";
		sql_info = sql_info + "from tb_member ";
		sql_info = sql_info + "where userno='" + p_userno_Param + "'";
		sql_L = "select  ";
		sql_L = sql_L + "  str_date||'~'||end_date as edu_time, ";
		sql_L = sql_L + "  grcodenm, ";
		sql_L = sql_L + "  ttime, ";
		sql_L = sql_L + "  lecnm ";
		sql_L = sql_L + "from TV_TUTOR_HISTORY ";
		sql_L = sql_L + "where tuserno = '" + p_userno_Param + "' ";
		sql_L = sql_L + "order by str_date desc";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet info 객체에서 필드 값 설정 함수
	private void setFieldVariableFrominfo() throws Exception{
		info_DEPTNO=GetB(info.getString(1));
		info_NAME=GetB(info.getString(2));
		info_RES_NO=GetB(info.getString(3));
	}

	//ResultSet info 객체의 필드 값 초기화 함수
	private void setFieldInitFrominfo(){
		info_DEPTNO="";
		info_NAME="";
		info_RES_NO="";
	}

	//ResultSet L 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL() throws Exception{
		L_EDU_TIME=GetB(L.getString(1));
		L_GRCODENM=GetB(L.getString(2));
		L_TTIME=L.getDouble(3);
		L_LECNM=GetB(L.getString(4));
	}

	//ResultSet L 객체의 필드 값 초기화 함수
	private void setFieldInitFromL(){
		L_EDU_TIME="";
		L_GRCODENM="";
		L_TTIME=0;
		L_LECNM="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="출  강  확  인  서";
		sheet10_B3="성            명 : ";
		sheet10_B4="소속 및 직책  :";
		sheet10_B5="주민등록번호 : ";
		sheet10_B8="위 사람은 인천광역시 인재개발원의 교육과정에 아래와 같이";
		sheet10_B9="출강한 사실이 있음을 확인합니다.";
		sheet10_A24="" + toDate() + "";
		sheet10_A26="인천광역시인재개발원장";
		sheet20_A2="기간";
		sheet20_D2="과정명";
		sheet20_E2="강의시간";
		sheet20_F2="강의과목";
		sheet20_G2="비고";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
