<%
/* ### Generated by AIDesigner 3.7.1.22 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_A4;
	String sheet10_A5;
	String sheet10_B5;
	String sheet10_A6;
	String sheet10_A7;
	String sheet10_B7;
	String sheet10_A8;
	String sheet10_A9;
	String sheet10_B9;
	String sheet10_A10;
	String sheet10_A11;
	String sheet10_B11;
	String sheet10_A13;
	String sheet10_B15;
	String sheet10_C15;
	String sheet10_D15;
	String sheet10_E15;
	String sheet10_H15;
	String sheet10_E16;
	String sheet10_F16;
	String sheet10_G16;
	String sheet10_B17;
	String sheet10_C17;
	String sheet10_D17;
	String sheet10_E17;
	String sheet10_F17;
	String sheet10_G17;
	String sheet10_H17;
	String sheet10_B18;
	String sheet10_C18;
	String sheet10_D18;
	String sheet10_E18;
	String sheet10_F18;
	String sheet10_G18;
	String sheet10_H18;
	String sheet20_B1;
	String sheet20_C1;
	String sheet20_D1;
	String sheet20_G1;
	String sheet20_D2;
	String sheet20_E2;
	String sheet20_F2;
	String sheet20_B3;
	double sheet20_D3;
	double sheet20_E3;
	double sheet20_F3;
	String sheet20_C4;
	double sheet20_D4;
	double sheet20_E4;
	double sheet20_F4;
	int[] nAutoHeight_detail=new int[1];
	String sheet20_B5_Buf;
	int sheet20_B5_YPos;
	boolean sheet20_B5_Flag;
	String sheet20_B5;
	String sheet20_C5;
	double sheet20_D5;
	double sheet20_E5;
	double sheet20_F5;
	String sheet20_G5;
	boolean bEnabledVirtualMerge_detail;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_totSum;		//ResultSet totSum 객체를 생성하기 위한 Statement 객체
	private ResultSet totSum;		//ResultSet totSum 객체
	private java.sql.Statement stat_detail;		//ResultSet detail 객체를 생성하기 위한 Statement 객체
	private ResultSet detail;		//ResultSet detail 객체
	private java.sql.Statement stat_master;		//ResultSet master 객체를 생성하기 위한 Statement 객체
	private ResultSet master;		//ResultSet master 객체
	private java.sql.Statement stat_info;		//ResultSet info 객체를 생성하기 위한 Statement 객체
	private ResultSet info;		//ResultSet info 객체
	private java.sql.Statement stat_grcodenm;		//ResultSet grcodenm 객체를 생성하기 위한 Statement 객체
	private ResultSet grcodenm;		//ResultSet grcodenm 객체

	//-----SQL 변수 선언-----
	private String sql_totSum;		//ResultSet totSum 객체를 생성하기 위한 쿼리문 저장
	private String sql_detail;		//ResultSet detail 객체를 생성하기 위한 쿼리문 저장
	private String sql_master;		//ResultSet master 객체를 생성하기 위한 쿼리문 저장
	private String sql_info;		//ResultSet info 객체를 생성하기 위한 쿼리문 저장
	private String sql_grcodenm;		//ResultSet grcodenm 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet totSum 객체에서 필드 값을 받는 쿼리 필드 변수
	private double totSum_TOT_TITLE1_SUB1;
	private double totSum_TOT_TITLE1_SUB2;
	private double totSum_TOT_TITLE1_SUB3;

	//ResultSet detail 객체에서 필드 값을 받는 쿼리 필드 변수
	private String detail_GRCODE;
	private String detail_YEAR;
	private String detail_GUBUN;
	private double detail_ANNAE_SEQ;
	private String detail_ANNAE_TITLE;
	private double detail_TITLE1_SUB1;
	private double detail_TITLE1_SUB2;
	private double detail_TITLE1_SUB3;
	private String detail_TITLE1_SUB4;

	//ResultSet master 객체에서 필드 값을 받는 쿼리 필드 변수
	private String master_ANNAE_GUBUN;
	private double master_TOT_TITLE1_SUB1;
	private double master_TOT_TITLE1_SUB2;
	private double master_TOT_TITLE1_SUB3;
	private String master_GUBUN;

	//ResultSet info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String info_GRCODE;
	private String info_YEAR;
	private String info_GOAL;
	private String info_TARGET;
	private String info_INWON;
	private String info_GIGAN;
	private String info_SIGANGE;
	private String info_SIBUNYA;
	private String info_SISOGE;
	private String info_SICOMMON;
	private String info_SIJUNMUN;
	private String info_SIETC;
	private String info_RATEGANGE;
	private String info_RATEBUNYA;
	private String info_RATESOGE;
	private String info_RATECOMMON;
	private String info_RATEJUNMUN;
	private String info_RATEETC;
	private String info_YUNYOUNG;

	//ResultSet grcodenm 객체에서 필드 값을 받는 쿼리 필드 변수
	private String grcodenm_GRCODENM;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_year_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(grcodenm!=null) grcodenm.close();
				if(stat_grcodenm!=null) stat_grcodenm.close();
				if(info!=null) info.close();
				if(stat_info!=null) stat_info.close();
				if(master!=null) master.close();
				if(stat_master!=null) stat_master.close();
				if(stat_detail!=null) stat_detail.close();
				if(totSum!=null) totSum.close();
				if(stat_totSum!=null) stat_totSum.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 41, 546, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromv_goal(true, true);    //Void 밴드 호출
		getScriptFrominfo_goal(true);    //반복 밴드 호출
		getScriptFromv_target(true, true);    //Void 밴드 호출
		getScriptFrominfo_target(true);    //반복 밴드 호출
		getScriptFromv_inwon(true, true);    //Void 밴드 호출
		getScriptFrominfo_inwon(true);    //반복 밴드 호출
		getScriptFromv_gigan(true, true);    //Void 밴드 호출
		getScriptFrominfo_gigan(true);    //반복 밴드 호출
		getScriptFromv_yunyoung(true, true);    //Void 밴드 호출
		getScriptFrominfo_yunyoung(true);    //반복 밴드 호출
		getScriptFromv_euc(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(41, 41, 546, 801, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrommaster(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----v_goal VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_goal
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_goal(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=53;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet grcodenm 객체의 생성
			if(grcodenm==null){
				grcodenm = stat_grcodenm.executeQuery(sql_grcodenm);
			}else{
				grcodenm.beforeFirst();
			}

			//데이터 fetch
			if(grcodenm.next()){
				setFieldVariableFromgrcodenm();	//ResultSet grcodenm에서 필드 값 설정
			}else{
				setFieldInitFromgrcodenm();	//ResultSet grcodenm의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";

			//데이터 변수 할당
			sheet10_A1=grcodenm_GRCODENM;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_goal();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info_goal RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : info_goal
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo_goal(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B3="";

		//DataSet 객체 생성
		//ResultSet info 객체의 생성
		if(info==null){
			info = stat_info.executeQuery(sql_info);
		}else{
			info.beforeFirst();
		}

		while(info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrominfo();	//RecordSet info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B3=info_GOAL;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo_goal();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----v_target VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_target
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_target(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_target();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info_target RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : info_target
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo_target(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B5="";

		//DataSet 객체 생성
		//ResultSet info 객체의 생성
		if(info==null){
			info = stat_info.executeQuery(sql_info);
		}else{
			info.beforeFirst();
		}

		while(info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrominfo();	//RecordSet info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B5=info_TARGET;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo_target();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----v_inwon VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_inwon
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_inwon(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_inwon();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info_inwon RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : info_inwon
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo_inwon(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B7="";

		//DataSet 객체 생성
		//ResultSet info 객체의 생성
		if(info==null){
			info = stat_info.executeQuery(sql_info);
		}else{
			info.beforeFirst();
		}

		while(info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrominfo();	//RecordSet info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B7=info_INWON;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo_inwon();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----v_gigan VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_gigan
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_gigan(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_gigan();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info_gigan RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : info_gigan
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo_gigan(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B9="";

		//DataSet 객체 생성
		//ResultSet info 객체의 생성
		if(info==null){
			info = stat_info.executeQuery(sql_info);
		}else{
			info.beforeFirst();
		}

		while(info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrominfo();	//RecordSet info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B9=info_GIGAN;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo_gigan();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----v_yunyoung VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_yunyoung
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_yunyoung(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_yunyoung();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info_yunyoung RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : info_yunyoung
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo_yunyoung(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B11="";

		//DataSet 객체 생성
		//ResultSet info 객체의 생성
		if(info==null){
			info = stat_info.executeQuery(sql_info);
		}else{
			info.beforeFirst();
		}

		while(info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrominfo();	//RecordSet info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B11=info_YUNYOUNG;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo_yunyoung();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----v_euc VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v_euc
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv_euc(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=152;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet info 객체의 생성
			if(info==null){
				info = stat_info.executeQuery(sql_info);
			}else{
				info.beforeFirst();
			}

			//데이터 fetch
			if(info.next()){
				setFieldVariableFrominfo();	//ResultSet info에서 필드 값 설정
			}else{
				setFieldInitFrominfo();	//ResultSet info의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C17="";
			sheet10_D17="";
			sheet10_E17="";
			sheet10_F17="";
			sheet10_G17="";
			sheet10_H17="";
			sheet10_C18="";
			sheet10_D18="";
			sheet10_E18="";
			sheet10_F18="";
			sheet10_G18="";
			sheet10_H18="";

			//데이터 변수 할당
			sheet10_C17=info_SIGANGE;
			sheet10_D17=info_SIBUNYA;
			sheet10_E17=info_SISOGE;
			sheet10_F17=info_SICOMMON;
			sheet10_G17=info_SIJUNMUN;
			sheet10_H17=info_SIETC;
			sheet10_C18=info_RATEGANGE;
			sheet10_D18=info_RATEBUNYA;
			sheet10_E18=info_RATESOGE;
			sheet10_F18=info_RATECOMMON;
			sheet10_G18=info_RATEJUNMUN;
			sheet10_H18=info_RATEETC;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv_euc();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=60;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet totSum 객체의 생성
			if(totSum==null){
				totSum = stat_totSum.executeQuery(sql_totSum);
			}else{
				totSum.beforeFirst();
			}

			//데이터 fetch
			if(totSum.next()){
				setFieldVariableFromtotSum();	//ResultSet totSum에서 필드 값 설정
			}else{
				setFieldInitFromtotSum();	//ResultSet totSum의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_D3=0;
			sheet20_E3=0;
			sheet20_F3=0;

			//데이터 변수 할당
			sheet20_D3=totSum_TOT_TITLE1_SUB1;
			sheet20_E3=totSum_TOT_TITLE1_SUB2;
			sheet20_F3=totSum_TOT_TITLE1_SUB3;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----detail RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : detail
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromdetail(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움체
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};

		//데이터 변수 초기화
		sheet20_B5_Buf="";
		sheet20_B5_Flag=true;
		sheet20_B5="";
		sheet20_C5="";
		sheet20_D5=0;
		sheet20_E5=0;
		sheet20_F5=0;
		sheet20_G5="";
		bEnabledVirtualMerge_detail=false;

		//DataSet 객체 생성
		//ResultSet detail 객체의 생성
		initSQLdetailVarient();
		detail = stat_detail.executeQuery(sql_detail);

		while(detail.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdetail();	//RecordSet detail에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			if(!sheet20_B5.equals(detail_GUBUN)){
				if(!bIsFirst){
					sheet20_B5_Buf=sheet20_B5;
					sheet20_B5_Flag=true;
				}
				sheet20_B5=detail_GUBUN;
			}
			sheet20_C5=detail_ANNAE_TITLE;
			sheet20_D5=detail_TITLE1_SUB1;
			sheet20_E5=detail_TITLE1_SUB2;
			sheet20_F5=detail_TITLE1_SUB3;
			sheet20_G5=detail_TITLE1_SUB4;

			//루프 내부 가상병합 출력 함수 호출
			if(bIsPrint){
				writeScriptVirtualMergedetail();
			}

			//Auto Size Code
			nAutoHeight_detail[0]=0;
			nAutoHeight_detail[0]=getPrintHeight(sheet20_G5, charWidth, 10, 62, 20, nAutoHeight_detail[0]);
			nAutoHeight_detail[0]=nAutoHeight_detail[0]+20;
			nBandHeight=nAutoHeight_detail[0];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//가상병합 출력 및 한번만 데이터 Reset
					pageSkipVirtualMergedetail();

					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptdetail();

				//페이지 연결 출력 및 가상병합 플래그 Reset
				if(sheet20_B5_Flag){
					sheet20_B5_YPos=nYCurPos;
					sheet20_B5_Buf="";
					sheet20_B5_Flag=false;
				}
				bEnabledVirtualMerge_detail=true;

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 가상병합 출력 함수 호출
		sheet20_B5_Buf=sheet20_B5;
		if(bIsPrint){
			writeScriptVirtualMergedetail();
		}

		//DataSet Close
		if(detail!=null) detail.close();
	}

	//----detail 반복밴드 Page Skip시 가상 병합 데이터 설정 및 출력 함수----
	private void pageSkipVirtualMergedetail( ) throws Exception{
		//가상 병합 데이터 설정 및 출력
		if(bEnabledVirtualMerge_detail){
			if(sheet20_B5_Buf.equals(isEmpty)){
				sheet20_B5_Buf=sheet20_B5;
			}else{
				sheet20_B5_Buf="";
			}
			sheet20_B5_Flag=true;
			writeScriptVirtualMergedetail();
		}
	}

	//-----master RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : master
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrommaster(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet20_D4=0;
		sheet20_E4=0;
		sheet20_F4=0;

		//DataSet 객체 생성
		//ResultSet master 객체의 생성
		if(master==null){
			master = stat_master.executeQuery(sql_master);
		}else{
			master.beforeFirst();
		}

		while(master.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrommaster();	//RecordSet master에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_D4=master_TOT_TITLE1_SUB1;
			sheet20_E4=master_TOT_TITLE1_SUB2;
			sheet20_F4=master_TOT_TITLE1_SUB3;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptmaster();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//루프 내부 자식 밴드 호출
			getScriptFromdetail(true);

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----v_goal 스크립트 문 출력 함수----
	private void writeScriptv_goal( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",505,0,14,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,28,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+28)+",505,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,25,2)");
		out.println(sheet10_A2+"\r");
	}

	//----info_goal 스크립트 문 출력 함수----
	private void writeScriptinfo_goal( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",20,2,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",485,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
	}

	//----v_target 스크립트 문 출력 함수----
	private void writeScriptv_target( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,25,2)");
		out.println(sheet10_A4+"\r");
	}

	//----info_target 스크립트 문 출력 함수----
	private void writeScriptinfo_target( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",20,2,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",485,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
	}

	//----v_inwon 스크립트 문 출력 함수----
	private void writeScriptv_inwon( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,25,2)");
		out.println(sheet10_A6+"\r");
	}

	//----info_inwon 스크립트 문 출력 함수----
	private void writeScriptinfo_inwon( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",20,2,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",485,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B7+"\r");
	}

	//----v_gigan 스크립트 문 출력 함수----
	private void writeScriptv_gigan( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,25,2)");
		out.println(sheet10_A8+"\r");
	}

	//----info_gigan 스크립트 문 출력 함수----
	private void writeScriptinfo_gigan( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",20,2,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A9+"\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",485,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
	}

	//----v_yunyoung 스크립트 문 출력 함수----
	private void writeScriptv_yunyoung( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,25,2)");
		out.println(sheet10_A10+"\r");
	}

	//----info_yunyoung 스크립트 문 출력 함수----
	private void writeScriptinfo_yunyoung( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",20,2,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",485,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
	}

	//----v_euc 스크립트 문 출력 함수----
	private void writeScriptv_euc( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",135,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,23,1)");
		out.println(sheet10_A13+"\r");
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos+52)+",41,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+52)+",41,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+52)+",41,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+52)+",41,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+52)+",41,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+52)+",41,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet10_B15+"\r");
		out.println("^CELLBG("+(nXCurPos+61)+","+(nYCurPos+52)+",74,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+61)+","+(nYCurPos+52)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet10_C15+"\r");
		out.println("^CELLBG("+(nXCurPos+135)+","+(nYCurPos+52)+",74,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+52)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet10_D15+"\r");
		out.println("^CELLBG("+(nXCurPos+209)+","+(nYCurPos+52)+",222,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+52)+",222,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+52)+",222,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+52)+",222,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+52)+",222,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+209)+","+(nYCurPos+52)+",222,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E15+"\r");
		out.println("^CELLBG("+(nXCurPos+431)+","+(nYCurPos+52)+",74,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+52)+",74,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+431)+","+(nYCurPos+52)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet10_H15+"\r");
		out.println("^CELLBG("+(nXCurPos+209)+","+(nYCurPos+72)+",74,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+209)+","+(nYCurPos+72)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E16+"\r");
		out.println("^CELLBG("+(nXCurPos+283)+","+(nYCurPos+72)+",74,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+283)+","+(nYCurPos+72)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F16+"\r");
		out.println("^CELLBG("+(nXCurPos+357)+","+(nYCurPos+72)+",74,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+72)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+357)+","+(nYCurPos+72)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G16+"\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+92)+",41,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+92)+",41,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+92)+",41,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+92)+",41,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+92)+",41,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B17+"\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+61)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C17+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D17+"\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+209)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E17+"\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+283)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F17+"\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+357)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G17+"\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+92)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+431)+","+(nYCurPos+92)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H17+"\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+112)+",41,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+112)+",41,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+112)+",41,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+112)+",41,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+112)+",41,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B18+"\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+61)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+61)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C18+"\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+135)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+135)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D18+"\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+209)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+209)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E18+"\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+283)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+283)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F18+"\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+357)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G18+"\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+431)+","+(nYCurPos+112)+",74,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+431)+","+(nYCurPos+112)+",74,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H18+"\r");
	}

	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos)+",112,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",112,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet20_B1+"\r");
		out.println("^CELLBG("+(nXCurPos+132)+","+(nYCurPos)+",112,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+132)+","+(nYCurPos)+",112,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet20_C1+"\r");
		out.println("^CELLBG("+(nXCurPos+244)+","+(nYCurPos)+",198,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",198,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",198,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",198,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",198,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+244)+","+(nYCurPos)+",198,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D1+"\r");
		out.println("^CELLBG("+(nXCurPos+442)+","+(nYCurPos)+",62,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+442)+","+(nYCurPos)+",62,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,40,1)");
		out.println(sheet20_G1+"\r");
		out.println("^CELLBG("+(nXCurPos+244)+","+(nYCurPos+20)+",66,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+244)+","+(nYCurPos+20)+",66,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D2+"\r");
		out.println("^CELLBG("+(nXCurPos+310)+","+(nYCurPos+20)+",66,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+310)+","+(nYCurPos+20)+",66,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E2+"\r");
		out.println("^CELLBG("+(nXCurPos+376)+","+(nYCurPos+20)+",66,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+20)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+376)+","+(nYCurPos+20)+",66,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F2+"\r");
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos+40)+",224,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+40)+",224,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+40)+",224,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+40)+",224,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+40)+",224,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+40)+",224,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+244)+","+(nYCurPos+40)+",66,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+244)+","+(nYCurPos+40)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+310)+","+(nYCurPos+40)+",66,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+310)+","+(nYCurPos+40)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+376)+","+(nYCurPos+40)+",66,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos+40)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+376)+","+(nYCurPos+40)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+442)+","+(nYCurPos+40)+",62,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos+40)+",62,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos+40)+",62,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos+40)+",62,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos+40)+",62,20,0,RGB[0,0,0],3)\r");
	}

	//----detail 스크립트 문 출력 함수----
	private void writeScriptdetail( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+132)+","+(nYCurPos)+",112,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_detail[0])+",1)");
		out.println(sheet20_C5+"\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+244)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_detail[0])+",1)");
		out.println(sheet20_D5+"\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+310)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_detail[0])+",1)");
		out.println(sheet20_E5+"\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+376)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_detail[0])+",1)");
		out.println(sheet20_F5+"\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,"+(nAutoHeight_detail[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+442)+","+(nYCurPos)+",62,0,10,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_detail[0])+",1)");
		out.println(sheet20_G5+"\r");
	}

	//----detail VirtualMerge 스크립트 문 출력 함수----
	private void writeScriptVirtualMergedetail( ) throws Exception{
		//가상병합 스크립트문 생성
		if(!sheet20_B5_Buf.equals(isEmpty)){
			out.println("^CELLLINE("+(nXCurPos+20)+","+(sheet20_B5_YPos)+",112,"+(nYCurPos-sheet20_B5_YPos)+",0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos+20)+","+(sheet20_B5_YPos)+",112,"+(nYCurPos-sheet20_B5_YPos)+",0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos+20)+","+(sheet20_B5_YPos)+",112,"+(nYCurPos-sheet20_B5_YPos)+",0,RGB[0,0,0],3)\r");
			out.print("^PRINT("+(nXCurPos+20)+","+(sheet20_B5_YPos)+",112,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,"+(nYCurPos-sheet20_B5_YPos)+",0)");
			out.println(sheet20_B5_Buf+"\r");
		}
	}

	//----master 스크립트 문 출력 함수----
	private void writeScriptmaster( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",112,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+132)+","+(nYCurPos)+",112,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+132)+","+(nYCurPos)+",112,1,10,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet20_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+244)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+244)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+310)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+310)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+376)+","+(nYCurPos)+",66,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+376)+","+(nYCurPos)+",66,1,10,1/1/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+442)+","+(nYCurPos)+",62,20,0,RGB[0,0,0],3)\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_year_Param=toKor(GetB(request.getParameter("p_year")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_totSum=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_detail=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_master=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_grcodenm=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_totSum = "SELECT SUM(TITLE1_SUB1) AS TOT_TITLE1_SUB1 ";
		sql_totSum = sql_totSum + "     , SUM(TITLE1_SUB2) AS TOT_TITLE1_SUB2 ";
		sql_totSum = sql_totSum + "     , SUM(TITLE1_SUB3) AS TOT_TITLE1_SUB3 ";
		sql_totSum = sql_totSum + "  FROM ( ";
		sql_totSum = sql_totSum + "SELECT GRCODE ";
		sql_totSum = sql_totSum + "     , YEAR ";
		sql_totSum = sql_totSum + "     , DECODE(ANNAE_GUBUN,1,'소양분야',2,'직무분야',3,'행정기타') AS GUBUN ";
		sql_totSum = sql_totSum + "     , ANNAE_SEQ ";
		sql_totSum = sql_totSum + "     , ANNAE_TITLE ";
		sql_totSum = sql_totSum + "     , TITLE1_SUB1 ";
		sql_totSum = sql_totSum + "     , TITLE1_SUB2 ";
		sql_totSum = sql_totSum + "     , TITLE1_SUB3 ";
		sql_totSum = sql_totSum + "     , TITLE1_SUB4 ";
		sql_totSum = sql_totSum + "     , GRCODE, YEAR ";
		sql_totSum = sql_totSum + "  FROM TB_GRANNAE2 ";
		sql_totSum = sql_totSum + " WHERE YEAR = '" + p_year_Param + "' ";
		sql_totSum = sql_totSum + " AND GRCODE = '" + p_grcode_Param + "' ";
		sql_totSum = sql_totSum + "ORDER BY ANNAE_GUBUN, ANNAE_SEQ )";
		sql_master = "SELECT ANNAE_GUBUN ";
		sql_master = sql_master + "     , SUM(TITLE1_SUB1) AS TOT_TITLE1_SUB1 ";
		sql_master = sql_master + "     , SUM(TITLE1_SUB2) AS TOT_TITLE1_SUB2 ";
		sql_master = sql_master + "     , SUM(TITLE1_SUB3) AS TOT_TITLE1_SUB3 ";
		sql_master = sql_master + "     , DECODE(ANNAE_GUBUN,1,'소양분야',2,'직무분야',3,'행정기타') AS GUBUN ";
		sql_master = sql_master + "  FROM ( ";
		sql_master = sql_master + "SELECT GRCODE ";
		sql_master = sql_master + "     , YEAR ";
		sql_master = sql_master + "     , DECODE(ANNAE_GUBUN,1,'소양분야',2,'직무분야',3,'행정기타') AS GUBUN ";
		sql_master = sql_master + "     , ANNAE_SEQ ";
		sql_master = sql_master + "     , ANNAE_TITLE ";
		sql_master = sql_master + "     , TITLE1_SUB1 ";
		sql_master = sql_master + "     , TITLE1_SUB2 ";
		sql_master = sql_master + "     , TITLE1_SUB3 ";
		sql_master = sql_master + "     , TITLE1_SUB4 ";
		sql_master = sql_master + "     , ANNAE_GUBUN ";
		sql_master = sql_master + "  FROM TB_GRANNAE2 ";
		sql_master = sql_master + " WHERE YEAR = '" + p_year_Param + "' ";
		sql_master = sql_master + " AND GRCODE = '" + p_grcode_Param + "' ";
		sql_master = sql_master + "ORDER BY ANNAE_GUBUN, ANNAE_SEQ )  ";
		sql_master = sql_master + "GROUP BY ANNAE_GUBUN";
		sql_info = "SELECT GRCODE, YEAR, GOAL, TARGET, INWON, GIGAN, SIGANGE, SIBUNYA, SISOGE, SICOMMON, SIJUNMUN, SIETC, RATEGANGE, RATEBUNYA, RATESOGE, RATECOMMON, RATEJUNMUN, RATEETC, YUNYOUNG  ";
		sql_info = sql_info + "FROM TB_GRANNAE WHERE GRCODE = '" + p_grcode_Param + "' AND YEAR = '" + p_year_Param + "'";
		sql_grcodenm = "select distinct grcodenm from tb_grcode where grcode = '" + p_grcode_Param + "'";
	}

	private void initSQLdetailVarient(){
		sql_detail = "SELECT GRCODE ";
		sql_detail = sql_detail + "     , YEAR ";
		sql_detail = sql_detail + "     , DECODE(ANNAE_GUBUN,1,'소양분야',2,'직무분야',3,'행정기타') AS GUBUN ";
		sql_detail = sql_detail + "     , ANNAE_SEQ ";
		sql_detail = sql_detail + "     , ANNAE_TITLE ";
		sql_detail = sql_detail + "     , TITLE1_SUB1 ";
		sql_detail = sql_detail + "     , TITLE1_SUB2 ";
		sql_detail = sql_detail + "     , TITLE1_SUB3 ";
		sql_detail = sql_detail + "     , TITLE1_SUB4 ";
		sql_detail = sql_detail + "  FROM TB_GRANNAE2 ";
		sql_detail = sql_detail + " WHERE YEAR = '" + p_year_Param + "' ";
		sql_detail = sql_detail + " AND GRCODE = '" + p_grcode_Param + "' ";
		sql_detail = sql_detail + " AND ANNAE_GUBUN = '" + master_ANNAE_GUBUN + "' ";
		sql_detail = sql_detail + "ORDER BY ANNAE_GUBUN, ANNAE_SEQ";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet totSum 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtotSum() throws Exception{
		totSum_TOT_TITLE1_SUB1=totSum.getDouble(1);
		totSum_TOT_TITLE1_SUB2=totSum.getDouble(2);
		totSum_TOT_TITLE1_SUB3=totSum.getDouble(3);
	}

	//ResultSet totSum 객체의 필드 값 초기화 함수
	private void setFieldInitFromtotSum(){
		totSum_TOT_TITLE1_SUB1=0;
		totSum_TOT_TITLE1_SUB2=0;
		totSum_TOT_TITLE1_SUB3=0;
	}

	//ResultSet detail 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdetail() throws Exception{
		detail_GRCODE=GetB(detail.getString(1));
		detail_YEAR=GetB(detail.getString(2));
		detail_GUBUN=GetB(detail.getString(3));
		detail_ANNAE_SEQ=detail.getDouble(4);
		detail_ANNAE_TITLE=GetB(detail.getString(5));
		detail_TITLE1_SUB1=detail.getDouble(6);
		detail_TITLE1_SUB2=detail.getDouble(7);
		detail_TITLE1_SUB3=detail.getDouble(8);
		detail_TITLE1_SUB4=GetB(detail.getString(9));
	}

	//ResultSet detail 객체의 필드 값 초기화 함수
	private void setFieldInitFromdetail(){
		detail_GRCODE="";
		detail_YEAR="";
		detail_GUBUN="";
		detail_ANNAE_SEQ=0;
		detail_ANNAE_TITLE="";
		detail_TITLE1_SUB1=0;
		detail_TITLE1_SUB2=0;
		detail_TITLE1_SUB3=0;
		detail_TITLE1_SUB4="";
	}

	//ResultSet master 객체에서 필드 값 설정 함수
	private void setFieldVariableFrommaster() throws Exception{
		master_ANNAE_GUBUN=GetB(master.getString(1));
		master_TOT_TITLE1_SUB1=master.getDouble(2);
		master_TOT_TITLE1_SUB2=master.getDouble(3);
		master_TOT_TITLE1_SUB3=master.getDouble(4);
		master_GUBUN=GetB(master.getString(5));
	}

	//ResultSet master 객체의 필드 값 초기화 함수
	private void setFieldInitFrommaster(){
		master_ANNAE_GUBUN="";
		master_TOT_TITLE1_SUB1=0;
		master_TOT_TITLE1_SUB2=0;
		master_TOT_TITLE1_SUB3=0;
		master_GUBUN="";
	}

	//ResultSet info 객체에서 필드 값 설정 함수
	private void setFieldVariableFrominfo() throws Exception{
		info_GRCODE=GetB(info.getString(1));
		info_YEAR=GetB(info.getString(2));
		info_GOAL=GetB(info.getString(3));
		info_TARGET=GetB(info.getString(4));
		info_INWON=GetB(info.getString(5));
		info_GIGAN=GetB(info.getString(6));
		info_SIGANGE=GetB(info.getString(7));
		info_SIBUNYA=GetB(info.getString(8));
		info_SISOGE=GetB(info.getString(9));
		info_SICOMMON=GetB(info.getString(10));
		info_SIJUNMUN=GetB(info.getString(11));
		info_SIETC=GetB(info.getString(12));
		info_RATEGANGE=GetB(info.getString(13));
		info_RATEBUNYA=GetB(info.getString(14));
		info_RATESOGE=GetB(info.getString(15));
		info_RATECOMMON=GetB(info.getString(16));
		info_RATEJUNMUN=GetB(info.getString(17));
		info_RATEETC=GetB(info.getString(18));
		info_YUNYOUNG=GetB(info.getString(19));
	}

	//ResultSet info 객체의 필드 값 초기화 함수
	private void setFieldInitFrominfo(){
		info_GRCODE="";
		info_YEAR="";
		info_GOAL="";
		info_TARGET="";
		info_INWON="";
		info_GIGAN="";
		info_SIGANGE="";
		info_SIBUNYA="";
		info_SISOGE="";
		info_SICOMMON="";
		info_SIJUNMUN="";
		info_SIETC="";
		info_RATEGANGE="";
		info_RATEBUNYA="";
		info_RATESOGE="";
		info_RATECOMMON="";
		info_RATEJUNMUN="";
		info_RATEETC="";
		info_YUNYOUNG="";
	}

	//ResultSet grcodenm 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgrcodenm() throws Exception{
		grcodenm_GRCODENM=GetB(grcodenm.getString(1));
	}

	//ResultSet grcodenm 객체의 필드 값 초기화 함수
	private void setFieldInitFromgrcodenm(){
		grcodenm_GRCODENM="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A2="□ 교육목표";
		sheet10_A3="◎";
		sheet10_A4="□ 교육대상";
		sheet10_A5="◎";
		sheet10_A6="□ 교육인원";
		sheet10_A7="◎";
		sheet10_A8="□ 교육일정";
		sheet10_A9="◎";
		sheet10_A10="□ 교육운영";
		sheet10_A11="◎";
		sheet10_A13="□ 교육편성";
		sheet10_B15="구분";
		sheet10_C15="계";
		sheet10_D15="소양분야";
		sheet10_E15="직무분야";
		sheet10_H15="행정 및 기타";
		sheet10_E16="소 계";
		sheet10_F16="직 무 공 통";
		sheet10_G16="직 무 전 문";
		sheet10_B17="시간";
		sheet10_B18="비율";
		sheet20_B1="구분";
		sheet20_C1="과목";
		sheet20_D1="강사";
		sheet20_G1="비고";
		sheet20_D2="계";
		sheet20_E2="강의";
		sheet20_F2="참여식";
		sheet20_B3="합계";
		sheet20_C4="소계";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
