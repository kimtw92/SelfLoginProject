<%
/* ### Generated by AIDesigner 3.7.1.22 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*,java.util.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_A8;
	int[] nAutoHeight_list=new int[1];
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_C3;
	String sheet10_E3;
	String sheet10_F3;
	String sheet10_J3;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_F4;
	String sheet10_G4;
	String sheet10_H4;
	String sheet10_I4;
	String sheet10_A5;
	double sheet10_C5;
	double sheet10_D5;
	double sheet10_E5;
	double sheet10_F5;
	double sheet10_G5;
	double sheet10_H5;
	double sheet10_I5;
	double sheet10_J5;
	String sheet10_A6_Buf;
	String sheet10_A6;
	String sheet10_B6;
	double sheet10_C6;
	double sheet10_D6;
	double sheet10_E6;
	double sheet10_F6;
	double sheet10_G6;
	double sheet10_H6;
	double sheet10_I6;
	double sheet10_J6;
	String sheet10_A7;
	double sheet10_C7;
	double sheet10_D7;
	double sheet10_E7;
	double sheet10_F7;
	long sheet10_G7;
	double sheet10_H7;
	double sheet10_I7;
	double sheet10_J7;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_tot_sum;		//ResultSet tot_sum 객체를 생성하기 위한 Statement 객체
	private ResultSet tot_sum;		//ResultSet tot_sum 객체
	private java.sql.Statement stat_list;		//ResultSet list 객체를 생성하기 위한 Statement 객체
	private ResultSet list;		//ResultSet list 객체

	//-----SQL 변수 선언-----
	private String sql_tot_sum;		//ResultSet tot_sum 객체를 생성하기 위한 쿼리문 저장
	private String sql_list;		//ResultSet list 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet tot_sum 객체에서 필드 값을 받는 쿼리 필드 변수
	private double tot_sum_TOT_GRSEQ_CNT;
	private double tot_sum_TOT_TSEAT;
	private double tot_sum_TOT_CANCEL_CNT;
	private double tot_sum_TOT_GRSEQ_RESUCNT;
	private double tot_sum_TOT_MAN_RESUCNT;
	private double tot_sum_TOT_WO_RESUCNT;
	private double tot_sum_TOT_TOTNO;
	private double tot_sum_AVG_PER_CNT;

	//ResultSet list 객체에서 필드 값을 받는 쿼리 필드 변수
	private String list_GUBUNNM;
	private String list_GRCODENM;
	private double list_GRSEQ_CNT;
	private double list_TSEAT;
	private double list_CANCEL_CNT;
	private double list_GRSEQ_RESUCNT;
	private double list_MAN_RESUCNT;
	private double list_WO_RESUCNT;
	private double list_TOTNO;
	private double list_PER_CNT;
	private String list_GUBUN;
	private String list_GRCODE;

	//파라미터 변수 선언
	String p_startmonth_Param;
	String p_endmonth_Param;
	String p_dept_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(list!=null) list.close();
				if(stat_list!=null) stat_list.close();
				if(tot_sum!=null) tot_sum.close();
				if(stat_tot_sum!=null) stat_tot_sum.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 104, 555, 781, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle01(true, true);    //머리글 밴드 호출
		getScriptFromfoot01(true, true);    //바닥글 밴드 호출
		getScriptFromlist(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title01 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title01
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_A2="";

			//데이터 변수 할당
			sheet10_A2="기간 : " + p_startmonth_Param.substring(0,4) + "-" + p_startmonth_Param.substring(4,6) + " ~ " + p_endmonth_Param.substring(0,4) + "-" + p_endmonth_Param.substring(4,6) ;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle01();
		}   //end if(bIsPrint)
	}

	//----foot01 FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot01
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot01();
		}   //end if(bIsPrint)
	}

	//----header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=52;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet tot_sum 객체의 생성
			if(tot_sum==null){
				tot_sum = stat_tot_sum.executeQuery(sql_tot_sum);
			}else{
				tot_sum.beforeFirst();
			}

			//데이터 fetch
			if(tot_sum.next()){
				setFieldVariableFromtot_sum();	//ResultSet tot_sum에서 필드 값 설정
			}else{
				setFieldInitFromtot_sum();	//ResultSet tot_sum의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C5=0;
			sheet10_D5=0;
			sheet10_E5=0;
			sheet10_F5=0;
			sheet10_G5=0;
			sheet10_H5=0;
			sheet10_I5=0;
			sheet10_J5=0;

			//데이터 변수 할당
			sheet10_C5=tot_sum_TOT_GRSEQ_CNT;
			sheet10_D5=tot_sum_TOT_TSEAT;
			sheet10_E5=tot_sum_TOT_CANCEL_CNT;
			sheet10_F5=tot_sum_TOT_GRSEQ_RESUCNT;
			sheet10_G5=tot_sum_TOT_MAN_RESUCNT;
			sheet10_H5=tot_sum_TOT_WO_RESUCNT;
			sheet10_I5=tot_sum_TOT_TOTNO;
			sheet10_J5=tot_sum_AVG_PER_CNT;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----con ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : con
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromcon(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_C7=0;
			sheet10_D7=0;
			sheet10_E7=0;
			sheet10_F7=0;
			sheet10_G7=0L;
			sheet10_H7=0;
			sheet10_I7=0;
			sheet10_J7=0;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					sheet10_A6_Buf=list_GUBUNNM;
					pageSkip(10);
					getScriptFromheader(false, true);	//반복 헤더 호출
				}
				writeScriptcon();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet10_C7=0;
				sheet10_D7=0;
				sheet10_E7=0;
				sheet10_F7=0;
				sheet10_G7=0L;
				sheet10_H7=0;
				sheet10_I7=0;
				sheet10_J7=0;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_C7=SUM(sheet10_C6, sheet10_C7);
			sheet10_D7=SUM(sheet10_D6, sheet10_D7);
			sheet10_E7=SUM(sheet10_E6, sheet10_E7);
			sheet10_F7=SUM(sheet10_F6, sheet10_F7);
			sheet10_G7=(long)SUM(sheet10_G6, sheet10_G7);
			sheet10_H7=SUM(sheet10_H6, sheet10_H7);
			sheet10_I7=SUM(sheet10_I6, sheet10_I7);
			sheet10_J7=SUM(sheet10_J6, sheet10_J7);
		}   //end if(!bIsLast)
	}

	//-----list RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : list
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움체
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};
		boolean bIsTrue_con=false;   //con 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A6_Buf="";
		sheet10_A6="";
		sheet10_B6="";
		sheet10_C6=0;
		sheet10_D6=0;
		sheet10_E6=0;
		sheet10_F6=0;
		sheet10_G6=0;
		sheet10_H6=0;
		sheet10_I6=0;
		sheet10_J6=0;

		//DataSet 객체 생성
		//ResultSet list 객체의 생성
		if(list==null){
			list = stat_list.executeQuery(sql_list);
		}else{
			list.beforeFirst();
		}

		while(list.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromlist();	//RecordSet list에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(!list_GUBUNNM.equals(sheet10_A6)){    //con 밴드 조건문
				bIsTrue_con=true;
			}else{
				bIsTrue_con=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_con=false;    //con 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			if(!sheet10_A6.equals(list_GUBUNNM) || bIsFirst){
				sheet10_A6=list_GUBUNNM;
				sheet10_A6_Buf=list_GUBUNNM;
			}else{
				sheet10_A6_Buf="";
			}
			sheet10_B6=list_GRCODENM;
			sheet10_C6=list_GRSEQ_CNT;
			sheet10_D6=list_TSEAT;
			sheet10_E6=list_CANCEL_CNT;
			sheet10_F6=list_GRSEQ_RESUCNT;
			sheet10_G6=list_MAN_RESUCNT;
			sheet10_H6=list_WO_RESUCNT;
			sheet10_I6=list_TOTNO;
			sheet10_J6=list_PER_CNT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromcon(bIsFirst, false, bIsTrue_con, true);   //con 조건 밴드 호출

			//Auto Size Code
			nAutoHeight_list[0]=0;
			nAutoHeight_list[0]=getPrintHeight(sheet10_B6, charWidth, 10, 100, 20, nAutoHeight_list[0]);
			nAutoHeight_list[0]=nAutoHeight_list[0]+20;
			nBandHeight=nAutoHeight_list[0];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//가상병합 출력 및 한번만 데이터 Reset
					sheet10_A6_Buf=list_GUBUNNM;

					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptlist();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromcon(bIsFirst, true, true, true);   //con 조건 밴드 호출
	}

	//-----스크립트 출력 함수-----
	//----title01 스크립트 문 출력 함수----
	private void writeScripttitle01( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(41,41,512,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT(41,79,512,0,10,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,25,1)");
		out.println(sheet10_A2+"\r");
	}

	//----foot01 스크립트 문 출력 함수----
	private void writeScriptfoot01( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(41,781,512,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
	}

	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",92,32,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,32,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,32,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,32,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,32,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",92,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,32,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLBG("+(nXCurPos+92)+","+(nYCurPos)+",100,32,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,32,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,32,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,32,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,32,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos)+",100,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,32,1)");
		out.println(sheet10_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+192)+","+(nYCurPos)+",80,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",80,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",80,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",80,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",80,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+192)+","+(nYCurPos)+",80,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_C3+"\r");
		out.println("^CELLBG("+(nXCurPos+272)+","+(nYCurPos)+",40,32,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+272)+","+(nYCurPos)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,32,1)");
		out.println(sheet10_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+312)+","+(nYCurPos)+",160,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",160,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",160,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",160,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",160,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos)+",160,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+472)+","+(nYCurPos)+",40,32,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,32,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+472)+","+(nYCurPos)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,32,1)");
		out.println(sheet10_J3+"\r");
		out.println("^CELLBG("+(nXCurPos+192)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+192)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLBG("+(nXCurPos+232)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+232)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLBG("+(nXCurPos+312)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLBG("+(nXCurPos+352)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+352)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_G4+"\r");
		out.println("^CELLBG("+(nXCurPos+392)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+392)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_H4+"\r");
		out.println("^CELLBG("+(nXCurPos+432)+","+(nYCurPos+16)+",40,16,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+16)+",40,16,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos+16)+",40,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,16,1)");
		out.println(sheet10_I4+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+32)+",192,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+32)+",192,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+32)+",192,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+32)+",192,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+32)+",192,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+32)+",192,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.println("^CELLBG("+(nXCurPos+192)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+192)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C5+"\r");
		out.println("^CELLBG("+(nXCurPos+232)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+232)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D5+"\r");
		out.println("^CELLBG("+(nXCurPos+272)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+272)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E5+"\r");
		out.println("^CELLBG("+(nXCurPos+312)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F5+"\r");
		out.println("^CELLBG("+(nXCurPos+352)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+352)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G5+"\r");
		out.println("^CELLBG("+(nXCurPos+392)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+392)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H5+"\r");
		out.println("^CELLBG("+(nXCurPos+432)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos+32)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I5+"\r");
		out.println("^CELLBG("+(nXCurPos+472)+","+(nYCurPos+32)+",40,20,1,RGB[192,192,192],RGB[192,192,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos+32)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+472)+","+(nYCurPos+32)+",40,1,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_J5+"\r");
	}

	//----con 스크립트 문 출력 함수----
	private void writeScriptcon( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",192,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",192,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",192,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",192,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",192,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+192)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+232)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D7+"\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+272)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E7+"\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F7+"\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+352)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G7+"\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+392)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H7+"\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I7+"\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+472)+","+(nYCurPos)+",40,1,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_J7+"\r");
	}

	//----list 스크립트 문 출력 함수----
	private void writeScriptlist( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",92,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",92,0,10,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_A6_Buf+"\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+92)+","+(nYCurPos)+",100,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+92)+","+(nYCurPos)+",100,0,10,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+192)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+192)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_C6+"\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+232)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+232)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_D6+"\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+272)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+272)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_E6+"\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+312)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+312)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_F6+"\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+352)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+352)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_G6+"\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+392)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+392)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_H6+"\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+432)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+432)+","+(nYCurPos)+",40,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_I6+"\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+472)+","+(nYCurPos)+",40,"+(nAutoHeight_list[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+472)+","+(nYCurPos)+",40,1,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_list[0])+",1)");
		out.println(sheet10_J6+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_startmonth_Param=GetB(request.getParameter("p_startmonth"));
		p_endmonth_Param=GetB(request.getParameter("p_endmonth"));
		p_dept_Param=GetB(request.getParameter("p_dept"));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","cmlms","fhxl21");stat_tot_sum=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_list=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_tot_sum = "select nvl(sum(grseq_cnt),0) tot_grseq_cnt ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(tseat),0) tot_tseat ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(cancel_cnt),0) tot_cancel_cnt ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(grseq_resucnt),0) tot_grseq_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(man_resucnt),0) tot_man_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(wo_resucnt),0) tot_wo_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , nvl(sum(totno),0) tot_totno ";
		sql_tot_sum = sql_tot_sum + "     , nvl(avg(per_cnt),0) avg_per_cnt ";
		sql_tot_sum = sql_tot_sum + "  from ( ";
		sql_tot_sum = sql_tot_sum + "select gubun ";
		sql_tot_sum = sql_tot_sum + "     , gubunnm ";
		sql_tot_sum = sql_tot_sum + "     , grcode ";
		sql_tot_sum = sql_tot_sum + "     , grcodenm ";
		sql_tot_sum = sql_tot_sum + "     , grseq_cnt ";
		sql_tot_sum = sql_tot_sum + "     , tseat ";
		sql_tot_sum = sql_tot_sum + "     , grseq_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , man_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , wo_resucnt ";
		sql_tot_sum = sql_tot_sum + "     , totno ";
		sql_tot_sum = sql_tot_sum + "     , cancel_cnt ";
		sql_tot_sum = sql_tot_sum + "     , round(decode(tseat, null, 0, 0, 0, totno/tseat*100), 2) per_cnt  ";
		sql_tot_sum = sql_tot_sum + "  from (SELECT (d.grtype || d.grsubcd) as gubun ";
		sql_tot_sum = sql_tot_sum + "             , (min(mc.mcode_name) || min(sc.scode_name) || '교육') as gubunnm ";
		sql_tot_sum = sql_tot_sum + "	     , d.grcode ";
		sql_tot_sum = sql_tot_sum + "	     , min(d.grcodenm) grcodenm ";
		sql_tot_sum = sql_tot_sum + "	     , count(distinct a.grseq) grseq_cnt ";
		sql_tot_sum = sql_tot_sum + "	     , nvl(sum(a.tseat),0) tseat ";
		sql_tot_sum = sql_tot_sum + "	     , count(distinct c.grseq) grseq_resucnt ";
		sql_tot_sum = sql_tot_sum + "	     , nvl(sum(c.man),0) man_resucnt ";
		sql_tot_sum = sql_tot_sum + "	     , nvl(sum(c.wo),0) wo_resucnt ";
		sql_tot_sum = sql_tot_sum + "	     , nvl(sum(c.totno),0) totno ";
		sql_tot_sum = sql_tot_sum + "	     , nvl(sum(e.cancel_cnt), 0) cancel_cnt  ";
		sql_tot_sum = sql_tot_sum + "          FROM cmtb_grseq a,cmtb_maincode mc, cmtb_subcode sc ";
		sql_tot_sum = sql_tot_sum + "	     , (select gr.grcode ";
		sql_tot_sum = sql_tot_sum + "	             , gr.grseq ";
		sql_tot_sum = sql_tot_sum + "		     , sum(decode(mb.sex,'M',1,0)) man ";
		sql_tot_sum = sql_tot_sum + "		     , sum(decode(mb.sex,'F',1,0)) wo ";
		sql_tot_sum = sql_tot_sum + "		     , count(gr.userno) totno ";
		sql_tot_sum = sql_tot_sum + "                  from cmtb_grresult gr, cmtb_member mb  ";
		sql_tot_sum = sql_tot_sum + "		 where gr.userno = mb.userno  ";
		sql_tot_sum = sql_tot_sum + "		 group by gr.grcode,gr.grseq) c ";
		sql_tot_sum = sql_tot_sum + "             , cmtb_grcode d ";
		sql_tot_sum = sql_tot_sum + "	     , (select grcode ";
		sql_tot_sum = sql_tot_sum + "	             , grseq ";
		sql_tot_sum = sql_tot_sum + "		     , count(*) cancel_cnt  ";
		sql_tot_sum = sql_tot_sum + "		  from cmtb_app_info  ";
		sql_tot_sum = sql_tot_sum + "		 where cancel_dt is not null  ";
		sql_tot_sum = sql_tot_sum + "		 group by grcode, grseq) e ";
		sql_tot_sum = sql_tot_sum + "  WHERE a.grcode = d.grcode  ";
		sql_tot_sum = sql_tot_sum + "  and a.grcode=c.grcode(+)  ";
		sql_tot_sum = sql_tot_sum + "  and a.grseq=c.grseq(+)  ";
		sql_tot_sum = sql_tot_sum + "  and a.grcode=e.grcode(+)  ";
		sql_tot_sum = sql_tot_sum + "  and a.grseq=e.grseq(+)  ";
		sql_tot_sum = sql_tot_sum + "  and (mc.cd_gubun(+)='G' and d.grtype=mc.major_code(+))  ";
		sql_tot_sum = sql_tot_sum + "  and (sc.cd_gubun(+)='G' and d.grtype=sc.major_code(+) and d.grsubcd=sc.minor_code(+))  ";
		sql_tot_sum = sql_tot_sum + "  and to_char(a.enddate,'yyyymm')between '" + p_startmonth_Param + "' and '" + p_endmonth_Param + "'  ";
		sql_tot_sum = sql_tot_sum + "  and decode('" + p_dept_Param + "' , null, 1, '', 1, substr(a.dept,1,2), 1, 0) =1 ";
		sql_tot_sum = sql_tot_sum + "GROUP BY (d.grtype || d.grsubcd), d.grcode) )";
		sql_list = "select  gubunnm ";
		sql_list = sql_list + "     , grcodenm ";
		sql_list = sql_list + "     , grseq_cnt ";
		sql_list = sql_list + "     , tseat ";
		sql_list = sql_list + "     , cancel_cnt ";
		sql_list = sql_list + "     , grseq_resucnt ";
		sql_list = sql_list + "     , man_resucnt ";
		sql_list = sql_list + "     , wo_resucnt ";
		sql_list = sql_list + "     , totno ";
		sql_list = sql_list + "     , round(decode(tseat, null, 0, 0, 0, totno/tseat*100), 2) per_cnt  ";
		sql_list = sql_list + "    , gubun ";
		sql_list = sql_list + "     , grcode ";
		sql_list = sql_list + "  from (SELECT (d.grtype || d.grsubcd) as gubun ";
		sql_list = sql_list + "             , (min(mc.mcode_name) || min(sc.scode_name) || '교육') as gubunnm ";
		sql_list = sql_list + "	     , d.grcode ";
		sql_list = sql_list + "	     , min(d.grcodenm) grcodenm ";
		sql_list = sql_list + "	     , count(distinct a.grseq) grseq_cnt ";
		sql_list = sql_list + "	     , nvl(sum(a.tseat),0) tseat ";
		sql_list = sql_list + "	     , count(distinct c.grseq) grseq_resucnt ";
		sql_list = sql_list + "	     , nvl(sum(c.man),0) man_resucnt ";
		sql_list = sql_list + "	     , nvl(sum(c.wo),0) wo_resucnt ";
		sql_list = sql_list + "	     , nvl(sum(c.totno),0) totno ";
		sql_list = sql_list + "	     , nvl(sum(e.cancel_cnt), 0) cancel_cnt  ";
		sql_list = sql_list + "          FROM cmtb_grseq a,cmtb_maincode mc, cmtb_subcode sc ";
		sql_list = sql_list + "	     , (select gr.grcode ";
		sql_list = sql_list + "	             , gr.grseq ";
		sql_list = sql_list + "		     , sum(decode(mb.sex,'M',1,0)) man ";
		sql_list = sql_list + "		     , sum(decode(mb.sex,'F',1,0)) wo ";
		sql_list = sql_list + "		     , count(gr.userno) totno ";
		sql_list = sql_list + "                  from cmtb_grresult gr, cmtb_member mb  ";
		sql_list = sql_list + "		 where gr.userno = mb.userno  ";
		sql_list = sql_list + "		 group by gr.grcode,gr.grseq) c ";
		sql_list = sql_list + "             , cmtb_grcode d ";
		sql_list = sql_list + "	     , (select grcode ";
		sql_list = sql_list + "	             , grseq ";
		sql_list = sql_list + "		     , count(*) cancel_cnt  ";
		sql_list = sql_list + "		  from cmtb_app_info  ";
		sql_list = sql_list + "		 where cancel_dt is not null  ";
		sql_list = sql_list + "		 group by grcode, grseq) e ";
		sql_list = sql_list + "  WHERE a.grcode = d.grcode  ";
		sql_list = sql_list + "  and a.grcode=c.grcode(+)  ";
		sql_list = sql_list + "  and a.grseq=c.grseq(+)  ";
		sql_list = sql_list + "  and a.grcode=e.grcode(+)  ";
		sql_list = sql_list + "  and a.grseq=e.grseq(+)  ";
		sql_list = sql_list + "  and (mc.cd_gubun(+)='G' and d.grtype=mc.major_code(+))  ";
		sql_list = sql_list + "  and (sc.cd_gubun(+)='G' and d.grtype=sc.major_code(+) and d.grsubcd=sc.minor_code(+))  ";
		sql_list = sql_list + "  and to_char(a.enddate,'yyyymm')between '" + p_startmonth_Param + "' and '" + p_endmonth_Param + "'  ";
		sql_list = sql_list + "  and decode('" + p_dept_Param + "' , null, 1, '', 1, substr(a.dept,1,2), 1, 0) =1 ";
		sql_list = sql_list + "GROUP BY (d.grtype || d.grsubcd), d.grcode)";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet tot_sum 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtot_sum() throws Exception{
		tot_sum_TOT_GRSEQ_CNT=tot_sum.getDouble(1);
		tot_sum_TOT_TSEAT=tot_sum.getDouble(2);
		tot_sum_TOT_CANCEL_CNT=tot_sum.getDouble(3);
		tot_sum_TOT_GRSEQ_RESUCNT=tot_sum.getDouble(4);
		tot_sum_TOT_MAN_RESUCNT=tot_sum.getDouble(5);
		tot_sum_TOT_WO_RESUCNT=tot_sum.getDouble(6);
		tot_sum_TOT_TOTNO=tot_sum.getDouble(7);
		tot_sum_AVG_PER_CNT=tot_sum.getDouble(8);
	}

	//ResultSet tot_sum 객체의 필드 값 초기화 함수
	private void setFieldInitFromtot_sum(){
		tot_sum_TOT_GRSEQ_CNT=0;
		tot_sum_TOT_TSEAT=0;
		tot_sum_TOT_CANCEL_CNT=0;
		tot_sum_TOT_GRSEQ_RESUCNT=0;
		tot_sum_TOT_MAN_RESUCNT=0;
		tot_sum_TOT_WO_RESUCNT=0;
		tot_sum_TOT_TOTNO=0;
		tot_sum_AVG_PER_CNT=0;
	}

	//ResultSet list 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlist() throws Exception{
		list_GUBUNNM=GetB(list.getString(1));
		list_GRCODENM=GetB(list.getString(2));
		list_GRSEQ_CNT=list.getDouble(3);
		list_TSEAT=list.getDouble(4);
		list_CANCEL_CNT=list.getDouble(5);
		list_GRSEQ_RESUCNT=list.getDouble(6);
		list_MAN_RESUCNT=list.getDouble(7);
		list_WO_RESUCNT=list.getDouble(8);
		list_TOTNO=list.getDouble(9);
		list_PER_CNT=list.getDouble(10);
		list_GUBUN=GetB(list.getString(11));
		list_GRCODE=GetB(list.getString(12));
	}

	//ResultSet list 객체의 필드 값 초기화 함수
	private void setFieldInitFromlist(){
		list_GUBUNNM="";
		list_GRCODENM="";
		list_GRSEQ_CNT=0;
		list_TSEAT=0;
		list_CANCEL_CNT=0;
		list_GRSEQ_RESUCNT=0;
		list_MAN_RESUCNT=0;
		list_WO_RESUCNT=0;
		list_TOTNO=0;
		list_PER_CNT=0;
		list_GUBUN="";
		list_GRCODE="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="과정/기수통계";
		sheet10_A8="#PAGE / #TOTALPAGE";
		sheet10_A3="구     분";
		sheet10_B3="과  정  명";
		sheet10_C3="계획";
		sheet10_E3="취소자";
		sheet10_F3="실적";
		sheet10_J3="비율(%)";
		sheet10_C4="횟수";
		sheet10_D4="인원";
		sheet10_F4="횟수";
		sheet10_G4="남";
		sheet10_H4="여";
		sheet10_I4="계";
		sheet10_A5="총 계";
		sheet10_A7="소계";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle01(false, true);		//머리글 밴드 호출
			getScriptFromfoot01(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
