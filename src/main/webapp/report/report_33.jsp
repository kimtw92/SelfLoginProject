<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_A4;
	String sheet10_C5;
	String sheet10_A7;
	String sheet10_A8;
	String sheet10_E8;
	String sheet10_A9;
	String sheet10_E9;
	String sheet10_A10;
	String sheet10_A11;
	String sheet10_D11;
	double sheet10_H11;
	double sheet10_I11;
	String sheet10_A12;
	long sheet10_D12;
	String sheet10_F12;
	String sheet10_G12;
	String sheet10_A15;
	String sheet10_E15;
	String sheet10_A16;
	String sheet10_E16;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_basic_info;		//ResultSet basic_info 객체를 생성하기 위한 Statement 객체
	private ResultSet basic_info;		//ResultSet basic_info 객체
	private java.sql.Statement stat_detail_info;		//ResultSet detail_info 객체를 생성하기 위한 Statement 객체
	private ResultSet detail_info;		//ResultSet detail_info 객체
	private java.sql.Statement stat_type_info;		//ResultSet type_info 객체를 생성하기 위한 Statement 객체
	private ResultSet type_info;		//ResultSet type_info 객체
	private java.sql.Statement stat_male;		//ResultSet male 객체를 생성하기 위한 Statement 객체
	private ResultSet male;		//ResultSet male 객체
	private java.sql.Statement stat_fmale;		//ResultSet fmale 객체를 생성하기 위한 Statement 객체
	private ResultSet fmale;		//ResultSet fmale 객체

	//-----SQL 변수 선언-----
	private String sql_basic_info;		//ResultSet basic_info 객체를 생성하기 위한 쿼리문 저장
	private String sql_detail_info;		//ResultSet detail_info 객체를 생성하기 위한 쿼리문 저장
	private String sql_type_info;		//ResultSet type_info 객체를 생성하기 위한 쿼리문 저장
	private String sql_male;		//ResultSet male 객체를 생성하기 위한 쿼리문 저장
	private String sql_fmale;		//ResultSet fmale 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet basic_info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String basic_info_GOAL;
	private String basic_info_TARGET;

	//ResultSet detail_info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String detail_info_PERIOD;
	private String detail_info_CLASSROOM;
	private String detail_info_GRSEQMAN_NAME;

	//ResultSet type_info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String type_info_GR_TYPE;

	//ResultSet male 객체에서 필드 값을 받는 쿼리 필드 변수
	private double male_MALE;

	//ResultSet fmale 객체에서 필드 값을 받는 쿼리 필드 변수
	private double fmale_FMALE;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(fmale!=null) fmale.close();
				if(stat_fmale!=null) stat_fmale.close();
				if(male!=null) male.close();
				if(stat_male!=null) stat_male.close();
				if(type_info!=null) type_info.close();
				if(stat_type_info!=null) stat_type_info.close();
				if(detail_info!=null) detail_info.close();
				if(stat_detail_info!=null) stat_detail_info.close();
				if(basic_info!=null) basic_info.close();
				if(stat_basic_info!=null) stat_basic_info.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(69, 94, 518, 753, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromblank(true, true);    //Void 밴드 호출
		getScriptFrombasic_info(true);    //반복 밴드 호출
		getScriptFromdetail(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----blank VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : blank
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromblank(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=55;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----basic_info_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : basic_info_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrombasic_info_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptbasic_info_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----basic_info RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : basic_info
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrombasic_info(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_C5="";

		//DataSet 객체 생성
		//ResultSet basic_info 객체의 생성
		if(basic_info==null){
			basic_info = stat_basic_info.executeQuery(sql_basic_info);
		}else{
			basic_info.beforeFirst();
		}

		while(basic_info.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrombasic_info();	//RecordSet basic_info에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFrombasic_info_header(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_C5=basic_info_GOAL;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrombasic_info_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptbasic_info();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----detail VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : detail
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromdetail(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=274;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet detail_info 객체의 생성
			if(detail_info==null){
				detail_info = stat_detail_info.executeQuery(sql_detail_info);
			}else{
				detail_info.beforeFirst();
			}
			//ResultSet basic_info 객체의 생성
			if(basic_info==null){
				basic_info = stat_basic_info.executeQuery(sql_basic_info);
			}else{
				basic_info.beforeFirst();
			}
			//ResultSet male 객체의 생성
			if(male==null){
				male = stat_male.executeQuery(sql_male);
			}else{
				male.beforeFirst();
			}
			//ResultSet fmale 객체의 생성
			if(fmale==null){
				fmale = stat_fmale.executeQuery(sql_fmale);
			}else{
				fmale.beforeFirst();
			}
			//ResultSet type_info 객체의 생성
			if(type_info==null){
				type_info = stat_type_info.executeQuery(sql_type_info);
			}else{
				type_info.beforeFirst();
			}

			//데이터 fetch
			if(detail_info.next()){
				setFieldVariableFromdetail_info();	//ResultSet detail_info에서 필드 값 설정
			}else{
				setFieldInitFromdetail_info();	//ResultSet detail_info의 필드 값 초기화
			}
			if(basic_info.next()){
				setFieldVariableFrombasic_info();	//ResultSet basic_info에서 필드 값 설정
			}else{
				setFieldInitFrombasic_info();	//ResultSet basic_info의 필드 값 초기화
			}
			if(male.next()){
				setFieldVariableFrommale();	//ResultSet male에서 필드 값 설정
			}else{
				setFieldInitFrommale();	//ResultSet male의 필드 값 초기화
			}
			if(fmale.next()){
				setFieldVariableFromfmale();	//ResultSet fmale에서 필드 값 설정
			}else{
				setFieldInitFromfmale();	//ResultSet fmale의 필드 값 초기화
			}
			if(type_info.next()){
				setFieldVariableFromtype_info();	//ResultSet type_info에서 필드 값 설정
			}else{
				setFieldInitFromtype_info();	//ResultSet type_info의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_E8="";
			sheet10_E9="";
			sheet10_D11="";
			sheet10_H11=0;
			sheet10_I11=0;
			sheet10_D12=0L;
			sheet10_G12="";
			sheet10_E15="";
			sheet10_E16="";

			//데이터 변수 할당
			sheet10_E8=detail_info_PERIOD;
			sheet10_E9=detail_info_CLASSROOM;
			sheet10_D11=basic_info_TARGET;
			sheet10_H11=male_MALE;
			sheet10_I11=fmale_FMALE;
			sheet10_D12= (long)male_MALE + (long)fmale_FMALE;
			sheet10_G12="(남 " + (long)male_MALE + ", 여 "+ (long)fmale_FMALE + ")";
			sheet10_E15=type_info_GR_TYPE;
			sheet10_E16=detail_info_GRSEQMAN_NAME;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptdetail();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(69,69,447,1,16,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,25,1)");
		out.println(sheet10_A1+"\r");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(69,753,447,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
	}

	//----basic_info_header 스크립트 문 출력 함수----
	private void writeScriptbasic_info_header( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",83,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A4+"\r");
	}

	//----basic_info 스크립트 문 출력 함수----
	private void writeScriptbasic_info( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos+30)+","+(nYCurPos)+",417,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C5+"\r");
	}

	//----detail 스크립트 문 출력 함수----
	private void writeScriptdetail( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+74)+",83,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+94)+",95,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
		out.print("^PRINT("+(nXCurPos+95)+","+(nYCurPos+94)+",352,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E8+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+114)+",95,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A9+"\r");
		out.print("^PRINT("+(nXCurPos+95)+","+(nYCurPos+114)+",352,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E9+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+134)+",447,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A10+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+154)+",83,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.print("^PRINT("+(nXCurPos+83)+","+(nYCurPos+154)+",364,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D11+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+174)+",83,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.print("^PRINT("+(nXCurPos+83)+","+(nYCurPos+174)+",32,2,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D12+"\r");
		out.print("^PRINT("+(nXCurPos+115)+","+(nYCurPos+174)+",22,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F12+"\r");
		out.print("^PRINT("+(nXCurPos+137)+","+(nYCurPos+174)+",310,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G12+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+234)+",95,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A15+"\r");
		out.print("^PRINT("+(nXCurPos+95)+","+(nYCurPos+234)+",352,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E15+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+254)+",95,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A16+"\r");
		out.print("^PRINT("+(nXCurPos+95)+","+(nYCurPos+254)+",352,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E16+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_basic_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_detail_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_type_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_male=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_fmale=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_basic_info = "SELECT GOAL, TARGET FROM TB_GRANNAE ";
		sql_basic_info = sql_basic_info + "WHERE GRCODE = '" + p_grcode_Param + "' ";
		sql_basic_info = sql_basic_info + "AND YEAR = SUBSTR('" + p_grseq_Param + "', 1, 4)";
		sql_detail_info = "SELECT TO_CHAR(A.STARTED,'YYYY.MM.DD') || ' ' || DECODE(TO_CHAR(A.STARTED, 'D'),'1','(일)','2','(월)','3','(화)','4','(수)','5','(목)', '6', '(금)', '7', '(토)') ";
		sql_detail_info = sql_detail_info + "|| ' ~ ' || TO_CHAR(A.ENDDATE,'MM.DD') || ' ' || DECODE(TO_CHAR(A.ENDDATE, 'D'), '1','(일)','2','(월)','3','(화)','4','(수)','5','(목)', '6', '(금)', '7', '(토)') ";
		sql_detail_info = sql_detail_info + "PERIOD, B.CLASSROOM_NAME || ' (' || B.CLASSROOM_PLACE || ' ' || B.CLASSROOM_FLOOR || ')' AS CLASSROOM , SEARCHNAME(A.GRSEQMAN_USERNO) AS GRSEQMAN_NAME ";
		sql_detail_info = sql_detail_info + "FROM TB_GRSEQ A, TB_CLASSROOM B ";
		sql_detail_info = sql_detail_info + "WHERE A.CLASSROOM_NO = B.CLASSROOM_NO(+) AND A.GRCODE = '" + p_grcode_Param + "' AND A.GRSEQ = '" + p_grseq_Param + "'";
		sql_type_info = "SELECT B.MCODE_NAME || ' ' || C.SCODE_NAME || '교육' AS GR_TYPE ";
		sql_type_info = sql_type_info + "FROM TB_GRCODE A, TB_MAINCODE B, TB_SUBCODE C ";
		sql_type_info = sql_type_info + "WHERE A.GRTYPE = B.MAJOR_CODE ";
		sql_type_info = sql_type_info + "AND B.MAJOR_CODE = C.MAJOR_CODE ";
		sql_type_info = sql_type_info + "AND A.GRSUBCD = C.MINOR_CODE ";
		sql_type_info = sql_type_info + "AND A.GRCODE = '" + p_grcode_Param + "' ";
		sql_type_info = sql_type_info + " AND A.USE_YN = 'Y'";
		sql_male = "SELECT COUNT(A.USERNO) as male ";
		sql_male = sql_male + "FROM TB_APP_INFO A, TB_MEMBER B   ";
		sql_male = sql_male + "WHERE A.USERNO = B.USERNO  ";
		sql_male = sql_male + "AND (SUBSTR(B.RESNO,7,1) = 1 OR SUBSTR(B.RESNO,7,1) = 3) ";
		sql_male = sql_male + "AND A.GRCODE = '" + p_grcode_Param + "'  ";
		sql_male = sql_male + "AND A.GRSEQ = '" + p_grseq_Param + "' AND A.GRCHK='Y'";
		sql_fmale = "SELECT COUNT(A.USERNO) as fmale ";
		sql_fmale = sql_fmale + "FROM TB_APP_INFO A, TB_MEMBER B   ";
		sql_fmale = sql_fmale + "WHERE A.USERNO = B.USERNO  ";
		sql_fmale = sql_fmale + "AND (SUBSTR(B.RESNO,7,1) = 2 OR SUBSTR(B.RESNO,7,1) = 4) ";
		sql_fmale = sql_fmale + "AND A.GRCODE = '" + p_grcode_Param + "'  ";
		sql_fmale = sql_fmale + "AND A.GRSEQ = '" + p_grseq_Param + "' AND A.GRCHK='Y'";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet basic_info 객체에서 필드 값 설정 함수
	private void setFieldVariableFrombasic_info() throws Exception{
		basic_info_GOAL=GetB(basic_info.getString(1));
		basic_info_TARGET=GetB(basic_info.getString(2));
	}

	//ResultSet basic_info 객체의 필드 값 초기화 함수
	private void setFieldInitFrombasic_info(){
		basic_info_GOAL="";
		basic_info_TARGET="";
	}

	//ResultSet detail_info 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdetail_info() throws Exception{
		detail_info_PERIOD=GetB(detail_info.getString(1));
		detail_info_CLASSROOM=GetB(detail_info.getString(2));
		detail_info_GRSEQMAN_NAME=GetB(detail_info.getString(3));
	}

	//ResultSet detail_info 객체의 필드 값 초기화 함수
	private void setFieldInitFromdetail_info(){
		detail_info_PERIOD="";
		detail_info_CLASSROOM="";
		detail_info_GRSEQMAN_NAME="";
	}

	//ResultSet type_info 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtype_info() throws Exception{
		type_info_GR_TYPE=GetB(type_info.getString(1));
	}

	//ResultSet type_info 객체의 필드 값 초기화 함수
	private void setFieldInitFromtype_info(){
		type_info_GR_TYPE="";
	}

	//ResultSet male 객체에서 필드 값 설정 함수
	private void setFieldVariableFrommale() throws Exception{
		male_MALE=male.getDouble(1);
	}

	//ResultSet male 객체의 필드 값 초기화 함수
	private void setFieldInitFrommale(){
		male_MALE=0;
	}

	//ResultSet fmale 객체에서 필드 값 설정 함수
	private void setFieldVariableFromfmale() throws Exception{
		fmale_FMALE=fmale.getDouble(1);
	}

	//ResultSet fmale 객체의 필드 값 초기화 함수
	private void setFieldInitFromfmale(){
		fmale_FMALE=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="교   육   계   획";
		sheet10_A2="※ 인천광역시지방공무원교육원 교 학 과 ☎ 562-5816 ";
		sheet10_A4="1.목표";
		sheet10_A7="2.교육개요";
		sheet10_A8="  가.교육기간 :";
		sheet10_A9="  나.교육장소 :";
		sheet10_A10="  다.교육인원 및 대상";
		sheet10_A11="   ○ 대 상 : ";
		sheet10_A12="   ○ 인 원 : ";
		sheet10_F12="명";
		sheet10_A15="  라.교육구분 : ";
		sheet10_A16="  마.과 정 장 : ";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
