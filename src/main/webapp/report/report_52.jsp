<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A3;
	String sheet10_A5;
	String sheet10_L5;
	double sheet10_M5;
	String sheet20_A2;
	String sheet20_A3;
	String sheet20_A5;
	String sheet20_A6;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_explanation;		//ResultSet explanation 객체를 생성하기 위한 Statement 객체
	private ResultSet explanation;		//ResultSet explanation 객체
	private java.sql.Statement stat_info;		//ResultSet info 객체를 생성하기 위한 Statement 객체
	private ResultSet info;		//ResultSet info 객체
	private java.sql.Statement stat_objective;		//ResultSet objective 객체를 생성하기 위한 Statement 객체
	private ResultSet objective;		//ResultSet objective 객체
	private java.sql.Statement stat_desc;		//ResultSet desc 객체를 생성하기 위한 Statement 객체
	private ResultSet desc;		//ResultSet desc 객체

	//-----SQL 변수 선언-----
	private String sql_explanation;		//ResultSet explanation 객체를 생성하기 위한 쿼리문 저장
	private String sql_info;		//ResultSet info 객체를 생성하기 위한 쿼리문 저장
	private String sql_objective;		//ResultSet objective 객체를 생성하기 위한 쿼리문 저장
	private String sql_desc;		//ResultSet desc 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet explanation 객체에서 필드 값을 받는 쿼리 필드 변수
	private String explanation_CODETYPE;
	private String explanation_CODEDESC;

	//ResultSet info 객체에서 필드 값을 받는 쿼리 필드 변수
	private String info_TITLE;

	//ResultSet objective 객체에서 필드 값을 받는 쿼리 필드 변수
	private String objective_CODETYPE;
	private String objective_ANSDESC;
	private String objective_ANS;
	private double objective_ANSCNT;

	//ResultSet desc 객체에서 필드 값을 받는 쿼리 필드 변수
	private String desc_CODETYPE;
	private String desc_ANSDESC;
	private String desc_CODEDESC;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_sort_type_Param;
	String p_ptype_Param;
	String p_selsubj_Param;

	//-----사용자 정의 변수 및 함수-----
	private boolean bIsCheck;
	private boolean bIsCon;
	private String strTmp="";
	private int strCount;
	private int forCount;


	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(desc!=null) desc.close();
				if(stat_desc!=null) stat_desc.close();
				if(objective!=null) objective.close();
				if(stat_objective!=null) stat_objective.close();
				if(info!=null) info.close();
				if(stat_info!=null) stat_info.close();
				if(explanation!=null) explanation.close();
				if(stat_explanation!=null) stat_explanation.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(38, 79, 549, 781, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromheader01(true, true);    //Void 밴드 호출
		getScriptFromobjective(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(38, 79, 549, 781, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromheader02(true, true);    //Void 밴드 호출
		getScriptFromdescription(true);    //반복 밴드 호출
		getScriptFromheader03(true, true);    //Void 밴드 호출
		getScriptFromexplanation(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet info 객체의 생성
			if(info==null){
				info = stat_info.executeQuery(sql_info);
			}else{
				info.beforeFirst();
			}

			//데이터 fetch
			if(info.next()){
				setFieldVariableFrominfo();	//ResultSet info에서 필드 값 설정
			}else{
				setFieldInitFrominfo();	//ResultSet info의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";

			//데이터 변수 할당
			sheet10_A1=info_TITLE;
		}   //end if(bIsFirst)

		if (p_sort_type_Param.equals("A")) {
			p_sort_type_Param = "b.acodetype_seq";
		} else if (p_sort_type_Param.equals("B")) {
			p_sort_type_Param = "b.bcodetype_seq";
		} else if (p_sort_type_Param.equals("C")) {
			p_sort_type_Param = "b.ccodetype_seq";
		}

		bIsCheck = false;

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----header01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header_objective RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header_objective
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader_objective(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=5;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader_objective();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----movePos01 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos01
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos01(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;

				getScriptFromheader_objective(true, true);
			}


			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos01();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos02 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos02
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos02(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}

			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos02();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos03 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos03
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos03(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos03();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos04 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos04
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos04(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}

			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos04();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos05 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos05
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos05(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos05();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos06 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos06
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos06(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}

			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos06();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos07 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos07
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos07(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos07();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos08 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos08
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos08(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos08();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos09 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos09
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos09(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값

			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			} else {
				if (objective.isAfterLast() ) {
					bIsCheck = true;
				}

				nYCurPos = nYCurPos - 25;
				nXCurPos = nXCurPos + 51;
				getScriptFromheader_objective(true, true);
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos09();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			if (bIsCheck) {
				nXCurPos = nXStartPos;
				nYCurPos = nYCurPos + 5;
			}
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----movePos10 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : movePos10
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommovePos10(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			nXCurPos = nXStartPos;
			nYCurPos = nYCurPos + 5;

			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}
				writeScriptmovePos10();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//-----objective RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : objective
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromobjective(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_movePos01=false;   //movePos01 조건 밴드 플래그 선언
		boolean bIsTrue_movePos02=false;   //movePos02 조건 밴드 플래그 선언
		boolean bIsTrue_movePos03=false;   //movePos03 조건 밴드 플래그 선언
		boolean bIsTrue_movePos04=false;   //movePos04 조건 밴드 플래그 선언
		boolean bIsTrue_movePos05=false;   //movePos05 조건 밴드 플래그 선언
		boolean bIsTrue_movePos06=false;   //movePos06 조건 밴드 플래그 선언
		boolean bIsTrue_movePos07=false;   //movePos07 조건 밴드 플래그 선언
		boolean bIsTrue_movePos08=false;   //movePos08 조건 밴드 플래그 선언
		boolean bIsTrue_movePos09=false;   //movePos09 조건 밴드 플래그 선언
		boolean bIsTrue_movePos10=false;   //movePos10 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A5="";
		sheet10_L5="";
		sheet10_M5=0;

		bIsCon = false;

		//DataSet 객체 생성
		//ResultSet objective 객체의 생성
		if(objective==null){
			objective = stat_objective.executeQuery(sql_objective);
		}else{
			objective.beforeFirst();
		}

		while(objective.next()){   //자동으로 생성되는 반복 밴드의 루프문
			bIsCon = true;

			//데이터 fetch
			setFieldVariableFromobjective();	//RecordSet objective에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(nXCurPos == 38){    //movePos01 밴드 조건문
				bIsTrue_movePos01=true;
			}else{
				bIsTrue_movePos01=false;
			}
			if(nXCurPos == 89){    //movePos02 밴드 조건문
				bIsTrue_movePos02=true;
			}else{
				bIsTrue_movePos02=false;
			}
			if(nXCurPos == 140){    //movePos03 밴드 조건문
				bIsTrue_movePos03=true;
			}else{
				bIsTrue_movePos03=false;
			}
			if(nXCurPos == 191){    //movePos04 밴드 조건문
				bIsTrue_movePos04=true;
			}else{
				bIsTrue_movePos04=false;
			}
			if(nXCurPos == 242){    //movePos05 밴드 조건문
				bIsTrue_movePos05=true;
			}else{
				bIsTrue_movePos05=false;
			}
			if(nXCurPos == 293){    //movePos06 밴드 조건문
				bIsTrue_movePos06=true;
			}else{
				bIsTrue_movePos06=false;
			}
			if(nXCurPos == 344){    //movePos07 밴드 조건문
				bIsTrue_movePos07=true;
			}else{
				bIsTrue_movePos07=false;
			}
			if(nXCurPos == 395){    //movePos08 밴드 조건문
				bIsTrue_movePos08=true;
			}else{
				bIsTrue_movePos08=false;
			}
			if(nXCurPos == 446){    //movePos09 밴드 조건문
				bIsTrue_movePos09=true;
			}else{
				bIsTrue_movePos09=false;
			}
			if(nXCurPos == 497){    //movePos10 밴드 조건문
				bIsTrue_movePos10=true;
			}else{
				bIsTrue_movePos10=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromheader_objective(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_movePos01=false;    //movePos01 조건 밴드 플래그 초기화
				bIsTrue_movePos02=false;    //movePos02 조건 밴드 플래그 초기화
				bIsTrue_movePos03=false;    //movePos03 조건 밴드 플래그 초기화
				bIsTrue_movePos04=false;    //movePos04 조건 밴드 플래그 초기화
				bIsTrue_movePos05=false;    //movePos05 조건 밴드 플래그 초기화
				bIsTrue_movePos06=false;    //movePos06 조건 밴드 플래그 초기화
				bIsTrue_movePos07=false;    //movePos07 조건 밴드 플래그 초기화
				bIsTrue_movePos08=false;    //movePos08 조건 밴드 플래그 초기화
				bIsTrue_movePos09=false;    //movePos09 조건 밴드 플래그 초기화
				bIsTrue_movePos10=false;    //movePos10 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			//데이터 변수 할당
			sheet10_A5=objective_ANSDESC;

			forCount = 0;
			strCount = 0;
			strTmp = "";

			//objective_ANSCNT = 4;
			//objective_ANS = "1234";

			forCount = (int)objective_ANSCNT;

			if (forCount > 1) {
				for ( strCount =0; strCount < forCount ; strCount++) {
					if (strCount == forCount-1  ) {
						strTmp = strTmp + objective_ANS.substring(strCount,strCount+1);
					} else {
						strTmp = strTmp + objective_ANS.substring(strCount,strCount+1) + ",";
					}
				}
				sheet10_A5 = objective_ANSDESC + strTmp;
			} else {
				sheet10_A5 = objective_ANSDESC + objective_ANS;
			}
			sheet10_A5=objective_ANSDESC;
			//데이터 변수 할당
			sheet10_A5=objective_ANSDESC;

			forCount = 0;
			strCount = 0;
			strTmp = "";

			//objective_ANSCNT = 4;
			//objective_ANS = "1234";

			forCount = (int)objective_ANSCNT;

			if (forCount > 1) {
				for ( strCount =0; strCount < forCount ; strCount++) {
					if (strCount == forCount-1  ) {
						strTmp = strTmp + objective_ANS.substring(strCount,strCount+1);
					} else {
						strTmp = strTmp + objective_ANS.substring(strCount,strCount+1) + ",";
					}
				}
				sheet10_A5 = objective_ANSDESC + strTmp;
			} else {
				sheet10_A5 = objective_ANSDESC + objective_ANS;
			}
			sheet10_L5=objective_ANS;
			sheet10_M5=objective_ANSCNT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFrommovePos01(bIsFirst, false, bIsTrue_movePos01, false);    //movePos01 조건 밴드 호출
			getScriptFrommovePos02(bIsFirst, false, bIsTrue_movePos02, false);    //movePos02 조건 밴드 호출
			getScriptFrommovePos03(bIsFirst, false, bIsTrue_movePos03, false);    //movePos03 조건 밴드 호출
			getScriptFrommovePos04(bIsFirst, false, bIsTrue_movePos04, false);    //movePos04 조건 밴드 호출
			getScriptFrommovePos05(bIsFirst, false, bIsTrue_movePos05, false);    //movePos05 조건 밴드 호출
			getScriptFrommovePos06(bIsFirst, false, bIsTrue_movePos06, false);    //movePos06 조건 밴드 호출
			getScriptFrommovePos07(bIsFirst, false, bIsTrue_movePos07, false);    //movePos07 조건 밴드 호출
			getScriptFrommovePos08(bIsFirst, false, bIsTrue_movePos08, false);    //movePos08 조건 밴드 호출
			getScriptFrommovePos09(bIsFirst, false, bIsTrue_movePos09, false);    //movePos09 조건 밴드 호출
			getScriptFrommovePos10(bIsFirst, false, bIsTrue_movePos10, false);    //movePos10 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader_objective(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptobjective();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if (bIsCon) {
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFrommovePos01(bIsFirst, true, true, false);    //movePos01 조건 밴드 호출
			getScriptFrommovePos02(bIsFirst, true, true, false);    //movePos02 조건 밴드 호출
			getScriptFrommovePos03(bIsFirst, true, true, false);    //movePos03 조건 밴드 호출
			getScriptFrommovePos04(bIsFirst, true, true, false);    //movePos04 조건 밴드 호출
			getScriptFrommovePos05(bIsFirst, true, true, false);    //movePos05 조건 밴드 호출
			getScriptFrommovePos06(bIsFirst, true, true, false);    //movePos06 조건 밴드 호출
			getScriptFrommovePos07(bIsFirst, true, true, false);    //movePos07 조건 밴드 호출
			getScriptFrommovePos08(bIsFirst, true, true, false);    //movePos08 조건 밴드 호출
			getScriptFrommovePos09(bIsFirst, true, true, false);    //movePos09 조건 밴드 호출
			getScriptFrommovePos10(bIsFirst, true, true, false);    //movePos10 조건 밴드 호출
		}
	}

	//----header02 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : header02
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader02(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=30;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader02();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----description RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : description
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromdescription(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet20_A3="";

		//DataSet 객체 생성
		//ResultSet desc 객체의 생성
		if(desc==null){
			desc = stat_desc.executeQuery(sql_desc);
		}else{
			desc.beforeFirst();
		}

		while(desc.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdesc();	//RecordSet desc에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A3=desc_ANSDESC;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptdescription();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----header03 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : header03
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader03(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=30;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader03();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----explanation RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : explanation
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromexplanation(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet20_A6="";

		//DataSet 객체 생성
		//ResultSet explanation 객체의 생성
		if(explanation==null){
			explanation = stat_explanation.executeQuery(sql_explanation);
		}else{
			explanation.beforeFirst();
		}

		while(explanation.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromexplanation();	//RecordSet explanation에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A6=explanation_CODEDESC;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptexplanation();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(38,41,510,1,14,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
	}

	//----header01 스크립트 문 출력 함수----
	private void writeScriptheader01( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",102,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,15,1)");
		out.println(sheet10_A3+"\r");
	}

	//----header_objective 스크립트 문 출력 함수----
	private void writeScriptheader_objective( ) throws Exception{
	}

	//----movePos01 스크립트 문 출력 함수----
	private void writeScriptmovePos01( ) throws Exception{
	}

	//----movePos02 스크립트 문 출력 함수----
	private void writeScriptmovePos02( ) throws Exception{
	}

	//----movePos03 스크립트 문 출력 함수----
	private void writeScriptmovePos03( ) throws Exception{
	}

	//----movePos04 스크립트 문 출력 함수----
	private void writeScriptmovePos04( ) throws Exception{
	}

	//----movePos05 스크립트 문 출력 함수----
	private void writeScriptmovePos05( ) throws Exception{
	}

	//----movePos06 스크립트 문 출력 함수----
	private void writeScriptmovePos06( ) throws Exception{
	}

	//----movePos07 스크립트 문 출력 함수----
	private void writeScriptmovePos07( ) throws Exception{
	}

	//----movePos08 스크립트 문 출력 함수----
	private void writeScriptmovePos08( ) throws Exception{
	}

	//----movePos09 스크립트 문 출력 함수----
	private void writeScriptmovePos09( ) throws Exception{
	}

	//----movePos10 스크립트 문 출력 함수----
	private void writeScriptmovePos10( ) throws Exception{
	}

	//----objective 스크립트 문 출력 함수----
	private void writeScriptobjective( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",51,0,10,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
	}

	//----header02 스크립트 문 출력 함수----
	private void writeScriptheader02( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+10)+",509,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A2+"\r");
	}

	//----description 스크립트 문 출력 함수----
	private void writeScriptdescription( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",509,0,10,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A3+"\r");
	}

	//----header03 스크립트 문 출력 함수----
	private void writeScriptheader03( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+10)+",509,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A5+"\r");
	}

	//----explanation 스크립트 문 출력 함수----
	private void writeScriptexplanation( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",509,0,10,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A6+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_sort_type_Param=toKor(GetB(request.getParameter("p_sort_type")));
		p_ptype_Param=toKor(GetB(request.getParameter("p_ptype")));
		p_selsubj_Param=toKor(GetB(request.getParameter("p_selsubj")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_explanation=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_info=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_objective=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_desc=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_explanation = "SELECT b.codetype ";
		sql_explanation = sql_explanation + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj) || ') ' ||  ";
		sql_explanation = sql_explanation + " codedesc as codedesc ";
		sql_explanation = sql_explanation + "  FROM tb_grexpage a,tb_exdetail b ";
		sql_explanation = sql_explanation + " WHERE a.grcode='" + p_grcode_Param + "'  ";
		sql_explanation = sql_explanation + " and a.grseq='" + p_grseq_Param + "'  ";
		sql_explanation = sql_explanation + " and a.ptype='" + p_ptype_Param + "'  ";
		sql_explanation = sql_explanation + " and a.selsubj='" + p_selsubj_Param + "'  ";
		sql_explanation = sql_explanation + " and a.grcode=b.grcode  ";
		sql_explanation = sql_explanation + " and a.grseq=b.grseq  ";
		sql_explanation = sql_explanation + " and a.subj = b.subj  ";
		sql_explanation = sql_explanation + " and a.ptype = b.ptype 			 ";
		sql_explanation = sql_explanation + " ORDER BY decode(b.codetype,'M',1,'S',1,2) ";
		sql_explanation = sql_explanation + "        , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj)";
		sql_info = "SELECT SUBSTR(GRSEQ,1,4) || '년 ' || SEARCHGRCODENM(GRCODE,GRSEQ) || ' ' ||  ";
		sql_info = sql_info + "TO_NUMBER(SUBSTR(GRSEQ,5,2)) ||  ' 기 ' || LECNM  ";
		sql_info = sql_info + "|| decode('" + p_ptype_Param + "','T','최종','M','중간','1','상시1회','2','상시3회','3','상시3회','4','상시4회','5','상시5회') || '평가 모범답안' ";
		sql_info = sql_info + "AS TITLE   ";
		sql_info = sql_info + " ";
		sql_info = sql_info + "FROM TB_SUBJSEQ  ";
		sql_info = sql_info + "WHERE GRCODE = '" + p_grcode_Param + "' AND GRSEQ = '" + p_grseq_Param + "' AND SUBJ = '" + p_selsubj_Param + "'";
		sql_objective = "SELECT b.codetype ";
		sql_objective = sql_objective + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj) || ') ' ||  ";
		sql_objective = sql_objective + " ansdesc as ansdesc ";
		sql_objective = sql_objective + "     , decode(ANS1,'0','',ANS1) ||  decode(ANS2,'0','',ANS2) ";
		sql_objective = sql_objective + "     ||  decode(ANS3,'0','',ANS3) || decode(ANS4,'0','',ANS4) || ";
		sql_objective = sql_objective + "      decode(ANS5,'0','',ANS5) ANS , ANSCNT ";
		sql_objective = sql_objective + "  FROM tb_grexpage a,tb_exdetail b ";
		sql_objective = sql_objective + " WHERE a.grcode='" + p_grcode_Param + "'  ";
		sql_objective = sql_objective + " and a.grseq='" + p_grseq_Param + "'  ";
		sql_objective = sql_objective + " and a.ptype='" + p_ptype_Param + "'  ";
		sql_objective = sql_objective + " and a.selsubj='" + p_selsubj_Param + "'  ";
		sql_objective = sql_objective + " and a.grcode=b.grcode  ";
		sql_objective = sql_objective + " and a.grseq=b.grseq  ";
		sql_objective = sql_objective + " and a.subj = b.subj  ";
		sql_objective = sql_objective + " and a.ptype = b.ptype  ";
		sql_objective = sql_objective + " and codetype != 'D'			 ";
		sql_objective = sql_objective + " ORDER BY decode(b.codetype,'M',1,'S',1,2) ";
		sql_objective = sql_objective + "        , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj)";
		sql_desc = "SELECT b.codetype ";
		sql_desc = sql_desc + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2), b.acodetype_seq,b.grcode,b.grseq,a.selsubj,b.ptype,b.subj) || ') ' as ansdesc ";
		sql_desc = sql_desc + "     , codedesc ";
		sql_desc = sql_desc + "  FROM tb_grexpage a,tb_exdetail b ";
		sql_desc = sql_desc + " WHERE a.grcode = '" + p_grcode_Param + "' ";
		sql_desc = sql_desc + " and b.grseq = '" + p_grseq_Param + "' ";
		sql_desc = sql_desc + " and a.ptype = '" + p_ptype_Param + "' ";
		sql_desc = sql_desc + " and a.selsubj = '" + p_selsubj_Param + "' ";
		sql_desc = sql_desc + " and a.grcode = b.grcode ";
		sql_desc = sql_desc + " and a.grseq=b.grseq ";
		sql_desc = sql_desc + " and a.subj = b.subj ";
		sql_desc = sql_desc + " and a.ptype = b.ptype ";
		sql_desc = sql_desc + " and codetype='D' ";
		sql_desc = sql_desc + "ORDER BY decode(b.codetype,'M',1,'S',1,2) ";
		sql_desc = sql_desc + "       , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj)";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet explanation 객체에서 필드 값 설정 함수
	private void setFieldVariableFromexplanation() throws Exception{
		explanation_CODETYPE=GetB(explanation.getString(1));
		explanation_CODEDESC=GetB(explanation.getString(2));
	}

	//ResultSet explanation 객체의 필드 값 초기화 함수
	private void setFieldInitFromexplanation(){
		explanation_CODETYPE="";
		explanation_CODEDESC="";
	}

	//ResultSet info 객체에서 필드 값 설정 함수
	private void setFieldVariableFrominfo() throws Exception{
		info_TITLE=GetB(info.getString(1));
	}

	//ResultSet info 객체의 필드 값 초기화 함수
	private void setFieldInitFrominfo(){
		info_TITLE="";
	}

	//ResultSet objective 객체에서 필드 값 설정 함수
	private void setFieldVariableFromobjective() throws Exception{
		objective_CODETYPE=GetB(objective.getString(1));
		objective_ANSDESC=GetB(objective.getString(2));
		objective_ANS=GetB(objective.getString(3));
		objective_ANSCNT=objective.getDouble(4);
	}

	//ResultSet objective 객체의 필드 값 초기화 함수
	private void setFieldInitFromobjective(){
		objective_CODETYPE="";
		objective_ANSDESC="";
		objective_ANS="";
		objective_ANSCNT=0;
	}

	//ResultSet desc 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdesc() throws Exception{
		desc_CODETYPE=GetB(desc.getString(1));
		desc_ANSDESC=GetB(desc.getString(2));
		desc_CODEDESC=GetB(desc.getString(3));
	}

	//ResultSet desc 객체의 필드 값 초기화 함수
	private void setFieldInitFromdesc(){
		desc_CODETYPE="";
		desc_ANSDESC="";
		desc_CODEDESC="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A3="-객관식";
		sheet20_A2="-단답형";
		sheet20_A5="-해설";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
