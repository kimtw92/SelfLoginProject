<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_E2;
	double sheet10_G2;
	String sheet10_E3;
	double sheet10_G3;
	String sheet10_E4;
	double sheet10_G4;
	String sheet10_A13;
	int[] nAutoHeight_loop=new int[1];
	String sheet10_A6;
	String sheet10_B6;
	String sheet10_C6;
	String sheet10_D6;
	String sheet10_F6;
	String sheet10_G6;
	String sheet10_A7;
	long sheet10_B7;
	double sheet10_C7;
	double sheet10_D7;
	double sheet10_F7;
	double sheet10_G7;
	long sheet10_B9;
	double sheet10_C9;
	double sheet10_D9;
	double sheet10_F9;
	double Sum_sheet10_F9;
	long Cnt_sheet10_F9;
	String sheet10_A8;
	long sheet10_B8;
	double sheet10_C8;
	double sheet10_D8;
	double sheet10_F8;
	String sheet10_A10;
	long sheet10_B10;
	double sheet10_C10;
	double sheet10_D10;
	double sheet10_F10;
	double Sum_sheet10_F10;
	long Cnt_sheet10_F10;
	String sheet10_A11;
	long sheet10_B11;
	double sheet10_C11;
	double sheet10_D11;
	double sheet10_F11;
	String sheet10_A12;
	double sheet10_F12;
	String AI_CHART_OBJ3;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_L1;		//ResultSet L1 객체를 생성하기 위한 Statement 객체
	private ResultSet L1;		//ResultSet L1 객체
	private java.sql.Statement stat_PROGRESS;		//ResultSet PROGRESS 객체를 생성하기 위한 Statement 객체
	private ResultSet PROGRESS;		//ResultSet PROGRESS 객체
	private java.sql.Statement stat_M;		//ResultSet M 객체를 생성하기 위한 Statement 객체
	private ResultSet M;		//ResultSet M 객체
	private java.sql.Statement stat_A;		//ResultSet A 객체를 생성하기 위한 Statement 객체
	private ResultSet A;		//ResultSet A 객체

	//-----SQL 변수 선언-----
	private String sql_L1;		//ResultSet L1 객체를 생성하기 위한 쿼리문 저장
	private String sql_PROGRESS;		//ResultSet PROGRESS 객체를 생성하기 위한 쿼리문 저장
	private String sql_M;		//ResultSet M 객체를 생성하기 위한 쿼리문 저장
	private String sql_A;		//ResultSet A 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet L1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L1_SUBJ;
	private String L1_SUBJNM;
	private double L1_MAXPOINT;
	private double L1_MINPOINT;
	private double L1_AVGPOINT;
	private double L1_PERPOINT;
	private double L1_TOTPOINT;

	//ResultSet PROGRESS 객체에서 필드 값을 받는 쿼리 필드 변수
	private double PROGRESS_TOTPOINT;
	private double PROGRESS_MAXAVCOUR;
	private double PROGRESS_MINAVCOUR;
	private double PROGRESS_SUMAVCOUR;
	private double PROGRESS_STUCNT;
	private double PROGRESS_AVGAVCOUR;

	//ResultSet M 객체에서 필드 값을 받는 쿼리 필드 변수
	private double M_TOTPOINT;
	private double M_MAXADDPOINT;
	private double M_MINADDPOINT;
	private double M_AVGADDPOINT;

	//ResultSet A 객체에서 필드 값을 받는 쿼리 필드 변수
	private double A_MAXPOINT;
	private double A_MINPOINT;
	private double A_AVGPOINT;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_selsubj_cnt_Param;
	String p_selsubj_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(A!=null) A.close();
				if(stat_A!=null) stat_A.close();
				if(M!=null) M.close();
				if(stat_M!=null) stat_M.close();
				if(PROGRESS!=null) PROGRESS.close();
				if(stat_PROGRESS!=null) stat_PROGRESS.close();
				if(L1!=null) L1.close();
				if(stat_L1!=null) stat_L1.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(38, 141, 557, 778, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromloop(true);    //반복 밴드 호출
		getScriptFromprogress(true, true);    //Void 밴드 호출
		getScriptFromtest(true, true);    //Void 밴드 호출
		getScriptFromchat(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet A 객체의 생성
			if(A==null){
				A = stat_A.executeQuery(sql_A);
			}else{
				A.beforeFirst();
			}

			//데이터 fetch
			if(A.next()){
				setFieldVariableFromA();	//ResultSet A에서 필드 값 설정
			}else{
				setFieldInitFromA();	//ResultSet A의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_G2=0;
			sheet10_G3=0;
			sheet10_G4=0;

			//데이터 변수 할당
			sheet10_G2=A_MAXPOINT;
			sheet10_G3=A_MINPOINT;
			sheet10_G4=A_AVGPOINT;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----con ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : con
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromcon(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_B9=0L;
			sheet10_C9=0;
			sheet10_D9=0;
			sheet10_F9=0;
			Sum_sheet10_F9=0;
			Cnt_sheet10_F9=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromheader(false, true);	//반복 헤더 호출
				}
				writeScriptcon();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet10_B9=0L;
				sheet10_C9=0;
				sheet10_D9=0;
				sheet10_F9=0;
				Sum_sheet10_F9=0;
				Cnt_sheet10_F9=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_B9=(long)SUM(sheet10_B7, sheet10_B9);
			sheet10_C9=SUM(sheet10_C7, sheet10_C9);
			sheet10_D9=SUM(sheet10_D7, sheet10_D9);
			Sum_sheet10_F9=SUM(sheet10_F7, Sum_sheet10_F9);
			Cnt_sheet10_F9=COUNT(Cnt_sheet10_F9);
			sheet10_F9=AVG(Sum_sheet10_F9, Cnt_sheet10_F9);
		}   //end if(!bIsLast)
	}

	//-----loop RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : loop
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromloop(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움체
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};
		boolean bIsTrue_con=false;   //con 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A7="";
		sheet10_B7=0L;
		sheet10_C7=0;
		sheet10_D7=0;
		sheet10_F7=0;
		sheet10_G7=0;

		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}

		while(L1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL1();	//RecordSet L1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_con=false;    //con 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A7=L1_SUBJNM;
			sheet10_B7=(long)L1_TOTPOINT;
			sheet10_C7=L1_MAXPOINT;
			sheet10_D7=L1_MINPOINT;
			sheet10_F7=L1_AVGPOINT;
			sheet10_G7=L1_PERPOINT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromcon(bIsFirst, false, bIsTrue_con, false);    //con 조건 밴드 호출

			//Auto Size Code
			nAutoHeight_loop[0]=0;
			nAutoHeight_loop[0]=getPrintHeight(sheet10_A7, charWidth, 10, 143, 20, nAutoHeight_loop[0]);
			nAutoHeight_loop[0]=nAutoHeight_loop[0]+20;
			nBandHeight=nAutoHeight_loop[0];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptloop();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromcon(bIsFirst, true, true, false);    //con 조건 밴드 호출
	}

	//----progress VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : progress
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromprogress(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet PROGRESS 객체의 생성
			if(PROGRESS==null){
				PROGRESS = stat_PROGRESS.executeQuery(sql_PROGRESS);
			}else{
				PROGRESS.beforeFirst();
			}

			//데이터 fetch
			if(PROGRESS.next()){
				setFieldVariableFromPROGRESS();	//ResultSet PROGRESS에서 필드 값 설정
			}else{
				setFieldInitFromPROGRESS();	//ResultSet PROGRESS의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B8=0L;
			sheet10_C8=0;
			sheet10_D8=0;
			sheet10_F8=0;

			//데이터 변수 할당
			sheet10_B8=(long)PROGRESS_TOTPOINT;
			sheet10_C8=PROGRESS_MAXAVCOUR;
			sheet10_D8=PROGRESS_MINAVCOUR;
			sheet10_F8=PROGRESS_SUMAVCOUR;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptprogress();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----test VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : test
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromtest(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=60;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet M 객체의 생성
			if(M==null){
				M = stat_M.executeQuery(sql_M);
			}else{
				M.beforeFirst();
			}
			//ResultSet A 객체의 생성
			if(A==null){
				A = stat_A.executeQuery(sql_A);
			}else{
				A.beforeFirst();
			}

			//데이터 fetch
			if(M.next()){
				setFieldVariableFromM();	//ResultSet M에서 필드 값 설정
			}else{
				setFieldInitFromM();	//ResultSet M의 필드 값 초기화
			}
			if(A.next()){
				setFieldVariableFromA();	//ResultSet A에서 필드 값 설정
			}else{
				setFieldInitFromA();	//ResultSet A의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B10=0L;
			sheet10_C10=0;
			sheet10_D10=0;
			sheet10_F10=0;
			Sum_sheet10_F10=0;
			Cnt_sheet10_F10=0L;
			sheet10_B11=0L;
			sheet10_C11=0;
			sheet10_D11=0;
			sheet10_F11=0;
			sheet10_F12=0;

			//데이터 변수 할당
			sheet10_B10=sheet10_B8+sheet10_B9;
			sheet10_C10=sheet10_C8+sheet10_C9;
			sheet10_D10=sheet10_D8+sheet10_D9;
			Sum_sheet10_F10=SUM(sheet10_F8+sheet10_F9, Sum_sheet10_F10);
			Cnt_sheet10_F10=COUNT(Cnt_sheet10_F10);
			sheet10_F10=AVG(Sum_sheet10_F10, Cnt_sheet10_F10);
			sheet10_B11=(long)M_TOTPOINT;
			sheet10_C11=M_MAXADDPOINT;
			sheet10_D11=M_MINADDPOINT;
			sheet10_F11=M_AVGADDPOINT;
			sheet10_F12=A_AVGPOINT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScripttest();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----chat VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : chat
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromchat(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=180;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ3="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ3( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptchat();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(38,38,518,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT(395,76,86,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E2+"\r");
		out.print("^PRINT(481,76,75,0,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G2+"\r");
		out.print("^PRINT(395,96,86,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E3+"\r");
		out.print("^PRINT(481,96,75,0,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G3+"\r");
		out.print("^PRINT(395,116,86,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E4+"\r");
		out.print("^PRINT(481,116,75,0,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G4+"\r");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(38,778,518,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A13+"\r");
	}

	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",143,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
		out.println("^CELLBG("+(nXCurPos+143)+","+(nYCurPos)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos)+",75,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLBG("+(nXCurPos+218)+","+(nYCurPos)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos)+",75,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C6+"\r");
		out.println("^CELLBG("+(nXCurPos+293)+","+(nYCurPos)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos)+",75,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D6+"\r");
		out.println("^CELLBG("+(nXCurPos+368)+","+(nYCurPos)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos)+",75,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F6+"\r");
		out.println("^CELLBG("+(nXCurPos+443)+","+(nYCurPos)+",75,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+443)+","+(nYCurPos)+",75,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G6+"\r");
	}

	//----con 스크립트 문 출력 함수----
	private void writeScriptcon( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos)+",75,1,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos)+",75,1,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C9+"\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos)+",75,1,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D9+"\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos)+",75,1,11,1/0/0,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F9+"\r");
	}

	//----loop 스크립트 문 출력 함수----
	private void writeScriptloop( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",143,"+(nAutoHeight_loop[0])+",1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",143,0,10,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos)+",75,2,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_B7+"\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_D7+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_F7+"\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,"+(nAutoHeight_loop[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+443)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,"+(nAutoHeight_loop[0])+",1)");
		out.println(sheet10_G7+"\r");
	}

	//----progress 스크립트 문 출력 함수----
	private void writeScriptprogress( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",143,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos)+",75,2,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B8+"\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C8+"\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D8+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F8+"\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
	}

	//----test 스크립트 문 출력 함수----
	private void writeScripttest( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",143,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",143,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos)+",75,2,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B10+"\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C10+"\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D10+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F10+"\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos)+",75,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+20)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",143,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",143,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",143,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",143,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",143,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+143)+","+(nYCurPos+20)+",75,2,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+218)+","+(nYCurPos+20)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C11+"\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+293)+","+(nYCurPos+20)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D11+"\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+20)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F11+"\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+20)+",75,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+40)+",143,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",143,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",143,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",143,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",143,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+40)+",143,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+143)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+218)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+293)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+368)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+368)+","+(nYCurPos+40)+",75,2,10,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F12+"\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+443)+","+(nYCurPos+40)+",75,20,0,RGB[0,0,0],3)\r");
	}

	//----chat 스크립트 문 출력 함수----
	private void writeScriptchat( ) throws Exception{
		//스크립트문 생성
		out.println("^CHART(" + (nXCurPos+1) + "," + (nYCurPos+3) + ",517,175,report_59!000.cht)\r");
		if(!AI_CHART_OBJ3.equals(isEmpty)){
			out.print(AI_CHART_OBJ3);
			AI_CHART_OBJ3="";
		}
		out.print("--CHART_END--\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_selsubj_cnt_Param=toKor(GetB(request.getParameter("p_selsubj_cnt")));
		p_selsubj_Param=toKor(GetB(request.getParameter("p_selsubj")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_L1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_PROGRESS=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_M=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_A=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_L1 = "select gsr.subj,sj.lecnm subjnm, gsr.maxpoint, gsr.minpoint, round(gsr.avgpoint,2) avgpoint, ";
		sql_L1 = sql_L1 + "        case sj.subj when 'GUN0000001' then decode(nvl(sj.totpoint,0), 0, 0, round(100*gsr.avgpoint/ nvl(sj.totpoint,0),2) )  ";
		sql_L1 = sql_L1 + "        else decode((nvl(sj.totpoint,0)-nvl(sj.steppoint,0)), 0, 0, round(100*gsr.avgpoint/ (nvl(sj.totpoint,0)-nvl(sj.steppoint,0)),2) ) end perpoint, decode(sj.subj, 'GUN0000001', sj.totpoint, nvl(sj.totpoint,0)-nvl(sj.steppoint,0)) totpoint  ";
		sql_L1 = sql_L1 + "from  (SELECT	a.grcode, a.grseq, a.subj,max(decode(a.subj,'GUN0000001',nvl(a.avcourse,0),nvl(a.paccept,0)-nvl(a.avcourse,0))) maxpoint,min(decode(a.subj,'GUN0000001',nvl(a.avcourse,0),nvl(a.paccept,0)-nvl(a.avcourse,0))) minpoint, ";
		sql_L1 = sql_L1 + "avg(decode(a.subj,'GUN0000001',nvl(a.avcourse,0),nvl(a.paccept,0)-nvl(a.avcourse,0))) avgpoint ";
		sql_L1 = sql_L1 + "FROM tb_subjresult  a, (select userno, grcode, grseq, count(*) selsubj_cnt from tb_stu_lec where '" + p_selsubj_Param + "' like '%' || subj || '%' group by userno, grcode, grseq) st  ";
		sql_L1 = sql_L1 + "WHERE	a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "' and a.grcode=st.grcode(+) and a.grseq=st.grseq(+) and a.userno=st.userno(+) and decode(" + p_selsubj_cnt_Param + ", 0, 1, st.selsubj_cnt, 1, 0)=1 GROUP BY a.grcode, a.grseq, a.subj ";
		sql_L1 = sql_L1 + "HAVING  sum(a.paccept) > 0 ) gsr, tb_subjseq sj  ";
		sql_L1 = sql_L1 + "where gsr.grcode =sj.grcode and gsr.grseq=sj.grseq and gsr.subj=sj.subj  ORDER BY sj.lecnm";
		sql_PROGRESS = "select (select sum(steppoint) from tb_subjseq where grcode='" + p_grcode_Param + "' and grseq='" + p_grseq_Param + "' and subj<>'GUN0000001') totpoint ";
		sql_PROGRESS = sql_PROGRESS + "    , a.maxavcour, a.minavcour, a.sumavcour, b.stucnt, round(decode(b.stucnt, 0, 0, a.sumavcour/b.stucnt),2) avgavcour ";
		sql_PROGRESS = sql_PROGRESS + "from (select grcode, grseq, sum(maxavcour) maxavcour, sum(minavcour) minavcour, sum(sumavcour) sumavcour ";
		sql_PROGRESS = sql_PROGRESS + "        from (SELECT sr.grcode, sr.grseq, nvl(max(sr.avcourse),0) maxavcour, nvl(min(sr.avcourse),0) minavcour, sum(sr.avcourse) sumavcour FROM tb_subjresult sr, (select userno, grcode, grseq, count(*) selsubj_cnt from tb_stu_lec where '" + p_selsubj_Param + "' like '%' || subj || '%' group by userno, grcode, grseq) st  ";
		sql_PROGRESS = sql_PROGRESS + "        WHERE sr.grcode='" + p_grcode_Param + "' and sr.grseq='" + p_grseq_Param + "' and sr.subj <>'GUN0000001' and sr.grcode=st.grcode(+) and sr.grseq=st.grseq(+) and sr.userno=st.userno(+) and decode(" + p_selsubj_cnt_Param + ", 0, 1, st.selsubj_cnt, 1, 0)=1 ";
		sql_PROGRESS = sql_PROGRESS + "                 group by sr.grcode, sr.grseq, sr.subj) group by grcode, grseq) a, ";
		sql_PROGRESS = sql_PROGRESS + "(select grcode, grseq, count(distinct userno) stucnt from tb_subjresult where grcode='" + p_grcode_Param + "' and grseq='" + p_grseq_Param + "' group by grcode, grseq) b where a.grcode=b.grcode and a.grseq=b.grseq";
		sql_M = "select a.totpoint, a.maxaddpoint, a.minaddpoint, round(decode(b.stucnt, 0, 0, a.totpoint/b.stucnt),2) avgaddpoint ";
		sql_M = sql_M + "from (select gm.grcode, gm.grseq, sum(gm.addpoint) totpoint, max(gm.addpoint) maxaddpoint, min(gm.addpoint) minaddpoint  ";
		sql_M = sql_M + "from tb_grstumas gm, (select userno, grcode, grseq, count(*) selsubj_cnt from tb_stu_lec  ";
		sql_M = sql_M + "where '" + p_selsubj_Param + "' like '%' || subj || '%' group by userno, grcode, grseq) st  ";
		sql_M = sql_M + "where gm.grcode='" + p_grcode_Param + "'  ";
		sql_M = sql_M + "and gm.grseq='" + p_grseq_Param + "'  ";
		sql_M = sql_M + "and gm.grcode=st.grcode(+)  ";
		sql_M = sql_M + "and gm.grseq=st.grseq(+)  ";
		sql_M = sql_M + "and gm.userno=st.userno(+) and decode(" + p_selsubj_cnt_Param + ", 0, 1, st.selsubj_cnt, 1, 0)=1 ";
		sql_M = sql_M + "group by gm.grcode, gm.grseq) a, (select grcode, grseq, count(distinct userno) stucnt from tb_subjresult  ";
		sql_M = sql_M + "where grcode='" + p_grcode_Param + "' and grseq='" + p_grseq_Param + "' group by grcode, grseq) b   ";
		sql_M = sql_M + "where a.grcode=b.grcode and a.grseq=b.grseq";
		sql_A = "SELECT round(max(a.paccept), 2) maxpoint, round(min(a.paccept),2) minpoint, round(avg(a.paccept),2) avgpoint ";
		sql_A = sql_A + "FROM tb_grresult a, (select userno, grcode, grseq, count(*) selsubj_cnt from tb_stu_lec  ";
		sql_A = sql_A + "where '" + p_selsubj_Param + "' like '%' || subj || '%' group by userno, grcode, grseq) st  ";
		sql_A = sql_A + "WHERE a.grcode='" + p_grcode_Param + "' and a.grseq='" + p_grseq_Param + "'  and a.grcode=st.grcode(+) and a.grseq=st.grseq(+)  ";
		sql_A = sql_A + "           and decode(" + p_selsubj_cnt_Param + ", 0, 1, st.selsubj_cnt, 1, 0)=1";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet L1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL1() throws Exception{
		L1_SUBJ=GetB(L1.getString(1));
		L1_SUBJNM=GetB(L1.getString(2));
		L1_MAXPOINT=L1.getDouble(3);
		L1_MINPOINT=L1.getDouble(4);
		L1_AVGPOINT=L1.getDouble(5);
		L1_PERPOINT=L1.getDouble(6);
		L1_TOTPOINT=L1.getDouble(7);
	}

	//ResultSet L1 객체의 필드 값 초기화 함수
	private void setFieldInitFromL1(){
		L1_SUBJ="";
		L1_SUBJNM="";
		L1_MAXPOINT=0;
		L1_MINPOINT=0;
		L1_AVGPOINT=0;
		L1_PERPOINT=0;
		L1_TOTPOINT=0;
	}

	//ResultSet PROGRESS 객체에서 필드 값 설정 함수
	private void setFieldVariableFromPROGRESS() throws Exception{
		PROGRESS_TOTPOINT=PROGRESS.getDouble(1);
		PROGRESS_MAXAVCOUR=PROGRESS.getDouble(2);
		PROGRESS_MINAVCOUR=PROGRESS.getDouble(3);
		PROGRESS_SUMAVCOUR=PROGRESS.getDouble(4);
		PROGRESS_STUCNT=PROGRESS.getDouble(5);
		PROGRESS_AVGAVCOUR=PROGRESS.getDouble(6);
	}

	//ResultSet PROGRESS 객체의 필드 값 초기화 함수
	private void setFieldInitFromPROGRESS(){
		PROGRESS_TOTPOINT=0;
		PROGRESS_MAXAVCOUR=0;
		PROGRESS_MINAVCOUR=0;
		PROGRESS_SUMAVCOUR=0;
		PROGRESS_STUCNT=0;
		PROGRESS_AVGAVCOUR=0;
	}

	//ResultSet M 객체에서 필드 값 설정 함수
	private void setFieldVariableFromM() throws Exception{
		M_TOTPOINT=M.getDouble(1);
		M_MAXADDPOINT=M.getDouble(2);
		M_MINADDPOINT=M.getDouble(3);
		M_AVGADDPOINT=M.getDouble(4);
	}

	//ResultSet M 객체의 필드 값 초기화 함수
	private void setFieldInitFromM(){
		M_TOTPOINT=0;
		M_MAXADDPOINT=0;
		M_MINADDPOINT=0;
		M_AVGADDPOINT=0;
	}

	//ResultSet A 객체에서 필드 값 설정 함수
	private void setFieldVariableFromA() throws Exception{
		A_MAXPOINT=A.getDouble(1);
		A_MINPOINT=A.getDouble(2);
		A_AVGPOINT=A.getDouble(3);
	}

	//ResultSet A 객체의 필드 값 초기화 함수
	private void setFieldInitFromA(){
		A_MAXPOINT=0;
		A_MINPOINT=0;
		A_AVGPOINT=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="과 목 별 - 성 적 분 포 ";
		sheet10_E2="최고점수(전체) :";
		sheet10_E3="최저점수(전체) :";
		sheet10_E4="평균(전체) :";
		sheet10_A13="#PAGE / #TOTALPAGE";
		sheet10_A6="과목명";
		sheet10_B6="총점";
		sheet10_C6="최고점수";
		sheet10_D6="최저점수";
		sheet10_F6="평균점수";
		sheet10_G6="%";
		sheet10_A8="진도율";
		sheet10_A10="소계";
		sheet10_A11="가점";
		sheet10_A12="총계";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//----AI_CHART_OBJ3 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ3( ) throws Exception{
		//지역 변수 선언 및 초기화
		String chartProp="";   //챠트 프로퍼티 스크립트

		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}
		if(!L1.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ3="\t";
		AI_CHART_OBJ3=AI_CHART_OBJ3 + "PERPOINT\r\n";

		while(L1.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromL1();   //RecordSet L1에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ3=AI_CHART_OBJ3 + L1_SUBJNM + "\t";

			//데이터 설정
			AI_CHART_OBJ3=AI_CHART_OBJ3 + L1_PERPOINT + "\r\n";
		}   //while end

		//챠트 프로퍼티 스크립트
		chartProp=chartProp + "AXIS_Y:Max="+(100)+"\r\n";;
		if(!chartProp.equals(isEmpty)){
			AI_CHART_OBJ3=AI_CHART_OBJ3 + "--PROPERTY\r\n";
			AI_CHART_OBJ3=AI_CHART_OBJ3 + chartProp;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
