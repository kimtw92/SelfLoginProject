<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_K1;
	String sheet10_A2;
	String sheet10_A3;
	double sheet10_A4;
	String sheet20_A1;
	String sheet20_A2;
	double sheet20_A3;
	String sheet20_A5;
	String sheet20_F5;
	String AI_CHART_OBJ1;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_A;		//ResultSet A 객체를 생성하기 위한 Statement 객체
	private ResultSet A;		//ResultSet A 객체
	private java.sql.Statement stat_L1;		//ResultSet L1 객체를 생성하기 위한 Statement 객체
	private ResultSet L1;		//ResultSet L1 객체
	private java.sql.Statement stat_L2;		//ResultSet L2 객체를 생성하기 위한 Statement 객체
	private ResultSet L2;		//ResultSet L2 객체

	//-----SQL 변수 선언-----
	private String sql_A;		//ResultSet A 객체를 생성하기 위한 쿼리문 저장
	private String sql_L1;		//ResultSet L1 객체를 생성하기 위한 쿼리문 저장
	private String sql_L2;		//ResultSet L2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet A 객체에서 필드 값을 받는 쿼리 필드 변수
	private String A_GRCODENM;

	//ResultSet L1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L1_GRSEQ;
	private double L1_PACCEPTAVG;

	//ResultSet L2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String L2_GRYEAR;
	private double L2_PACCEPTAVG;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_startyear_Param;
	String p_endyear_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(L2!=null) L2.close();
				if(stat_L2!=null) stat_L2.close();
				if(L1!=null) L1.close();
				if(stat_L1!=null) stat_L1.close();
				if(A!=null) A.close();
				if(stat_A!=null) stat_A.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(32, 79, 563, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromL1_title(true, true);    //Void 밴드 호출
		getScriptFromL1_side();    //Side 밴드 호출
		getScriptFromblank1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(32, 79, 563, 801, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromL2_title(true, true);    //Void 밴드 호출
		getScriptFromL2_side();    //Side 밴드 호출
		getScriptFromchart(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet A 객체의 생성
			if(A==null){
				A = stat_A.executeQuery(sql_A);
			}else{
				A.beforeFirst();
			}

			//데이터 fetch
			if(A.next()){
				setFieldVariableFromA();	//ResultSet A에서 필드 값 설정
			}else{
				setFieldInitFromA();	//ResultSet A의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";
			sheet10_K1="";

			//데이터 변수 할당
			sheet10_A1= A_GRCODENM + "  " + p_startyear_Param + "년 ~ " + p_endyear_Param +"년";
			sheet10_K1=A_GRCODENM;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----L1_title VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L1_title
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromL1_title(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL1_title();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----L1_side SideBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : L1_side
	//-----밴드 종류 : Side 밴드
	private void getScriptFromL1_side( ) throws Exception{
		//지역 변수 선언 및 초기화
		boolean bIsFirst=true;
		int nBandHeight=40;    //사이드 밴드 높이
		int nSideStartYPos=nYCurPos;   //사이드 밴드 시작 Y 좌표
		int nRepUnitWidth=53;   //반복 단위의 폭
		int nSideEndXPos=nXEndPos;    //사이드 밴드 끝 X 좌표

		//데이터 변수 초기화
		sheet10_A3="";
		sheet10_A4=0;

		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}

		//데이터 fetch
		if(L1.next()){
			setFieldVariableFromL1();	//ResultSet L1에서 필드 값 설정
		}else{
			return;    //반복 단위의 ResultSet에 Row가 없으므로 탈출
		}

		while(!L1.isAfterLast()){
			if(bIsFirst){   //루프 내에서 한번만 실행되는 코드
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					nSideStartYPos=nYCurPos;
				}

				//헤더 스크립트 함수 호출(bIsFirst 블록)
				nXCurPos=nXStartPos;
			}else{   //DataSet fetch
				//반복 단위 데이터 fetch
				setFieldVariableFromL1();	//ResultSet L1에서 필드 값 설정
			}   //end if(bIsFirst)

			//데이터 변수 할당(반복 단위, 반복 테일)
			sheet10_A3=L1_GRSEQ;
			sheet10_A4=L1_PACCEPTAVG;

			if(nXCurPos+nRepUnitWidth>nSideEndXPos){   //출력 폭 검사
				//페이지 스킵 함수 호출
				pageSkip(10);
				nYCurPos=nSideStartYPos;

				//헤더 스크립트 함수 호출(페이지 스킵)
				nXCurPos=nXStartPos;
			}   //end if(page skip test)

			//반복 단위 스크립트 출력
			writeScriptL1_side();

			//DataSet 이동 및 다음 출력 좌표 설정
			nXCurPos=nXCurPos+nRepUnitWidth;
			bIsFirst=false;
			L1.next();
		}   //while end

		//반복 테일 스크립트 함수 및 스타일 함수 호출
		writeScriptStyleL1_side((int)((nSideEndXPos-nXCurPos)/nRepUnitWidth));    //반복 밴드의 양식 채우기

		//다음 밴드의 출력 좌표 설정
		nYCurPos=nYCurPos+nBandHeight;
		nXCurPos=nXStartPos;
	}

	//----blank1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : blank1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromblank1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----L2_title VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : L2_title
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromL2_title(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL2_title();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----L2_side SideBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : L2_side
	//-----밴드 종류 : Side 밴드
	private void getScriptFromL2_side( ) throws Exception{
		//지역 변수 선언 및 초기화
		boolean bIsFirst=true;
		int nBandHeight=40;    //사이드 밴드 높이
		int nSideStartYPos=nYCurPos;   //사이드 밴드 시작 Y 좌표
		int nRepUnitWidth=106;   //반복 단위의 폭
		int nSideEndXPos=nXEndPos;    //사이드 밴드 끝 X 좌표

		//데이터 변수 초기화
		sheet20_A2="";
		sheet20_A3=0;

		//DataSet 객체 생성
		//ResultSet L2 객체의 생성
		if(L2==null){
			L2 = stat_L2.executeQuery(sql_L2);
		}else{
			L2.beforeFirst();
		}

		//데이터 fetch
		if(L2.next()){
			setFieldVariableFromL2();	//ResultSet L2에서 필드 값 설정
		}else{
			return;    //반복 단위의 ResultSet에 Row가 없으므로 탈출
		}

		while(!L2.isAfterLast()){
			if(bIsFirst){   //루프 내에서 한번만 실행되는 코드
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					nSideStartYPos=nYCurPos;
				}

				//헤더 스크립트 함수 호출(bIsFirst 블록)
				nXCurPos=nXStartPos;
			}else{   //DataSet fetch
				//반복 단위 데이터 fetch
				setFieldVariableFromL2();	//ResultSet L2에서 필드 값 설정
			}   //end if(bIsFirst)

			//데이터 변수 할당(반복 단위, 반복 테일)
			sheet20_A2=L2_GRYEAR;
			sheet20_A3=L2_PACCEPTAVG;

			if(nXCurPos+nRepUnitWidth>nSideEndXPos){   //출력 폭 검사
				//페이지 스킵 함수 호출
				pageSkip(10);
				nYCurPos=nSideStartYPos;

				//헤더 스크립트 함수 호출(페이지 스킵)
				nXCurPos=nXStartPos;
			}   //end if(page skip test)

			//반복 단위 스크립트 출력
			writeScriptL2_side();

			//DataSet 이동 및 다음 출력 좌표 설정
			nXCurPos=nXCurPos+nRepUnitWidth;
			bIsFirst=false;
			L2.next();
		}   //while end

		//반복 테일 스크립트 함수 및 스타일 함수 호출
		writeScriptStyleL2_side((int)((nSideEndXPos-nXCurPos)/nRepUnitWidth));    //반복 밴드의 양식 채우기

		//다음 밴드의 출력 좌표 설정
		nYCurPos=nYCurPos+nBandHeight;
		nXCurPos=nXStartPos;
	}

	//----chart VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : chart
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromchart(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=280;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet A 객체의 생성
			if(A==null){
				A = stat_A.executeQuery(sql_A);
			}else{
				A.beforeFirst();
			}

			//데이터 fetch
			if(A.next()){
				setFieldVariableFromA();	//ResultSet A에서 필드 값 설정
			}else{
				setFieldInitFromA();	//ResultSet A의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_A5="";
			sheet20_F5="";
			AI_CHART_OBJ1="";

			//데이터 변수 할당
			sheet20_A5= A_GRCODENM + " 평균추이도";
			sheet20_F5=A_GRCODENM;
			getChartDataAI_CHART_OBJ1( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptchart();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(32,41,530,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
	}

	//----L1_title 스크립트 문 출력 함수----
	private void writeScriptL1_title( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",530,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",530,1,9,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
	}

	//----L1_side 스크립트 문 출력 함수----
	private void writeScriptL1_side( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",53,1,8,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",53,1,8,1/0/2,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A4+"\r");
	}

	//----L1_side 스타일 스크립트 문 출력 함수----
	private void writeScriptStyleL1_side(int nCnt) throws Exception{
		//스타일 스크립트문 생성
		int i;
		for(i=0; i<nCnt; i++){
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",53,20,0,RGB[0,0,0],3)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",53,20,0,RGB[0,0,0],3)\r");
			nXCurPos=nXCurPos+53;
		}
	}

	//----L2_title 스크립트 문 출력 함수----
	private void writeScriptL2_title( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",530,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",530,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",530,1,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A1+"\r");
	}

	//----L2_side 스크립트 문 출력 함수----
	private void writeScriptL2_side( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",106,1,10,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A2+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",106,1,10,1/0/2,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A3+"\r");
	}

	//----L2_side 스타일 스크립트 문 출력 함수----
	private void writeScriptStyleL2_side(int nCnt) throws Exception{
		//스타일 스크립트문 생성
		int i;
		for(i=0; i<nCnt; i++){
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",106,20,0,RGB[0,0,0],3)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",106,20,0,RGB[0,0,0],3)\r");
			nXCurPos=nXCurPos+106;
		}
	}

	//----chart 스크립트 문 출력 함수----
	private void writeScriptchart( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+20)+",530,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",530,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",530,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",530,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",530,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",530,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+106)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+212)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+318)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+40)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+60)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+60)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+80)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+80)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+100)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+100)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+120)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+120)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+140)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+140)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+160)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+160)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+180)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+180)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+200)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+200)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+220)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+220)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+240)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+240)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+106)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+212)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+318)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+424)+","+(nYCurPos+260)+",106,20,0,RGB[0,0,0],3)\r");
		out.println("^CHART(" + (nXCurPos+5) + "," + (nYCurPos+44) + ",521,231,report_56!100.cht)\r");
		if(!AI_CHART_OBJ1.equals(isEmpty)){
			out.print(AI_CHART_OBJ1);
			AI_CHART_OBJ1="";
		}
		out.print("--CHART_END--\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_startyear_Param=toKor(GetB(request.getParameter("p_startyear")));
		p_endyear_Param=toKor(GetB(request.getParameter("p_endyear")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_A=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L2=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_A = "SELECT GRCODENM FROM TB_GRCODE WHERe GRCODE='" + p_grcode_Param + "'";
		sql_L1 = "SELECT substr(grseq,1,4) ||'년 ' || substr(grseq,5,2) || '기' as grseq, round(avg(paccept),2) pacceptavg  ";
		sql_L1 = sql_L1 + "      FROM tb_grresult WHERE grcode='" + p_grcode_Param + "' and grseq between '" + p_startyear_Param + "'||'00' and '" + p_endyear_Param + "' ||'99'  ";
		sql_L1 = sql_L1 + "      GROUP BY  grseq order by grseq";
		sql_L2 = "SELECT substr(grseq,1,4)||'년' as gryear,round(avg(paccept),2) pacceptavg  ";
		sql_L2 = sql_L2 + "     FROM tb_grresult  WHERE grcode='" + p_grcode_Param + "' and grseq between '" + p_startyear_Param + "'||'00' and '" + p_endyear_Param + "' ||'99'  ";
		sql_L2 = sql_L2 + "     GROUP BY substr(grseq,1,4)  order by substr(grseq,1,4)";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet A 객체에서 필드 값 설정 함수
	private void setFieldVariableFromA() throws Exception{
		A_GRCODENM=GetB(A.getString(1));
	}

	//ResultSet A 객체의 필드 값 초기화 함수
	private void setFieldInitFromA(){
		A_GRCODENM="";
	}

	//ResultSet L1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL1() throws Exception{
		L1_GRSEQ=GetB(L1.getString(1));
		L1_PACCEPTAVG=L1.getDouble(2);
	}

	//ResultSet L1 객체의 필드 값 초기화 함수
	private void setFieldInitFromL1(){
		L1_GRSEQ="";
		L1_PACCEPTAVG=0;
	}

	//ResultSet L2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL2() throws Exception{
		L2_GRYEAR=GetB(L2.getString(1));
		L2_PACCEPTAVG=L2.getDouble(2);
	}

	//ResultSet L2 객체의 필드 값 초기화 함수
	private void setFieldInitFromL2(){
		L2_GRYEAR="";
		L2_PACCEPTAVG=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A2="기수별평균";
		sheet20_A1="연도별 평균";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//----AI_CHART_OBJ1 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ1( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}
		if(!L1.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ1="\t";
		AI_CHART_OBJ1=AI_CHART_OBJ1 + "PACCEPTAVG\r\n";

		while(L1.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromL1();   //RecordSet L1에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ1=AI_CHART_OBJ1 + L1_GRSEQ + "\t";

			//데이터 설정
			AI_CHART_OBJ1=AI_CHART_OBJ1 + L1_PACCEPTAVG + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
