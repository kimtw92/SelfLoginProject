<%
  /* ### Generated by AIDesigner 3.7.1.18 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>
<%@ page import="java.util.*" %>
<%@ page import="com.dunet.loti.manager.DBManager" %>

<%
ReportHandler handler = new ReportHandler(request,response);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용
	
	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;
	
	//데이터 변수 선언
	String sheet10_A2;
	String sheet10_A3;
	String sheet10_N3;
	String sheet10_A6;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_G4;
	String sheet10_H4;
	String sheet10_I4;
	String sheet10_J4;
	String sheet10_K4;
	String sheet10_L4;
	String sheet10_M4;
	long sheet10_A5;
	String sheet10_B5;
	
	//Connection, Statement, ResultSet 객체 선언
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_course;		//ResultSet course 객체를 생성하기 위한 Statement 객체
	private ResultSet course;		//ResultSet course 객체
	private java.sql.Statement stat_Query;		//ResultSet Query 객체를 생성하기 위한 Statement 객체
	private ResultSet Query;		//ResultSet Query 객체
	
	//SQL 변수 선언
	private String sql_course;		//ResultSet course 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query;		//ResultSet Query 객체를 생성하기 위한 쿼리문 저장
	
	//-----쿼리 필드 변수 선언-----
	//ResultSet course 객체에서 필드 값을 받는 쿼리 필드 변수
	private String course_COURSE_ST;
	private String course_COURSE_ED;
	private String course_GRSEQ_NAME;
	
	//ResultSet Query 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query_NAME;
	
	//파라미터 변수 선언
	String deptcode_Param;
	String grcode_Param;
	String grseq_Param;
	
	//-----사용자 정의 변수 및 함수-----
	private String getDate(String strDate, int colNum) {
				
		System.out.println("strDate" +strDate);
				
		if (strDate.length() != 8) {
			return "";
		}
		String sResultDate = "";
		String returnDay = "";
		
		String strMonth = strDate.substring(4,6);
		String strDay   = strDate.substring(6,8);
				
		int iDay = 0;
				
		
		if (colNum != 0) {
			iDay = Integer.parseInt(strDay) + colNum;
			
			if(iDay<10) {
				strDay = "0"+iDay;
			} else {
				strDay = String.valueOf(iDay);
			}
		} 
		
		Calendar calendar = Calendar.getInstance();
			   
		System.out.println("strDate" +strDate.substring(0,4));
		System.out.println("strMonth" +strMonth);
		System.out.println("strDay" +strDay);
		
		calendar.set(Integer.parseInt(strDate.substring(0,4)),Integer.parseInt(strMonth),Integer.parseInt(strDay));
			   
		System.out.println(calendar.get( Calendar.DAY_OF_WEEK));
		
		if (calendar.get( Calendar.DAY_OF_WEEK) == 0 ) {
			returnDay = "일";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 1 ) {
			returnDay = "월";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 2 ) {
			returnDay = "화";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 3 ) {
			returnDay = "수";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 4 ) {
			returnDay = "목";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 5 ) {
			returnDay = "금";
		} else if (calendar.get( Calendar.DAY_OF_WEEK) == 6 ) {
			returnDay = "토";
		}
		
		sResultDate = strMonth + "/" + strDay + "("+ returnDay + ")";
		
		return sResultDate;
	}
	
	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response){
		this.request=request;
		this.response=response;
	}
	
	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{
			this.out=out;
			
			nMaxPage=0;		//nMaxPage 초기화
			
			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL");
			
			//파라미터 설정 함수 호출
			setParam();
			
			//고정 데이터 초기화 함수 호출
			initConstVarient();
			
			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();
			
			//쿼리문 초기화 함수 호출
			initSQLConst();
			
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();
			
			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{
			try{
				if(Query!=null) Query.close();
				if(stat_Query!=null) stat_Query.close();
				if(course!=null) course.close();
				if(stat_course!=null) stat_course.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){
			}
		}
	}
	
	//-----쉬트 함수-----
	//-----SHEET=Sheet1 FRAME=0 Start-----
	//-----폼 형식 : 상대 양식
	private void executeSheet10() throws Exception{
		initSheetVariant(41, 113, 795, 534, true);
		
		out.print("-- " + nPageNum + " PAGE --\r");
		
		getScriptFromtitle(true, true);		//머리글 밴드 호출
		
		getScriptFromfoot(true, true);		//바닥글 밴드 호출
		
		getScriptFromloop(true);		//반복 밴드 호출
		
		//생성된 최대 페이지 번호 구하기
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);
	}
	
	//-----밴드 함수-----
	//-----title HeaderBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=0
	//-----밴드 이름 : title
	//-----밴드 종류 : 머리글 밴드
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//수식 데이터 설정
		if(bIsFirst){
			//ResultSet course 객체의 생성
			if(course==null){
				course = stat_course.executeQuery(sql_course);
			}else{
				course.beforeFirst();
			}
			if(course.next()){
				setFieldVariableFromcourse();	//ResultSet course에서 필드 값 설정
			}else{
				setFieldInitFromcourse();	//ResultSet course의 필드 값 초기화
			}
			
			sheet10_A2="";
			sheet10_A3="";
			sheet10_N3="";
			
			sheet10_A2= "⊙" + course_GRSEQ_NAME +"과정 제 "+ grseq_Param.substring(4,6) + "기" +"⊙";
			sheet10_A3="교육기간 : "+course_COURSE_ST.substring(0,4) + "년" + course_COURSE_ST.substring(4,6) + "월"+ course_COURSE_ST.substring(6,8) + "일 ~ "+course_COURSE_ED.substring(0,4) + "년" + course_COURSE_ED.substring(4,6) + "월"+ course_COURSE_ED.substring(6,8) + "일";
			sheet10_N3=course_COURSE_ST;
			
			//TODO: Add your extra code here
		}
		
		//TODO: Add your extra code here
		
		//스크립트 출력
		if(bIsPrint){
			writeScripttitle();
		}
	}
	
	//-----foot FooterBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=0
	//-----밴드 이름 : foot
	//-----밴드 종류 : 바닥글 밴드
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint)
	 throws Exception{
		//수식 데이터 설정
		if(bIsFirst){
			
			//TODO: Add your extra code here
		}
		
		//TODO: Add your extra code here
		
		//스크립트 출력
		if(bIsPrint){
			writeScriptfoot();
		}
	}
	
	//-----header RepeatHeader Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=0
	//-----밴드 이름 : header
	//-----밴드 종류 : 반복헤더 밴드
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//수식 데이터 설정
		if(bIsFirst){
			sheet10_C4="";
			sheet10_D4="";
			sheet10_E4="";
			sheet10_F4="";
			sheet10_G4="";
			sheet10_H4="";
			sheet10_I4="";
			sheet10_J4="";
			sheet10_K4="";
			sheet10_L4="";
			
			sheet10_C4= getDate(course_COURSE_ST,0);
			sheet10_D4= getDate(course_COURSE_ST,1);
			sheet10_E4= getDate(course_COURSE_ST,2);
			sheet10_F4= getDate(course_COURSE_ST,3);
			sheet10_G4= getDate(course_COURSE_ST,4);
			sheet10_H4= getDate(course_COURSE_ST,5);
			sheet10_I4= getDate(course_COURSE_ST,6);
			sheet10_J4= getDate(course_COURSE_ST,7);
			sheet10_K4= getDate(course_COURSE_ST,8);
			sheet10_L4= getDate(course_COURSE_ST,9);
			
			//TODO: Add your extra code here
		}
		
		//TODO: Add your extra code here
		
		//스크립트 출력
		if(bIsPrint){
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+20)){
				pageSkip(10);
			}
			
			writeScriptheader();
			
			//다음 밴드 출력 위치 지정
			nYCurPos=nYCurPos+20;
		}
	}
	
	//-----loop RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=0
	//-----밴드 이름 : loop
	//-----밴드 종류 : 반복 밴드
	private void getScriptFromloop(boolean bIsPrint) throws Exception{
		//지역 변수 선언
		boolean bIsFirst;
		bIsFirst=true;
		
		//변수 초기화
		sheet10_A5=0L;
		sheet10_B5="";
		
		//TODO: Add your extra code here
		
		//ResultSet Query 객체의 생성
		if(Query==null){
			Query = stat_Query.executeQuery(sql_Query);
		}else{
			Query.beforeFirst();
		}
		//TODO: Add your extra code here
		
		while(Query.next()){
			setFieldVariableFromQuery();	//RecordSet Query에서 필드 값 설정
			
			bIsBeforePageSkip=false;
			
			//반복 헤더 호출
			if(bIsFirst){
				getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
			}
			
			sheet10_A5=COUNT(sheet10_A5);
			sheet10_B5=Query_NAME;
			
			//스크립트 출력
			if(bIsPrint){
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+20)){
					pageSkip(10);
					getScriptFromheader(false, true);	//반복 헤더 호출
				}
				
				//스크립트 출력
				writeScriptloop();
				
				//다음 밴드 출력 위치 지정
				nYCurPos=nYCurPos+20;
			}
			
			bIsFirst=false;
		}//while end
		
	}
	
	//-----스크립트 출력 함수-----
	//title 스크립트 문 출력 함수 호출
	private void writeScripttitle()
	 throws Exception{
		out.print("^PRINT(41,61,754,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,32,1)");
		out.println(sheet10_A2+"\r");
		out.print("^PRINT(41,93,754,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
	}
	
	//foot 스크립트 문 출력 함수 호출
	private void writeScriptfoot()
	 throws Exception{
		out.print("^PRINT(41,534,659,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
	}
	
	//header 스크립트 문 출력 함수 호출
	private void writeScriptheader() throws Exception{
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",43,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos)+","+(nXCurPos+43)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos+20)+","+(nXCurPos+43)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos)+","+(nXCurPos)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos)+","+(nXCurPos+43)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",43,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLBG("+(nXCurPos+43)+","+(nYCurPos)+",66,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos)+","+(nXCurPos+109)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos+20)+","+(nXCurPos+109)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos)+","+(nXCurPos+109)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos)+",66,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLBG("+(nXCurPos+109)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos)+","+(nXCurPos+164)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos+20)+","+(nXCurPos+164)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos)+","+(nXCurPos+164)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+109)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLBG("+(nXCurPos+164)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos)+","+(nXCurPos+219)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos+20)+","+(nXCurPos+219)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos)+","+(nXCurPos+219)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+164)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLBG("+(nXCurPos+219)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos)+","+(nXCurPos+274)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos+20)+","+(nXCurPos+274)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos)+","+(nXCurPos+274)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+219)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLBG("+(nXCurPos+274)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos)+","+(nXCurPos+329)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos+20)+","+(nXCurPos+329)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos)+","+(nXCurPos+329)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+274)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLBG("+(nXCurPos+329)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos)+","+(nXCurPos+384)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos+20)+","+(nXCurPos+384)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos)+","+(nXCurPos+384)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+329)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G4+"\r");
		out.println("^CELLBG("+(nXCurPos+384)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos)+","+(nXCurPos+439)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos+20)+","+(nXCurPos+439)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos)+","+(nXCurPos+439)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+384)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H4+"\r");
		out.println("^CELLBG("+(nXCurPos+439)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos)+","+(nXCurPos+494)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos+20)+","+(nXCurPos+494)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos)+","+(nXCurPos+494)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+439)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I4+"\r");
		out.println("^CELLBG("+(nXCurPos+494)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos)+","+(nXCurPos+549)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos+20)+","+(nXCurPos+549)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos)+","+(nXCurPos+549)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+494)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_J4+"\r");
		out.println("^CELLBG("+(nXCurPos+549)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos)+","+(nXCurPos+604)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos+20)+","+(nXCurPos+604)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos)+","+(nXCurPos+604)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+549)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_K4+"\r");
		out.println("^CELLBG("+(nXCurPos+604)+","+(nYCurPos)+",55,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos)+","+(nXCurPos+659)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos+20)+","+(nXCurPos+659)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos)+","+(nXCurPos+659)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+604)+","+(nYCurPos)+",55,1,8,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_L4+"\r");
		out.println("^CELLBG("+(nXCurPos+659)+","+(nYCurPos)+",95,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos)+","+(nXCurPos+754)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos+20)+","+(nXCurPos+754)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+754)+","+(nYCurPos)+","+(nXCurPos+754)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+659)+","+(nYCurPos)+",95,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_M4+"\r");
	}
	
	//loop 스크립트 문 출력 함수
	private void writeScriptloop() throws Exception{
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos)+","+(nXCurPos+43)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos+20)+","+(nXCurPos+43)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos)+","+(nYCurPos)+","+(nXCurPos)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos)+","+(nXCurPos+43)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",43,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos)+","+(nXCurPos+109)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+43)+","+(nYCurPos+20)+","+(nXCurPos+109)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos)+","+(nXCurPos+109)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.print("^PRINT("+(nXCurPos+43)+","+(nYCurPos)+",66,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos)+","+(nXCurPos+164)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+109)+","+(nYCurPos+20)+","+(nXCurPos+164)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos)+","+(nXCurPos+164)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos)+","+(nXCurPos+219)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+164)+","+(nYCurPos+20)+","+(nXCurPos+219)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos)+","+(nXCurPos+219)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos)+","+(nXCurPos+274)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+219)+","+(nYCurPos+20)+","+(nXCurPos+274)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos)+","+(nXCurPos+274)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos)+","+(nXCurPos+329)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+274)+","+(nYCurPos+20)+","+(nXCurPos+329)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos)+","+(nXCurPos+329)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos)+","+(nXCurPos+384)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+329)+","+(nYCurPos+20)+","+(nXCurPos+384)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos)+","+(nXCurPos+384)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos)+","+(nXCurPos+439)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+384)+","+(nYCurPos+20)+","+(nXCurPos+439)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos)+","+(nXCurPos+439)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos)+","+(nXCurPos+494)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+439)+","+(nYCurPos+20)+","+(nXCurPos+494)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos)+","+(nXCurPos+494)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos)+","+(nXCurPos+549)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+494)+","+(nYCurPos+20)+","+(nXCurPos+549)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos)+","+(nXCurPos+549)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos)+","+(nXCurPos+604)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+549)+","+(nYCurPos+20)+","+(nXCurPos+604)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos)+","+(nXCurPos+604)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos)+","+(nXCurPos+659)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+604)+","+(nYCurPos+20)+","+(nXCurPos+659)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos)+","+(nXCurPos+659)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos)+","+(nXCurPos+754)+","+(nYCurPos)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+659)+","+(nYCurPos+20)+","+(nXCurPos+754)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
		out.println("^LINE("+(nXCurPos+754)+","+(nYCurPos)+","+(nXCurPos+754)+","+(nYCurPos+20)+",0,RGB[0,0,0])\r");
	}
	
	//파라미터 설정 함수
	private void setParam(){
		deptcode_Param=GetB(request.getParameter("deptcode"));
		grcode_Param=GetB(request.getParameter("grcode"));
		grseq_Param=GetB(request.getParameter("grseq"));
	}
	
	//Connection 및 Statement 객체 생성 함수
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		conn_DUNET=DBManager.getConnection();
		stat_course=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}
	
	//SQL문 변수 초기화 함수
	private void initSQLConst(){
		sql_course = "SELECT course_st, course_ed, grseq_name ";
		sql_course = sql_course + "  FROM cm_grseq                        ";
		sql_course = sql_course + " WHERE 1=1                                                                     ";
		sql_course = sql_course + "   AND deptcode = '" + deptcode_Param + "'                                         ";
		sql_course = sql_course + "   AND grcode     = '" + grcode_Param + "'                                       ";
		sql_course = sql_course + "   AND grseq        = '" + grseq_Param + "'";
		sql_Query = "SELECT                                                        ";
		sql_Query = sql_Query + " 		b.name   ";
		sql_Query = sql_Query + " FROM   cm_grseq a, cm_student_offline b, cm_grcode c          ";
		sql_Query = sql_Query + " WHERE  1=1                                                    ";
		sql_Query = sql_Query + " 		AND a.deptcode	= '" + deptcode_Param + "'                              ";
		sql_Query = sql_Query + " 		AND a.grcode 	= '" + grcode_Param + "'                             ";
		sql_Query = sql_Query + " 		AND a.grseq 	= '" + grseq_Param + "'                           ";
		sql_Query = sql_Query + " 		AND a.deptcode 	=  b.deptcode                         ";
		sql_Query = sql_Query + " 		AND a.grseq 	=  b.grseq                            ";
		sql_Query = sql_Query + " 		AND a.grcode 	=  b.grcode                           ";
		sql_Query = sql_Query + " 		AND b.grcode 	=  c.grcode                           ";
		sql_Query = sql_Query + " 		AND a.on_off 	=  'F'                                ";
		sql_Query = sql_Query + " 		AND a.on_off 	=  c.on_off";
	}
	
	//UDS ResultSet 객체 생성 함수
	//-----RecordSet 객체에서 필드 값 설정 함수-----
	//ResultSet course 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcourse() throws Exception{
		course_COURSE_ST=GetB(course.getString(1));
		course_COURSE_ED=GetB(course.getString(2));
		course_GRSEQ_NAME=GetB(course.getString(3));
	}
	
	//ResultSet course 객체의 필드 값 초기화 함수
	private void setFieldInitFromcourse(){
		course_COURSE_ST="";
		course_COURSE_ED="";
		course_GRSEQ_NAME="";
	}
	
	//ResultSet Query 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery() throws Exception{
		Query_NAME=GetB(Query.getString(1));
	}
	
	//ResultSet Query 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery(){
		Query_NAME="";
	}
	
	//고정 데이터 초기화 함수
	private void initConstVarient(){
		sheet10_A6="※비고란 : 전화번호, 출결사항등 관리자가 필요한 기타 사항 입력란";
		sheet10_A4="번호";
		sheet10_B4="성명";
		sheet10_M4="비고";
	}
	
	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");
		
		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}
	
	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}
	
	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}
	
	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}
	
	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bPageAdd){
		if(bPageAdd){
			nStartPage=nMaxPage+1;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}
	
	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		
		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}
	
	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}
	
	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}
	
	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}
	
	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}
	
	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}
	
	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}
	
	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}
	
	private long COUNT(long accuCNT){
		return ++accuCNT;
	}
	
	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}
	
	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}
	
	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}
	
	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}
	
	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}
	
	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}
	
	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	
	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}
	
	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}
	
	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}
	
	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}
	
	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
