<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*,java.util.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	int[] nAutoHeight_loop=new int[13];
	String sheet10_A1;
	String sheet10_D1;
	String sheet10_A2;
	String sheet10_A3;
	String sheet10_A4;
	String sheet10_B6;
	String sheet10_A11;
	String sheet10_A13;
	String sheet10_C13;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_AWARD_LIST;		//ResultSet AWARD_LIST 객체를 생성하기 위한 Statement 객체
	private ResultSet AWARD_LIST;		//ResultSet AWARD_LIST 객체

	//-----SQL 변수 선언-----
	private String sql_AWARD_LIST;		//ResultSet AWARD_LIST 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet AWARD_LIST 객체에서 필드 값을 받는 쿼리 필드 변수
	private String AWARD_LIST_TITLE;
	private String AWARD_LIST_PERIOD;
	private String AWARD_LIST_DEPTNM;
	private String AWARD_LIST_DEPTSUB;
	private String AWARD_LIST_JIKNM;
	private String AWARD_LIST_NAME;
	private String AWARD_LIST_RNO;
	private String AWARD_LIST_YEAR;
	private String AWARD_LIST_MONTH;
	private String AWARD_LIST_DAY;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_name_Param;
	String p_userno_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(AWARD_LIST!=null) AWARD_LIST.close();
				if(stat_AWARD_LIST!=null) stat_AWARD_LIST.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(83, 98, 518, 773, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromloop(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//-----loop RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : loop
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromloop(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=633;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 궁서체
		//폰트 사이즈 : 25
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,27};

		//데이터 변수 초기화
		sheet10_A1="";
		sheet10_D1="";
		sheet10_A3="";
		sheet10_A4="";
		sheet10_B6="";

		p_name_Param = "'B104212332814'";

		//DataSet 객체 생성
		//ResultSet AWARD_LIST 객체의 생성
		if(AWARD_LIST==null){
			AWARD_LIST = stat_AWARD_LIST.executeQuery(sql_AWARD_LIST);
		}else{
			AWARD_LIST.beforeFirst();
		}

		while(AWARD_LIST.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromAWARD_LIST();	//RecordSet AWARD_LIST에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A1="  제 " + AWARD_LIST_RNO + " 호";
			sheet10_D1=AWARD_LIST_TITLE;
			sheet10_A3="  "+AWARD_LIST_DEPTNM+" "+AWARD_LIST_DEPTSUB;
			sheet10_A4="  "+AWARD_LIST_JIKNM+" "+AWARD_LIST_NAME;
			sheet10_B6= "    위 사람은 "+AWARD_LIST_TITLE + "을 수료하였으므로 이 증서를 수여합니다.            ("+AWARD_LIST_PERIOD+")";

			//Auto Size Code
			int nHeightTmp;
			nAutoHeight_loop[0]=0;
			nAutoHeight_loop[1]=0;
			nAutoHeight_loop[2]=0;
			nAutoHeight_loop[3]=0;
			nAutoHeight_loop[4]=0;
			nAutoHeight_loop[5]=0;
			nAutoHeight_loop[6]=0;
			nAutoHeight_loop[7]=0;
			nAutoHeight_loop[8]=0;
			nAutoHeight_loop[9]=0;
			nAutoHeight_loop[10]=0;
			nAutoHeight_loop[11]=0;
			nAutoHeight_loop[12]=0;
			nHeightTmp=getPrintHeight(sheet10_B6, charWidth, 25, 433, 206, nAutoHeight_loop[5]);
			nAutoHeight_loop[5]=(int)MAX((long)nAutoHeight_loop[5], (long)(nHeightTmp/4));
			nHeightTmp=nHeightTmp-nAutoHeight_loop[5];
			nAutoHeight_loop[6]=(int)MAX((long)nAutoHeight_loop[6], (long)(nHeightTmp/3));
			nHeightTmp=nHeightTmp-nAutoHeight_loop[6];
			nAutoHeight_loop[7]=(int)MAX((long)nAutoHeight_loop[7], (long)(nHeightTmp/2));
			nHeightTmp=nHeightTmp-nAutoHeight_loop[7];
			nAutoHeight_loop[8]=(int)MAX((long)nAutoHeight_loop[8], (long)nHeightTmp);
			nAutoHeight_loop[0]=nAutoHeight_loop[0]+40;
			nAutoHeight_loop[1]=nAutoHeight_loop[0]+nAutoHeight_loop[1]+98;
			nAutoHeight_loop[2]=nAutoHeight_loop[1]+nAutoHeight_loop[2]+25;
			nAutoHeight_loop[3]=nAutoHeight_loop[2]+nAutoHeight_loop[3]+25;
			nAutoHeight_loop[4]=nAutoHeight_loop[3]+nAutoHeight_loop[4]+54;
			nAutoHeight_loop[5]=nAutoHeight_loop[4]+nAutoHeight_loop[5]+40;
			nAutoHeight_loop[6]=nAutoHeight_loop[5]+nAutoHeight_loop[6]+40;
			nAutoHeight_loop[7]=nAutoHeight_loop[6]+nAutoHeight_loop[7]+40;
			nAutoHeight_loop[8]=nAutoHeight_loop[7]+nAutoHeight_loop[8]+86;
			nAutoHeight_loop[9]=nAutoHeight_loop[8]+nAutoHeight_loop[9]+20;
			nAutoHeight_loop[10]=nAutoHeight_loop[9]+nAutoHeight_loop[10]+30;
			nAutoHeight_loop[11]=nAutoHeight_loop[10]+nAutoHeight_loop[11]+90;
			nAutoHeight_loop[12]=nAutoHeight_loop[11]+nAutoHeight_loop[12]+45;
			nBandHeight=nAutoHeight_loop[12];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptloop();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----loop 스크립트 문 출력 함수----
	private void writeScriptloop( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",433,0,18,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[0])+",0)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+nAutoHeight_loop[0])+",433,1,48,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[1]-nAutoHeight_loop[0])+",1)");
		out.println(sheet10_A2+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+nAutoHeight_loop[1])+",433,2,16,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[2]-nAutoHeight_loop[1])+",1)");
		out.println(sheet10_A3+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+nAutoHeight_loop[2])+",433,2,16,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[3]-nAutoHeight_loop[2])+",1)");
		out.println(sheet10_A4+"\r");
		out.print("^PRINT("+(nXCurPos+11)+","+(nYCurPos+nAutoHeight_loop[4])+",428,0,25,0/,궁서체,RGB[0,0,0],BOLD, , ,XL,"+(nAutoHeight_loop[8]-nAutoHeight_loop[4])+",0)");
		out.println(sheet10_B6+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+nAutoHeight_loop[9])+",433,1,16,3/0,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[10]-nAutoHeight_loop[9])+",1)");
		out.println(sheet10_A11+"\r");
		out.print("^PRINT("+(nXCurPos-25)+","+(nYCurPos+nAutoHeight_loop[11])+",342-25,2,20,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[12]-nAutoHeight_loop[11])+",1)");
		out.println(sheet10_A13+"\r");
		out.print("^PRINT("+(nXCurPos+342-20)+","+(nYCurPos+nAutoHeight_loop[11])+",91-20,0,28,0/,궁서체,RGB[0,0,0],BOLD, , ,NONE,"+(nAutoHeight_loop[12]-nAutoHeight_loop[11])+",1)");
		out.println(sheet10_C13+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_name_Param=toKor(GetB(request.getParameter("p_name")));
		p_userno_Param=toKor(GetB(request.getParameter("p_userno")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_AWARD_LIST=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_AWARD_LIST = "SELECT SUBSTR(B.GRSEQ,1,4) ||'년도 ' || decode(substr('" + p_grseq_Param + "',5,2), '01', decode((select count(*) from tb_grseq where grcode=A.grcode and grseq like substr('" + p_grseq_Param + "', 1,4) ||'__' and use_yn='Y'), 0, null, 1, null, '제' || to_number(SUBSTR(A.grseq, 5,2)) ||'기 ' ),'제' || to_number(SUBSTR(A.grseq, 5,2)) ||'기 ') || SEARCHGRCODENM(A.GRCODE,A.GRSEQ) AS TITLE ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , TO_CHAR(B.STARTED, 'YYYY.MM.DD')  || ' ~ ' || TO_CHAR(B.ENDDATE,'MM.DD') AS PERIOD ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , SEARCHDEPTNM(A.RDEPT) AS DEPTNM ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , A.RDEPTSUB AS DEPTSUB ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , SEARCHJIKNM(A.RJIK) AS JIKNM ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , A.RNAME NAME ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , A.RNO ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , to_char(b.enddate,'yyyy') year ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , to_char(b.enddate,'mm') month ";
		sql_AWARD_LIST = sql_AWARD_LIST + "     , to_char(b.enddate,'dd') day ";
		sql_AWARD_LIST = sql_AWARD_LIST + "FROM TB_GRRESULT A, TB_GRSEQ B, TB_MEMBER C ";
		sql_AWARD_LIST = sql_AWARD_LIST + "WHERE A.GRCODE = B.GRCODE ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND A.GRSEQ    = B.GRSEQ ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND A.USERNO   = C.USERNO ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND A.GRCODE   = '" + p_grcode_Param + "' ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND A.GRSEQ    = '" + p_grseq_Param + "' ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND A.RNO IS NOT NULL ";
		sql_AWARD_LIST = sql_AWARD_LIST + "AND decode('" + p_userno_Param + "', null, A.userno, '', A.userno, '" + p_userno_Param + "') like '%' || A.userno || '%' ";
		sql_AWARD_LIST = sql_AWARD_LIST + "ORDER BY A.RNO";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet AWARD_LIST 객체에서 필드 값 설정 함수
	private void setFieldVariableFromAWARD_LIST() throws Exception{
		AWARD_LIST_TITLE=GetB(AWARD_LIST.getString(1));
		AWARD_LIST_PERIOD=GetB(AWARD_LIST.getString(2));
		AWARD_LIST_DEPTNM=GetB(AWARD_LIST.getString(3));
		AWARD_LIST_DEPTSUB=GetB(AWARD_LIST.getString(4));
		AWARD_LIST_JIKNM=GetB(AWARD_LIST.getString(5));
		AWARD_LIST_NAME=GetB(AWARD_LIST.getString(6));
		AWARD_LIST_RNO=GetB(AWARD_LIST.getString(7));
		AWARD_LIST_YEAR=GetB(AWARD_LIST.getString(8));
		AWARD_LIST_MONTH=GetB(AWARD_LIST.getString(9));
		AWARD_LIST_DAY=GetB(AWARD_LIST.getString(10));
	}

	//ResultSet AWARD_LIST 객체의 필드 값 초기화 함수
	private void setFieldInitFromAWARD_LIST(){
		AWARD_LIST_TITLE="";
		AWARD_LIST_PERIOD="";
		AWARD_LIST_DEPTNM="";
		AWARD_LIST_DEPTSUB="";
		AWARD_LIST_JIKNM="";
		AWARD_LIST_NAME="";
		AWARD_LIST_RNO="";
		AWARD_LIST_YEAR="";
		AWARD_LIST_MONTH="";
		AWARD_LIST_DAY="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A2="수  료  증";
		sheet10_A11="" + toDate() + "";
		sheet10_A13="인천광역시지방공무원교육원장";
		sheet10_C13="" + p_name_Param + "";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
