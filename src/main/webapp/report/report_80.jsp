<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_H2;
	long sheet10_J2;
	long sheet10_K2;
	String sheet10_A5;
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_C3;
	String sheet10_D3;
	String sheet10_E3;
	String sheet10_F3;
	String sheet10_G3;
	String sheet10_H3;
	String sheet10_I3;
	long sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_G4;
	String sheet10_H4;
	String sheet10_I4;
	String sheet20_A2;
	String sheet20_B2;
	String sheet20_C2;
	String sheet20_D2;
	String sheet20_E2;
	String sheet20_F2;
	String sheet20_A3;
	String sheet20_B3;
	String sheet20_C3;
	String sheet20_D3;
	String sheet20_E3;
	String sheet20_F3;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_RT;		//ResultSet RT 객체를 생성하기 위한 Statement 객체
	private ResultSet RT;		//ResultSet RT 객체
	private java.sql.Statement stat_tot_count;		//ResultSet tot_count 객체를 생성하기 위한 Statement 객체
	private ResultSet tot_count;		//ResultSet tot_count 객체
	private java.sql.Statement stat_part1;		//ResultSet part1 객체를 생성하기 위한 Statement 객체
	private ResultSet part1;		//ResultSet part1 객체
	private java.sql.Statement stat_part2;		//ResultSet part2 객체를 생성하기 위한 Statement 객체
	private ResultSet part2;		//ResultSet part2 객체

	//-----SQL 변수 선언-----
	private String sql_RT;		//ResultSet RT 객체를 생성하기 위한 쿼리문 저장
	private String sql_tot_count;		//ResultSet tot_count 객체를 생성하기 위한 쿼리문 저장
	private String sql_part1;		//ResultSet part1 객체를 생성하기 위한 쿼리문 저장
	private String sql_part2;		//ResultSet part2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet RT 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RT_GRCODE;
	private String RT_GRSEQ;
	private String RT_SUBJ;
	private String RT_GRCODENM;
	private String RT_LECNM;
	private String RT_STR_DATE;
	private String RT_END_DATE;
	private double RT_TDATE;
	private double RT_TTIME;
	private double RT_EDUINWON;
	private String RT_TUSERNO;
	private String RT_TGUBUN;
	private String RT_NAME;
	private String RT_HOME_TEL;
	private String RT_JIKWI;
	private String RT_TPOSITION;

	//ResultSet tot_count 객체에서 필드 값을 받는 쿼리 필드 변수
	private double tot_count_TOT_COUNT;

	//ResultSet part1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String part1_TCNT_SEL1;
	private String part1_TCNT_SEL2;
	private String part1_T_TOTAL_2;

	//ResultSet part2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String part2_TCNT1;
	private String part2_TCNT2;
	private String part2_T_TOTAL;

	//파라미터 변수 선언
	String p_year_Param;
	String p_s_date_Param;
	String p_sort_Param;
	String p_e_date_Param;
	String p_grcode_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(part2!=null) part2.close();
				if(stat_part2!=null) stat_part2.close();
				if(part1!=null) part1.close();
				if(stat_part1!=null) stat_part1.close();
				if(tot_count!=null) tot_count.close();
				if(stat_tot_count!=null) stat_tot_count.close();
				if(RT!=null) RT.close();
				if(stat_RT!=null) stat_RT.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(24, 104, 818, 537, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromheader(true, true);    //머리글 밴드 호출
		getScriptFromfooter(true, true);    //바닥글 밴드 호출
		getScriptFrommaster(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(24, 104, 818, 537, false, false);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----header HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet tot_count 객체의 생성
			if(tot_count==null){
				tot_count = stat_tot_count.executeQuery(sql_tot_count);
			}else{
				tot_count.beforeFirst();
			}

			//데이터 fetch
			if(tot_count.next()){
				setFieldVariableFromtot_count();	//ResultSet tot_count에서 필드 값 설정
			}else{
				setFieldInitFromtot_count();	//ResultSet tot_count의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_H2="";
			sheet10_J2=0L;
			sheet10_K2=0L;

			//데이터 변수 할당
			sheet10_H2= "총계 : " + (long)tot_count_TOT_COUNT+ "명";
			sheet10_J2= 1 + (long)tot_count_TOT_COUNT;
			sheet10_K2=(long)tot_count_TOT_COUNT;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptheader();
		}   //end if(bIsPrint)
	}

	//----footer FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : footer
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfooter(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfooter();
		}   //end if(bIsPrint)
	}

	//----masterHeader RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : masterHeader
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrommasterHeader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptmasterHeader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----master RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : master
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrommaster(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A4=0L;
		sheet10_B4="";
		sheet10_C4="";
		sheet10_D4="";
		sheet10_E4="";
		sheet10_F4="";
		sheet10_G4="";
		sheet10_H4="";
		sheet10_I4="";

		long rowCount = 0;

		//DataSet 객체 생성
		//ResultSet RT 객체의 생성
		if(RT==null){
			RT = stat_RT.executeQuery(sql_RT);
		}else{
			RT.beforeFirst();
		}

		while(RT.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRT();	//RecordSet RT에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFrommasterHeader(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			/*
			sheet10_A4=COUNT(sheet10_A4);
			*/
			rowCount = COUNT(rowCount);

			sheet10_A4= sheet10_J2 - rowCount ;
			sheet10_B4=RT_GRCODENM;
			sheet10_C4=RT_LECNM;
			sheet10_D4=RT_GRSEQ;
			sheet10_E4=RT_NAME;
			sheet10_F4=RT_TGUBUN;
			sheet10_G4=RT_TPOSITION;
			sheet10_H4=RT_JIKWI;
			sheet10_I4=RT_HOME_TEL;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrommasterHeader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptmaster();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----part VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : part
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=70;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet part1 객체의 생성
			if(part1==null){
				part1 = stat_part1.executeQuery(sql_part1);
			}else{
				part1.beforeFirst();
			}
			//ResultSet part2 객체의 생성
			if(part2==null){
				part2 = stat_part2.executeQuery(sql_part2);
			}else{
				part2.beforeFirst();
			}

			//데이터 fetch
			if(part1.next()){
				setFieldVariableFrompart1();	//ResultSet part1에서 필드 값 설정
			}else{
				setFieldInitFrompart1();	//ResultSet part1의 필드 값 초기화
			}
			if(part2.next()){
				setFieldVariableFrompart2();	//ResultSet part2에서 필드 값 설정
			}else{
				setFieldInitFrompart2();	//ResultSet part2의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_B2="";
			sheet20_D2="";
			sheet20_F2="";
			sheet20_B3="";
			sheet20_D3="";
			sheet20_F3="";

			//데이터 변수 할당
			sheet20_B2=part1_T_TOTAL_2;
			sheet20_D2=part1_TCNT_SEL1;
			sheet20_F2=part1_TCNT_SEL2;
			sheet20_B3=part2_T_TOTAL;
			sheet20_D3=part2_TCNT1;
			sheet20_F3=part2_TCNT2;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(24,41,793,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT(24,79,337,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A2+"\r");
		out.print("^PRINT(639,79,178,2,11,0/,돋움체,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_H2+"\r");
	}

	//----footer 스크립트 문 출력 함수----
	private void writeScriptfooter( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(24,537,793,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A5+"\r");
	}

	//----masterHeader 스크립트 문 출력 함수----
	private void writeScriptmasterHeader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",33,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",33,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLBG("+(nXCurPos+33)+","+(nYCurPos)+",113,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+33)+","+(nYCurPos)+",113,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+146)+","+(nYCurPos)+",191,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+146)+","+(nYCurPos)+",191,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C3+"\r");
		out.println("^CELLBG("+(nXCurPos+337)+","+(nYCurPos)+",60,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+337)+","+(nYCurPos)+",60,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+397)+","+(nYCurPos)+",60,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos)+",60,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+457)+","+(nYCurPos)+",72,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+457)+","+(nYCurPos)+",72,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+529)+","+(nYCurPos)+",86,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+529)+","+(nYCurPos)+",86,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G3+"\r");
		out.println("^CELLBG("+(nXCurPos+615)+","+(nYCurPos)+",86,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+615)+","+(nYCurPos)+",86,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H3+"\r");
		out.println("^CELLBG("+(nXCurPos+701)+","+(nYCurPos)+",92,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+701)+","+(nYCurPos)+",92,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I3+"\r");
	}

	//----master 스크립트 문 출력 함수----
	private void writeScriptmaster( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",33,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",33,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,XL,20,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+33)+","+(nYCurPos)+",113,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+33)+","+(nYCurPos)+",113,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+146)+","+(nYCurPos)+",191,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+146)+","+(nYCurPos)+",191,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+337)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+337)+","+(nYCurPos)+",60,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos)+",60,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+457)+","+(nYCurPos)+",72,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+457)+","+(nYCurPos)+",72,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+529)+","+(nYCurPos)+",86,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G4+"\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+615)+","+(nYCurPos)+",86,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+615)+","+(nYCurPos)+",86,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_H4+"\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+701)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+701)+","+(nYCurPos)+",92,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_I4+"\r");
	}

	//----part 스크립트 문 출력 함수----
	private void writeScriptpart( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+15)+",133,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+15)+",133,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+15)+",133,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+15)+",133,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+15)+",133,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+15)+",133,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A2+"\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+133)+","+(nYCurPos+15)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B2+"\r");
		out.println("^CELLBG("+(nXCurPos+265)+","+(nYCurPos+15)+",132,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos+15)+",132,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_C2+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+15)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D2+"\r");
		out.println("^CELLBG("+(nXCurPos+529)+","+(nYCurPos+15)+",132,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+529)+","+(nYCurPos+15)+",132,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E2+"\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+15)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+661)+","+(nYCurPos+15)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F2+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+35)+",133,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",133,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",133,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",133,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+35)+",133,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+35)+",133,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_A3+"\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+133)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+133)+","+(nYCurPos+35)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+265)+","+(nYCurPos+35)+",132,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos+35)+",132,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_C3+"\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+397)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+397)+","+(nYCurPos+35)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+529)+","+(nYCurPos+35)+",132,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+529)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+529)+","+(nYCurPos+35)+",132,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_E3+"\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+661)+","+(nYCurPos+35)+",132,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+661)+","+(nYCurPos+35)+",132,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_F3+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_year_Param=GetB(request.getParameter("p_year"));
		p_s_date_Param=GetB(request.getParameter("p_s_date"));
		p_sort_Param=GetB(request.getParameter("p_sort"));
		p_e_date_Param=GetB(request.getParameter("p_e_date"));
		p_grcode_Param=GetB(request.getParameter("p_grcode"));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_RT=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_tot_count=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_part1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_part2=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_RT = "SELECT  ";
		sql_RT = sql_RT + "a.grcode as grcode ";
		sql_RT = sql_RT + ",a.grseq as grseq ";
		sql_RT = sql_RT + ",a.subj as subj ";
		sql_RT = sql_RT + ",a.grcodenm as grcodenm ";
		sql_RT = sql_RT + ",a.lecnm as lecnm ";
		sql_RT = sql_RT + ",a.str_date as str_date ";
		sql_RT = sql_RT + ",a.end_date as end_date ";
		sql_RT = sql_RT + ",a.tdate as tdate ";
		sql_RT = sql_RT + ",a.ttime as ttime ";
		sql_RT = sql_RT + ",a.eduinwon as eduinwon ";
		sql_RT = sql_RT + ",a.tuserno as tuserno ";
		sql_RT = sql_RT + ",decode(a.tgubun,1,'주강사','보조강사') as tgubun ";
		sql_RT = sql_RT + ",b.name as name ";
		sql_RT = sql_RT + ",b.home_tel as home_tel ";
		sql_RT = sql_RT + ",b.jikwi as jikwi ";
		sql_RT = sql_RT + ",c.tposition as tposition ";
		sql_RT = sql_RT + "FROM  ";
		sql_RT = sql_RT + "TV_TUTOR_HISTORY a, TB_MEMBER b, TB_TUTOR c ";
		sql_RT = sql_RT + "WHERE  ";
		sql_RT = sql_RT + "a.tuserno = b.userno  ";
		sql_RT = sql_RT + "AND a.tuserno = c.userno ";
		sql_RT = sql_RT + "AND decode('" + p_year_Param + "',null,1,'',1,substr(a.grseq,1,4),1,0 ) = 1 ";
		sql_RT = sql_RT + "AND to_date(a.str_date,'YYYY.MM.DD')  ";
		sql_RT = sql_RT + "BETWEEN  ";
		sql_RT = sql_RT + "decode('" + p_s_date_Param + "',null,to_date('19000101','YYYY.MM.DD'),'',to_date('19000101','YYYY.MM.DD'),to_date('" + p_s_date_Param + "','YYYY.MM.DD')) ";
		sql_RT = sql_RT + "AND  ";
		sql_RT = sql_RT + "decode('" + p_e_date_Param + "',null,to_date('30000101','YYYY.MM.DD'),'',to_date('30000101','YYYY.MM.DD'),to_date('" + p_e_date_Param + "','YYYY.MM.DD')) ";
		sql_RT = sql_RT + "AND  ";
		sql_RT = sql_RT + "decode('" + p_grcode_Param + "',null,1,'',1,a.grcode,1,0) = 1 ";
		sql_RT = sql_RT + "ORDER BY ";
		sql_RT = sql_RT + "decode(" + p_sort_Param + ",1,grcodenm,2,name,lecnm)";
		sql_tot_count = "SELECT COUNT(*) AS tot_count ";
		sql_tot_count = sql_tot_count + "FROM ( ";
		sql_tot_count = sql_tot_count + "SELECT  ";
		sql_tot_count = sql_tot_count + "a.grcode as grcode ";
		sql_tot_count = sql_tot_count + ",a.grseq as grseq ";
		sql_tot_count = sql_tot_count + ",a.subj as subj ";
		sql_tot_count = sql_tot_count + ",a.grcodenm as grcodenm ";
		sql_tot_count = sql_tot_count + ",a.lecnm as lecnm ";
		sql_tot_count = sql_tot_count + ",a.str_date as str_date ";
		sql_tot_count = sql_tot_count + ",a.end_date as end_date ";
		sql_tot_count = sql_tot_count + ",a.tdate as tdate ";
		sql_tot_count = sql_tot_count + ",a.ttime as ttime ";
		sql_tot_count = sql_tot_count + ",a.eduinwon as eduinwon ";
		sql_tot_count = sql_tot_count + ",a.tuserno as tuserno ";
		sql_tot_count = sql_tot_count + ",decode(a.tgubun,1,'주강사','보조강사') as tgubun ";
		sql_tot_count = sql_tot_count + ",b.name as name ";
		sql_tot_count = sql_tot_count + ",b.home_tel as home_tel ";
		sql_tot_count = sql_tot_count + ",b.jikwi as jikwi ";
		sql_tot_count = sql_tot_count + ",c.tposition as tposition ";
		sql_tot_count = sql_tot_count + "FROM  ";
		sql_tot_count = sql_tot_count + "TV_TUTOR_HISTORY a, TB_MEMBER b, TB_TUTOR c ";
		sql_tot_count = sql_tot_count + "WHERE  ";
		sql_tot_count = sql_tot_count + "a.tuserno = b.userno  ";
		sql_tot_count = sql_tot_count + "AND a.tuserno = c.userno ";
		sql_tot_count = sql_tot_count + "AND decode('" + p_year_Param + "',null,1,'',1,substr(a.grseq,1,4),1,0 ) = 1 ";
		sql_tot_count = sql_tot_count + "AND to_date(a.str_date,'YYYY.MM.DD')  ";
		sql_tot_count = sql_tot_count + "BETWEEN  ";
		sql_tot_count = sql_tot_count + "decode('" + p_s_date_Param + "',null,to_date('19000101','YYYY.MM.DD'),'',to_date('19000101','YYYY.MM.DD'),to_date('" + p_s_date_Param + "','YYYY.MM.DD')) ";
		sql_tot_count = sql_tot_count + "AND  ";
		sql_tot_count = sql_tot_count + "decode('" + p_e_date_Param + "',null,to_date('30000101','YYYY.MM.DD'),'',to_date('30000101','YYYY.MM.DD'),to_date('" + p_e_date_Param + "','YYYY.MM.DD')) ";
		sql_tot_count = sql_tot_count + "AND  ";
		sql_tot_count = sql_tot_count + "decode('" + p_grcode_Param + "',null,1,'',1,a.grcode,1,0) = 1 ";
		sql_tot_count = sql_tot_count + "ORDER BY ";
		sql_tot_count = sql_tot_count + "decode(" + p_sort_Param + ",1,grcodenm,2,name,lecnm) )";
		sql_part1 = "SELECT  ";
		sql_part1 = sql_part1 + "nvl(sum(decode(tgubun,1,1,0)),0) || '명'  AS tcnt_sel1, ";
		sql_part1 = sql_part1 + "nvl(sum(decode(tgubun,1,0,1)),0) || '명' AS tcnt_sel2, ";
		sql_part1 = sql_part1 + "count(tgubun) || '명' as t_total_2 ";
		sql_part1 = sql_part1 + "from  ";
		sql_part1 = sql_part1 + "TV_TUTOR_HISTORY ";
		sql_part1 = sql_part1 + "where decode(" + p_grcode_Param + ",null,1,'',1,grcode,1,0) = 1";
		sql_part2 = "SELECT  ";
		sql_part2 = sql_part2 + "nvl(sum(decode(tgubun,1,1,0)),0) || '명' AS tcnt1, ";
		sql_part2 = sql_part2 + "nvl(sum(decode(tgubun,1,0,1)),0) || '명' AS tcnt2, ";
		sql_part2 = sql_part2 + "count(tgubun) || '명' as t_total ";
		sql_part2 = sql_part2 + "from  ";
		sql_part2 = sql_part2 + "TV_TUTOR_HISTORY";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet RT 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRT() throws Exception{
		RT_GRCODE=GetB(RT.getString(1));
		RT_GRSEQ=GetB(RT.getString(2));
		RT_SUBJ=GetB(RT.getString(3));
		RT_GRCODENM=GetB(RT.getString(4));
		RT_LECNM=GetB(RT.getString(5));
		RT_STR_DATE=GetB(RT.getString(6));
		RT_END_DATE=GetB(RT.getString(7));
		RT_TDATE=RT.getDouble(8);
		RT_TTIME=RT.getDouble(9);
		RT_EDUINWON=RT.getDouble(10);
		RT_TUSERNO=GetB(RT.getString(11));
		RT_TGUBUN=GetB(RT.getString(12));
		RT_NAME=GetB(RT.getString(13));
		RT_HOME_TEL=GetB(RT.getString(14));
		RT_JIKWI=GetB(RT.getString(15));
		RT_TPOSITION=GetB(RT.getString(16));
	}

	//ResultSet RT 객체의 필드 값 초기화 함수
	private void setFieldInitFromRT(){
		RT_GRCODE="";
		RT_GRSEQ="";
		RT_SUBJ="";
		RT_GRCODENM="";
		RT_LECNM="";
		RT_STR_DATE="";
		RT_END_DATE="";
		RT_TDATE=0;
		RT_TTIME=0;
		RT_EDUINWON=0;
		RT_TUSERNO="";
		RT_TGUBUN="";
		RT_NAME="";
		RT_HOME_TEL="";
		RT_JIKWI="";
		RT_TPOSITION="";
	}

	//ResultSet tot_count 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtot_count() throws Exception{
		tot_count_TOT_COUNT=tot_count.getDouble(1);
	}

	//ResultSet tot_count 객체의 필드 값 초기화 함수
	private void setFieldInitFromtot_count(){
		tot_count_TOT_COUNT=0;
	}

	//ResultSet part1 객체에서 필드 값 설정 함수
	private void setFieldVariableFrompart1() throws Exception{
		part1_TCNT_SEL1=GetB(part1.getString(1));
		part1_TCNT_SEL2=GetB(part1.getString(2));
		part1_T_TOTAL_2=GetB(part1.getString(3));
	}

	//ResultSet part1 객체의 필드 값 초기화 함수
	private void setFieldInitFrompart1(){
		part1_TCNT_SEL1="";
		part1_TCNT_SEL2="";
		part1_T_TOTAL_2="";
	}

	//ResultSet part2 객체에서 필드 값 설정 함수
	private void setFieldVariableFrompart2() throws Exception{
		part2_TCNT1=GetB(part2.getString(1));
		part2_TCNT2=GetB(part2.getString(2));
		part2_T_TOTAL=GetB(part2.getString(3));
	}

	//ResultSet part2 객체의 필드 값 초기화 함수
	private void setFieldInitFrompart2(){
		part2_TCNT1="";
		part2_TCNT2="";
		part2_T_TOTAL="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="출 강 강 사 명 단";
		sheet10_A2="기관명 : 인천공무원교육원";
		sheet10_A5="#PAGE / #TOTALPAGE";
		sheet10_A3="연번";
		sheet10_B3="과정명";
		sheet10_C3="교과목";
		sheet10_D3="기수";
		sheet10_E3="강사명";
		sheet10_F3="강사구분";
		sheet10_G3="강사소속";
		sheet10_H3="직위";
		sheet10_I3="전화번호";
		sheet20_A2="과정별소계";
		sheet20_C2="주강사";
		sheet20_E2="보조강사";
		sheet20_A3="전체총계";
		sheet20_C3="주강사";
		sheet20_E3="보조강사";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromheader(false, true);		//머리글 밴드 호출
			getScriptFromfooter(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
