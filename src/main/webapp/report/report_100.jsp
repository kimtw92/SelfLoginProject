<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	int[] nAutoHeight_list1=new int[1];
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_C3;
	String sheet10_D3;
	String sheet10_E3;
	String sheet10_F3;
	String sheet10_G3;
	String sheet10_H3;
	String sheet10_I3;
	String sheet10_J3;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_G4;
	double sheet10_H4;
	String sheet10_I4;
	String sheet10_J4;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_tb_list;		//ResultSet tb_list 객체를 생성하기 위한 Statement 객체
	private ResultSet tb_list;		//ResultSet tb_list 객체

	//-----SQL 변수 선언-----
	private String sql_tb_list;		//ResultSet tb_list 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet tb_list 객체에서 필드 값을 받는 쿼리 필드 변수
	private String tb_list_RESNO;
	private String tb_list_RSCHOOL;
	private String tb_list_USERNO;
	private String tb_list_RNAME;
	private String tb_list_RDEPTNM;
	private String tb_list_BIRTHDATE;
	private String tb_list_RDEPTSUB;
	private String tb_list_RJIKNM;
	private String tb_list_GRSEQ;
	private String tb_list_DD_DATE;
	private double tb_list_SEQNO;
	private double tb_list_PACCEPT;
	private String tb_list_RGRAYN;
	private String tb_list_TXT_RGRAYN;
	private String tb_list_RNO;
	private double tb_list_EDUNO;
	private double tb_list_TOTNO;
	private String tb_list_STARTED1;
	private String tb_list_ENDDATE1;
	private String tb_list_USER_ID;

	//파라미터 변수 선언
	String p_commGrcode_Param;
	String p_commGrseq_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(tb_list!=null) tb_list.close();
				if(stat_tb_list!=null) stat_tb_list.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(56, 70, 539, 771, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompage(true, true);    //Void 밴드 호출
		getScriptFromVoidBand100(true, true);    //Void 밴드 호출
		getScriptFromlist1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----page VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : page
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompage(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=29;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpage();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----VoidBand100 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : VoidBand100
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromVoidBand100(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----list_h RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : list_h
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlist_h(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptlist_h();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----list1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : list1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 굴림체
		//폰트 사이즈 : 9
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};

		//데이터 변수 초기화
		sheet10_A4="";
		sheet10_B4="";
		sheet10_C4="";
		sheet10_D4="";
		sheet10_E4="";
		sheet10_F4="";
		sheet10_G4="";
		sheet10_H4=0;
		sheet10_I4="";
		sheet10_J4="";

		//DataSet 객체 생성
		//ResultSet tb_list 객체의 생성
		if(tb_list==null){
			tb_list = stat_tb_list.executeQuery(sql_tb_list);
		}else{
			tb_list.beforeFirst();
		}

		while(tb_list.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromtb_list();	//RecordSet tb_list에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromlist_h(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A4=tb_list_RNAME;
			sheet10_B4=tb_list_BIRTHDATE;
			sheet10_C4=tb_list_USER_ID;
			sheet10_D4=tb_list_RDEPTNM;
			sheet10_E4=tb_list_RDEPTSUB;
			sheet10_F4=tb_list_RJIKNM;
			sheet10_G4=tb_list_DD_DATE;
			sheet10_H4=tb_list_EDUNO;
			sheet10_I4=tb_list_TXT_RGRAYN;
			sheet10_J4=tb_list_RNO;

			//Auto Size Code
			nAutoHeight_list1[0]=0;
			nAutoHeight_list1[0]=getPrintHeight(sheet10_A4, charWidth, 9, 35, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_B4, charWidth, 9, 50, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_C4, charWidth, 9, 60, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_D4, charWidth, 9, 60, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_E4, charWidth, 9, 60, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_F4, charWidth, 9, 60, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_G4, charWidth, 9, 60, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_I4, charWidth, 9, 30, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=getPrintHeight(sheet10_J4, charWidth, 9, 40, 20, nAutoHeight_list1[0]);
			nAutoHeight_list1[0]=nAutoHeight_list1[0]+20;
			nBandHeight=nAutoHeight_list1[0];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptlist1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----page 스크립트 문 출력 함수----
	private void writeScriptpage( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",480,1,20,0/,굴림체,RGB[0,0,255],BOLD, , ,NONE,29,1)");
		out.println(sheet10_A1+"\r");
	}

	//----list_h 스크립트 문 출력 함수----
	private void writeScriptlist_h( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",35,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",35,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLBG("+(nXCurPos+35)+","+(nYCurPos)+",50,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+35)+","+(nYCurPos)+",50,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B3+"\r");
		out.println("^CELLBG("+(nXCurPos+85)+","+(nYCurPos)+",60,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+85)+","+(nYCurPos)+",60,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_C3+"\r");
		out.println("^CELLBG("+(nXCurPos+145)+","+(nYCurPos)+",60,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+145)+","+(nYCurPos)+",60,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_D3+"\r");
		out.println("^CELLBG("+(nXCurPos+205)+","+(nYCurPos)+",60,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+205)+","+(nYCurPos)+",60,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_E3+"\r");
		out.println("^CELLBG("+(nXCurPos+265)+","+(nYCurPos)+",60,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos)+",60,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_F3+"\r");
		out.println("^CELLBG("+(nXCurPos+325)+","+(nYCurPos)+",60,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+325)+","+(nYCurPos)+",60,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_G3+"\r");
		out.println("^CELLBG("+(nXCurPos+385)+","+(nYCurPos)+",25,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+385)+","+(nYCurPos)+",25,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_H3+"\r");
		out.println("^CELLBG("+(nXCurPos+410)+","+(nYCurPos)+",30,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+410)+","+(nYCurPos)+",30,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_I3+"\r");
		out.println("^CELLBG("+(nXCurPos+440)+","+(nYCurPos)+",40,20,1,RGB[123,123,192],RGB[123,123,192],0)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+440)+","+(nYCurPos)+",40,1,10,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_J3+"\r");
	}

	//----list1 스크립트 문 출력 함수----
	private void writeScriptlist1( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",35,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",35,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+35)+","+(nYCurPos)+",50,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+35)+","+(nYCurPos)+",50,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+85)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+85)+","+(nYCurPos)+",60,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+145)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+145)+","+(nYCurPos)+",60,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+205)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+205)+","+(nYCurPos)+",60,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+265)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+265)+","+(nYCurPos)+",60,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+325)+","+(nYCurPos)+",60,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+325)+","+(nYCurPos)+",60,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_G4+"\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+385)+","+(nYCurPos)+",25,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+385)+","+(nYCurPos)+",25,1,9,1/0/0,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_H4+"\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+410)+","+(nYCurPos)+",30,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+410)+","+(nYCurPos)+",30,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_I4+"\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+440)+","+(nYCurPos)+",40,"+(nAutoHeight_list1[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+440)+","+(nYCurPos)+",40,1,9,0/,굴림체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_list1[0])+",1)");
		out.println(sheet10_J4+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_commGrcode_Param=toKor(GetB(request.getParameter("p_commGrcode")));
		p_commGrseq_Param=toKor(GetB(request.getParameter("p_commGrseq")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@192.168.12.203:1521:LOTI1","inchlms","fhxl21");stat_tb_list=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_tb_list = "SELECT ";
		sql_tb_list = sql_tb_list + "                 M.RESNO, GRR.RSCHOOL, GRR.USERNO, GRR.RNAME, DP.DEPTNM RDEPTNM, M.BIRTHDATE, ";
		sql_tb_list = sql_tb_list + "                 GRR.RDEPTSUB, JK.JIKNM RJIKNM, GRR.GRSEQ, ";
		sql_tb_list = sql_tb_list + "                 TO_CHAR (GRR.STARTED, 'yyyymmdd') || '~' || TO_CHAR (GRR.ENDDATE, 'yyyymmdd') DD_DATE, GRR.SEQNO, GRR.PACCEPT, ";
		sql_tb_list = sql_tb_list + "                 GRR.RGRAYN, ";
		sql_tb_list = sql_tb_list + "                 DECODE (GRR.RGRAYN, ";
		sql_tb_list = sql_tb_list + "                            'Y', '수료', ";
		sql_tb_list = sql_tb_list + "                            'N', '미수료', ";
		sql_tb_list = sql_tb_list + "                            'X', '해당없음' ";
		sql_tb_list = sql_tb_list + "                           ) TXT_RGRAYN, ";
		sql_tb_list = sql_tb_list + "                 GRR.RNO, GRR.EDUNO, GRR.TOTNO, ";
		sql_tb_list = sql_tb_list + "                 TO_CHAR (GRR.STARTED, 'yyyy.mm.dd') STARTED1, ";
		sql_tb_list = sql_tb_list + "                 TO_CHAR (GRR.ENDDATE, 'yyyy.mm.dd') ENDDATE1 ";
		sql_tb_list = sql_tb_list + "                 , M.USER_ID ";
		sql_tb_list = sql_tb_list + "         FROM TB_GRRESULT GRR, tb_member M, TB_DEPT DP, TB_JIK JK ";
		sql_tb_list = sql_tb_list + "         WHERE GRR.USERNO = M.USERNO ";
		sql_tb_list = sql_tb_list + "                 AND GRR.GRCODE = '" + p_commGrcode_Param + "' ";
		sql_tb_list = sql_tb_list + "                 AND GRR.GRSEQ = '" + p_commGrseq_Param + "' ";
		sql_tb_list = sql_tb_list + "                 AND GRR.RDEPT = DP.DEPT(+) ";
		sql_tb_list = sql_tb_list + "                 AND GRR.RJIK = JK.JIK(+) ";
		sql_tb_list = sql_tb_list + "         ORDER BY GRR.RDEPT, GRR.RNAME";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet tb_list 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtb_list() throws Exception{
		tb_list_RESNO=GetB(tb_list.getString(1));
		tb_list_RSCHOOL=GetB(tb_list.getString(2));
		tb_list_USERNO=GetB(tb_list.getString(3));
		tb_list_RNAME=GetB(tb_list.getString(4));
		tb_list_RDEPTNM=GetB(tb_list.getString(5));
		tb_list_BIRTHDATE=GetB(tb_list.getString(6));
		tb_list_RDEPTSUB=GetB(tb_list.getString(7));
		tb_list_RJIKNM=GetB(tb_list.getString(8));
		tb_list_GRSEQ=GetB(tb_list.getString(9));
		tb_list_DD_DATE=GetB(tb_list.getString(10));
		tb_list_SEQNO=tb_list.getDouble(11);
		tb_list_PACCEPT=tb_list.getDouble(12);
		tb_list_RGRAYN=GetB(tb_list.getString(13));
		tb_list_TXT_RGRAYN=GetB(tb_list.getString(14));
		tb_list_RNO=GetB(tb_list.getString(15));
		tb_list_EDUNO=tb_list.getDouble(16);
		tb_list_TOTNO=tb_list.getDouble(17);
		tb_list_STARTED1=GetB(tb_list.getString(18));
		tb_list_ENDDATE1=GetB(tb_list.getString(19));
		tb_list_USER_ID=GetB(tb_list.getString(20));
	}

	//ResultSet tb_list 객체의 필드 값 초기화 함수
	private void setFieldInitFromtb_list(){
		tb_list_RESNO="";
		tb_list_RSCHOOL="";
		tb_list_USERNO="";
		tb_list_RNAME="";
		tb_list_RDEPTNM="";
		tb_list_BIRTHDATE="";
		tb_list_RDEPTSUB="";
		tb_list_RJIKNM="";
		tb_list_GRSEQ="";
		tb_list_DD_DATE="";
		tb_list_SEQNO=0;
		tb_list_PACCEPT=0;
		tb_list_RGRAYN="";
		tb_list_TXT_RGRAYN="";
		tb_list_RNO="";
		tb_list_EDUNO=0;
		tb_list_TOTNO=0;
		tb_list_STARTED1="";
		tb_list_ENDDATE1="";
		tb_list_USER_ID="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="기관별수료현황";
		sheet10_A3="성명";
		sheet10_B3="생년월일";
		sheet10_C3="ID";
		sheet10_D3="소속";
		sheet10_E3="부서";
		sheet10_F3="직급명";
		sheet10_G3="교육일자";
		sheet10_H3="교번";
		sheet10_I3="수료";
		sheet10_J3="수료번호";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
