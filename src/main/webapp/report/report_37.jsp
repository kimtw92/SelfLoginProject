<%
/* ### Generated by AIDesigner 3.7.1.22 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	long sheet10_A6;
	long sheet10_A7;
	long sheet10_A8;
	long sheet10_A9;
	long sheet10_A10;
	long sheet10_A11;
	long sheet10_A12;
	long sheet10_A13;
	long sheet10_A14;
	long sheet10_A15;
	String sheet10_A16;
	long sheet10_A17;
	long sheet10_A18;
	long sheet10_A19;
	long sheet10_A20;
	String sheet20_B2;
	String sheet20_B3;
	String sheet20_B4;
	String sheet20_B5;
	String sheet20_C5;
	double sheet20_B6;
	String sheet20_C6;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_Query01;		//ResultSet Query01 객체를 생성하기 위한 Statement 객체
	private ResultSet Query01;		//ResultSet Query01 객체
	private java.sql.Statement stat_Query02;		//ResultSet Query02 객체를 생성하기 위한 Statement 객체
	private ResultSet Query02;		//ResultSet Query02 객체
	private java.sql.Statement stat_Query03;		//ResultSet Query03 객체를 생성하기 위한 Statement 객체
	private ResultSet Query03;		//ResultSet Query03 객체
	private java.sql.Statement stat_Query04;		//ResultSet Query04 객체를 생성하기 위한 Statement 객체
	private ResultSet Query04;		//ResultSet Query04 객체
	private java.sql.Statement stat_Query05;		//ResultSet Query05 객체를 생성하기 위한 Statement 객체
	private ResultSet Query05;		//ResultSet Query05 객체
	private java.sql.Statement stat_Query06;		//ResultSet Query06 객체를 생성하기 위한 Statement 객체
	private ResultSet Query06;		//ResultSet Query06 객체

	//-----SQL 변수 선언-----
	private String sql_Query01;		//ResultSet Query01 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query02;		//ResultSet Query02 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query03;		//ResultSet Query03 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query04;		//ResultSet Query04 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query05;		//ResultSet Query05 객체를 생성하기 위한 쿼리문 저장
	private String sql_Query06;		//ResultSet Query06 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet Query01 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query01_NAME;
	private double Query01_CLASSNO;
	private double Query01_EDUNO;
	private String Query01_TNAME;

	//ResultSet Query02 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query02_NAME;
	private double Query02_CLASSNO;
	private double Query02_EDUNO;
	private String Query02_TNAME;

	//ResultSet Query03 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query03_NAME;
	private double Query03_CLASSNO;
	private double Query03_EDUNO;
	private String Query03_TNAME;

	//ResultSet Query04 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query04_NAME;
	private double Query04_CLASSNO;
	private double Query04_EDUNO;
	private String Query04_TNAME;

	//ResultSet Query05 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query05_NAME;
	private double Query05_CLASSNO;
	private double Query05_EDUNO;
	private String Query05_TNAME;

	//ResultSet Query06 객체에서 필드 값을 받는 쿼리 필드 변수
	private String Query06_NAME;
	private double Query06_CLASSNO;
	private double Query06_EDUNO;
	private String Query06_TNAME;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_subj_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1 함수 호출
			executeSheet1();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(Query06!=null) Query06.close();
				if(stat_Query06!=null) stat_Query06.close();
				if(Query05!=null) Query05.close();
				if(stat_Query05!=null) stat_Query05.close();
				if(Query04!=null) Query04.close();
				if(stat_Query04!=null) stat_Query04.close();
				if(Query03!=null) Query03.close();
				if(stat_Query03!=null) stat_Query03.close();
				if(Query02!=null) Query02.close();
				if(stat_Query02!=null) stat_Query02.close();
				if(Query01!=null) Query01.close();
				if(stat_Query01!=null) stat_Query01.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1 Start-----
	//-----폼 형식 : 절대 양식
	private void executeSheet1( ) throws Exception{
		//지역 변수 선언 및 초기화
		boolean bIsFirst;    //절대 양식에서 각 밴드 함수에 대한 최초 호출 여부
		bIsFirst=true;
		//각 반복 밴드에서 참조하는 데이터셋 객체의 현재 위치
		int []nPos_list01=new int[1];
		nPos_list01[0]=0;
		//각 반복 밴드에서 참조하는 데이터셋 객체의 필드 값 설정 함수 호출 여부 설정
		boolean []bIsLoop_list01=new boolean[1];
		bIsLoop_list01[0]=true;
		nLoopRef=1;    //참조 반복 밴드의 수 설정

		//현재 페이지 번호 설정
		nPageNum=nMaxPage+1;

		do{
			//페이지 번호 출력
			out.print("-- " + nPageNum + " PAGE --\r");

			//밴드 함수 호출
			getScriptFromtitle(bIsFirst);    //title 함수 호출
			getScriptFromheader01(bIsFirst);    //header01 함수 호출
			getScriptFromlist01(bIsFirst, nPos_list01, bIsLoop_list01);    //list01 함수 호출

			//다음 페이지 번호 설정
			nPageNum=nPageNum+1;

			//밴드 호출 인자 설정
			bIsFirst=false;
		}while(nLoopRef!=0);

		//최대 페이지 번호 설정
		nMaxPage=nPageNum-1;
	}

	//-----밴드 함수-----
	//----title VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	private void getScriptFromtitle(boolean bIsFirst) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=418;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//출력 좌표 설정
		nXCurPos=35;
		nYCurPos=41;

		//스크립트 출력 함수 호출
		writeScripttitle();
	}

	//----header01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : header01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	private void getScriptFromheader01(boolean bIsFirst) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=80;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet Query01 객체의 생성
			if(Query01==null){
				Query01 = stat_Query01.executeQuery(sql_Query01);
			}else{
				Query01.beforeFirst();
			}

			//데이터 fetch
			if(Query01.next()){
				setFieldVariableFromQuery01();	//ResultSet Query01에서 필드 값 설정
			}else{
				setFieldInitFromQuery01();	//ResultSet Query01의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_B4="";

			//데이터 변수 할당
			sheet20_B4=Query01_TNAME;
		}   //end if(bIsFirst)

		//출력 좌표 설정
		nXCurPos=35;
		nYCurPos=79;

		//스크립트 출력 함수 호출
		writeScriptheader01();
	}

	//-----list01 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : list01
	//-----밴드 종류 : 반복 밴드
	//-----bIsFirst : 쉬트 함수나 부모 반복 밴드에서 최초 호출 여부 판단
	//-----nPosDataSet : 밴드에 연결된 데이터셋의 현재 커런트 로우의 위치 자식 반복 밴드에서는 전달되지 않음
	//-----bIsLoop : 밴드에 연결된 데이터셋의 끝에 도달했는지 판단 자식 반복 밴드에서는 전달되지 않음
	private void getScriptFromlist01(boolean bIsFirst, int []nPosDataSet, boolean []bIsLoop) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		int i;    //루프 카운트 변수 선언
		int nRepeatNum=15;    //출력 Line 수

		//데이터 변수 초기화
		sheet20_B6=0;
		sheet20_C6="";

		//DataSet 객체 생성 및 커서 설정
		if(bIsFirst){
			//ResultSet Query01 객체의 생성
			if(Query01==null){
				Query01 = stat_Query01.executeQuery(sql_Query01);
			}else{
				Query01.beforeFirst();
			}
		}else if(bIsLoop[0]){
			Query01.absolute(nPosDataSet[0]);
		}

		//출력 좌표 설정
		nXCurPos=35;		//밴드 시작 X좌표 설정
		nYCurPos=159;		//밴드 시작 Y좌표 설정

		for(i=0; i<nRepeatNum; i++){   //자동으로 생성되는 반복 밴드의 루프문
			if(bIsLoop[0]){
				if(Query01.next()){   //반복 밴드의 데이터셋의 끝이 아닌 경우
					//데이터 fetch
					setFieldVariableFromQuery01();	//RecordSet Query01에서 필드 값 설정

					//데이터 변수 할당
					sheet20_B6=Query01_EDUNO;
					sheet20_C6=Query01_NAME;
				}else{   //데이터 셋의 끝에 도달한 경우
					//루프 참조 변수 설정
					bIsLoop[0]=false;
					nLoopRef=nLoopRef-1;		//루프 참조 변수 감소
				}
			}   //end if(bIsLoop)

			//스크립트 출력 함수 호출
			writeScriptlist01(bIsLoop[0]);

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;		//다음 레코드를 출력할 좌표 설정
		}   //for end

		//DataSet 커서 및 루프 참조 변수 설정
		if(bIsLoop[0]){
			if(Query01.next()){
				nPosDataSet[0]=Query01.getRow()-1;	//쉬트 반복시 접근할 데이터셋의 현재 위치 저장
			}else{
				bIsLoop[0]=false;
				nLoopRef=nLoopRef-1;		//루프 참조 변수 감소
			}
		}
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",515,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",29,80,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",29,80,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",29,80,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+38)+",29,80,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+38)+",29,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,80,1)");
		out.println(sheet10_A2+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+118)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+118)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+138)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+138)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+158)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+158)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A8+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+178)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+178)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A9+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+198)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+198)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+198)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+198)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+198)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+218)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+218)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+218)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+218)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+218)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A11+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+238)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+238)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+238)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+238)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+238)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+258)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+258)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+258)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+258)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+258)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A13+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+278)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+278)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+278)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+278)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+278)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A14+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+298)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+298)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+298)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+298)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+298)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A15+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+318)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+318)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+318)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+318)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+318)+",29,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A16+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+338)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+338)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+338)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+338)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+338)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A17+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+358)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+358)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+358)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+358)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+358)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A18+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+378)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+378)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+378)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+378)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+378)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A19+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+398)+",29,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+398)+",29,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+398)+",29,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+398)+",29,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+398)+",29,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A20+"\r");
	}

	//----header01 스크립트 문 출력 함수----
	private void writeScriptheader01( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",81,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+29)+","+(nYCurPos)+",81,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B2+"\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+20)+",81,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+20)+",81,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+20)+",81,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+20)+",81,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+29)+","+(nYCurPos+20)+",81,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B3+"\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+40)+",81,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+40)+",81,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+40)+",81,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+40)+",81,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+29)+","+(nYCurPos+40)+",81,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B4+"\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+60)+",31,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+60)+",31,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+60)+",31,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos+60)+",31,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+29)+","+(nYCurPos+60)+",31,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_B5+"\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos+60)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos+60)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos+60)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos+60)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+60)+","+(nYCurPos+60)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet20_C5+"\r");
	}

	//----list01 스크립트 문 출력 함수----
	private void writeScriptlist01(boolean bIsPrint) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",31,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",31,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",31,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+29)+","+(nYCurPos)+",31,20,0,RGB[0,0,0],3)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+60)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");

		//고정 데이터 출력

		//수식 데이터 출력
		if(bIsPrint){
			out.print("^PRINT("+(nXCurPos+29)+","+(nYCurPos)+",31,1,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
			out.println(sheet20_B6+"\r");
			out.print("^PRINT("+(nXCurPos+60)+","+(nYCurPos)+",50,1,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
			out.println(sheet20_C6+"\r");
		}

		//고정 데이터 출력

		//수식 데이터 출력
		if(bIsPrint){
		}
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_subj_Param=toKor(GetB(request.getParameter("p_subj")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_Query01=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query02=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query03=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query04=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query05=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_Query06=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_Query01 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query01 = sql_Query01 + "     , A.CLASSNO ";
		sql_Query01 = sql_Query01 + "     , C.EDUNO ";
		sql_Query01 = sql_Query01 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query01 = sql_Query01 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query01 = sql_Query01 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query01 = sql_Query01 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query01 = sql_Query01 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query01 = sql_Query01 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query01 = sql_Query01 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query01 = sql_Query01 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query01 = sql_Query01 + " AND A.USERNO    = C.USERNO  ";
		sql_Query01 = sql_Query01 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query01 = sql_Query01 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query01 = sql_Query01 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query01 = sql_Query01 + " AND A.CLASSNO   = '1' ";
		sql_Query01 = sql_Query01 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
		sql_Query02 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query02 = sql_Query02 + "     , A.CLASSNO ";
		sql_Query02 = sql_Query02 + "     , C.EDUNO ";
		sql_Query02 = sql_Query02 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query02 = sql_Query02 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query02 = sql_Query02 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query02 = sql_Query02 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query02 = sql_Query02 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query02 = sql_Query02 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query02 = sql_Query02 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query02 = sql_Query02 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query02 = sql_Query02 + " AND A.USERNO    = C.USERNO  ";
		sql_Query02 = sql_Query02 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query02 = sql_Query02 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query02 = sql_Query02 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query02 = sql_Query02 + " AND A.CLASSNO   = '2' ";
		sql_Query02 = sql_Query02 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
		sql_Query03 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query03 = sql_Query03 + "     , A.CLASSNO ";
		sql_Query03 = sql_Query03 + "     , C.EDUNO ";
		sql_Query03 = sql_Query03 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query03 = sql_Query03 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query03 = sql_Query03 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query03 = sql_Query03 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query03 = sql_Query03 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query03 = sql_Query03 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query03 = sql_Query03 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query03 = sql_Query03 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query03 = sql_Query03 + " AND A.USERNO    = C.USERNO  ";
		sql_Query03 = sql_Query03 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query03 = sql_Query03 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query03 = sql_Query03 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query03 = sql_Query03 + " AND A.CLASSNO   = '3' ";
		sql_Query03 = sql_Query03 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
		sql_Query04 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query04 = sql_Query04 + "     , A.CLASSNO ";
		sql_Query04 = sql_Query04 + "     , C.EDUNO ";
		sql_Query04 = sql_Query04 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query04 = sql_Query04 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query04 = sql_Query04 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query04 = sql_Query04 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query04 = sql_Query04 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query04 = sql_Query04 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query04 = sql_Query04 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query04 = sql_Query04 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query04 = sql_Query04 + " AND A.USERNO    = C.USERNO  ";
		sql_Query04 = sql_Query04 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query04 = sql_Query04 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query04 = sql_Query04 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query04 = sql_Query04 + " AND A.CLASSNO   = '4' ";
		sql_Query04 = sql_Query04 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
		sql_Query05 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query05 = sql_Query05 + "     , A.CLASSNO ";
		sql_Query05 = sql_Query05 + "     , C.EDUNO ";
		sql_Query05 = sql_Query05 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query05 = sql_Query05 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query05 = sql_Query05 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query05 = sql_Query05 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query05 = sql_Query05 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query05 = sql_Query05 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query05 = sql_Query05 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query05 = sql_Query05 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query05 = sql_Query05 + " AND A.USERNO    = C.USERNO  ";
		sql_Query05 = sql_Query05 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query05 = sql_Query05 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query05 = sql_Query05 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query05 = sql_Query05 + " AND A.CLASSNO   = '5' ";
		sql_Query05 = sql_Query05 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
		sql_Query06 = "SELECT SEARCHNAME( A.USERNO) AS NAME ";
		sql_Query06 = sql_Query06 + "     , A.CLASSNO ";
		sql_Query06 = sql_Query06 + "     , C.EDUNO ";
		sql_Query06 = sql_Query06 + "     , SEARCHNAME(B.TUSERNO) AS TNAME  ";
		sql_Query06 = sql_Query06 + "  FROM TB_STU_LEC A, TB_CLASSTUTOR B, TB_APP_INFO C ";
		sql_Query06 = sql_Query06 + " WHERE A.CLASSNO = B.CLASSNO  ";
		sql_Query06 = sql_Query06 + " AND A.SUBJ      = B.SUBJ  ";
		sql_Query06 = sql_Query06 + " AND A.GRCODE    = B.GRCODE  ";
		sql_Query06 = sql_Query06 + " AND A.GRSEQ     = B.GRSEQ  ";
		sql_Query06 = sql_Query06 + " AND A.GRCODE    = C.GRCODE  ";
		sql_Query06 = sql_Query06 + " AND A.GRSEQ     = C.GRSEQ ";
		sql_Query06 = sql_Query06 + " AND A.USERNO    = C.USERNO  ";
		sql_Query06 = sql_Query06 + " AND A.GRCODE    = '" + p_grcode_Param + "'  ";
		sql_Query06 = sql_Query06 + " AND A.GRSEQ     = '" + p_grseq_Param + "' ";
		sql_Query06 = sql_Query06 + " AND A.SUBJ      = '" + p_subj_Param + "' ";
		sql_Query06 = sql_Query06 + " AND A.CLASSNO   = '6' ";
		sql_Query06 = sql_Query06 + "ORDER BY A.GRCODE, A.GRSEQ, A.SUBJ, A.CLASSNO, C.EDUNO";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet Query01 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery01() throws Exception{
		Query01_NAME=GetB(Query01.getString(1));
		Query01_CLASSNO=Query01.getDouble(2);
		Query01_EDUNO=Query01.getDouble(3);
		Query01_TNAME=GetB(Query01.getString(4));
	}

	//ResultSet Query01 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery01(){
		Query01_NAME="";
		Query01_CLASSNO=0;
		Query01_EDUNO=0;
		Query01_TNAME="";
	}

	//ResultSet Query02 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery02() throws Exception{
		Query02_NAME=GetB(Query02.getString(1));
		Query02_CLASSNO=Query02.getDouble(2);
		Query02_EDUNO=Query02.getDouble(3);
		Query02_TNAME=GetB(Query02.getString(4));
	}

	//ResultSet Query02 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery02(){
		Query02_NAME="";
		Query02_CLASSNO=0;
		Query02_EDUNO=0;
		Query02_TNAME="";
	}

	//ResultSet Query03 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery03() throws Exception{
		Query03_NAME=GetB(Query03.getString(1));
		Query03_CLASSNO=Query03.getDouble(2);
		Query03_EDUNO=Query03.getDouble(3);
		Query03_TNAME=GetB(Query03.getString(4));
	}

	//ResultSet Query03 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery03(){
		Query03_NAME="";
		Query03_CLASSNO=0;
		Query03_EDUNO=0;
		Query03_TNAME="";
	}

	//ResultSet Query04 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery04() throws Exception{
		Query04_NAME=GetB(Query04.getString(1));
		Query04_CLASSNO=Query04.getDouble(2);
		Query04_EDUNO=Query04.getDouble(3);
		Query04_TNAME=GetB(Query04.getString(4));
	}

	//ResultSet Query04 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery04(){
		Query04_NAME="";
		Query04_CLASSNO=0;
		Query04_EDUNO=0;
		Query04_TNAME="";
	}

	//ResultSet Query05 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery05() throws Exception{
		Query05_NAME=GetB(Query05.getString(1));
		Query05_CLASSNO=Query05.getDouble(2);
		Query05_EDUNO=Query05.getDouble(3);
		Query05_TNAME=GetB(Query05.getString(4));
	}

	//ResultSet Query05 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery05(){
		Query05_NAME="";
		Query05_CLASSNO=0;
		Query05_EDUNO=0;
		Query05_TNAME="";
	}

	//ResultSet Query06 객체에서 필드 값 설정 함수
	private void setFieldVariableFromQuery06() throws Exception{
		Query06_NAME=GetB(Query06.getString(1));
		Query06_CLASSNO=Query06.getDouble(2);
		Query06_EDUNO=Query06.getDouble(3);
		Query06_TNAME=GetB(Query06.getString(4));
	}

	//ResultSet Query06 객체의 필드 값 초기화 함수
	private void setFieldInitFromQuery06(){
		Query06_NAME="";
		Query06_CLASSNO=0;
		Query06_EDUNO=0;
		Query06_TNAME="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="분임별 지도교수 및 교육생 현황";
		sheet10_A2="연번";
		sheet10_A6=1;
		sheet10_A7=2;
		sheet10_A8=3;
		sheet10_A9=4;
		sheet10_A10=5;
		sheet10_A11=6;
		sheet10_A12=7;
		sheet10_A13=8;
		sheet10_A14=9;
		sheet10_A15=10;
		sheet10_A16="11";
		sheet10_A17=12;
		sheet10_A18=13;
		sheet10_A19=14;
		sheet10_A20=15;
		sheet20_B2="1분임";
		sheet20_B3="지도교수";
		sheet20_B5="교번";
		sheet20_C5="성명";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
