<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_B4;
	String sheet10_B5;
	String sheet10_C5;
	String sheet10_D5;
	long sheet10_B6;
	double sheet10_C6;
	double sheet10_D6;
	String sheet10_E6;
	String sheet10_B9;
	String sheet10_B10;
	String sheet10_C10;
	String sheet10_D10;
	double sheet10_B11;
	double sheet10_C11;
	double sheet10_D11;
	String sheet10_E11;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_L1;		//ResultSet L1 객체를 생성하기 위한 Statement 객체
	private ResultSet L1;		//ResultSet L1 객체
	private java.sql.Statement stat_L2;		//ResultSet L2 객체를 생성하기 위한 Statement 객체
	private ResultSet L2;		//ResultSet L2 객체

	//-----SQL 변수 선언-----
	private String sql_L1;		//ResultSet L1 객체를 생성하기 위한 쿼리문 저장
	private String sql_L2;		//ResultSet L2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet L1 객체에서 필드 값을 받는 쿼리 필드 변수
	private double L1_PROB_NUM;
	private double L1_YES_CNT;
	private double L1_YES_PER;
	private double L1_NO_CNT;
	private double L1_NO_PER;

	//ResultSet L2 객체에서 필드 값을 받는 쿼리 필드 변수
	private double L2_PROB_NUM;
	private double L2_YES_CNT;
	private double L2_YES_PER;
	private double L2_NO_CNT;
	private double L2_NO_PER;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_subj_Param;
	String p_ptype_Param;
	String p_title_Param;
	String p_totaledu_Param;
	String p_tot_point_Param;
	String p_avgpoint_Param;
	String p_ptype_nm_Param;

	//-----사용자 정의 변수 및 함수-----
	int nYTemp=0;
	int chart_no = 1;


	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(L2!=null) L2.close();
				if(stat_L2!=null) stat_L2.close();
				if(L1!=null) L1.close();
				if(stat_L1!=null) stat_L1.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 71, 546, 781, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromL1_list(true);    //반복 밴드 호출
		getScriptFromL2_list(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----L1_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L1_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL1_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=70;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_B4="";

			//데이터 변수 할당
			sheet10_B4=p_ptype_nm_Param + " (총점: " + p_tot_point_Param + ", 평균: " + p_avgpoint_Param + " ) 응시인원 : " + p_totaledu_Param;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL1_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----L1_box ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L1_box
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL1_box(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if (!bIsLast) {
				if(isPageSkip(nYCurPos+21)){
				pageSkip(10);}
				out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+3)+","+(sheet10_D6)+",14,0,RGB[120,120,255],RGB[120,120,255],0)\r");
				out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+14)+","+(sheet10_D6)+",3,0,RGB[80,80,255],RGB[80,80,255],0)\r");
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromL1_header(false, true);	//반복 헤더 호출
				}
				writeScriptL1_box();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+2)+","+(sheet10_D6)+",14,0,RGB[120,120,255],RGB[120,120,255],0)\r");
			out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+14)+","+(sheet10_D6)+",3,0,RGB[80,80,255],RGB[80,80,255],0)\r");
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----L1_Line ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L1_Line
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL1_Line(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=19;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromL1_header(false, true);	//반복 헤더 호출
				}
				writeScriptL1_Line();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//-----L1_list RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : L1_list
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromL1_list(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_L1_box=false;   //L1_box 조건 밴드 플래그 선언
		boolean bIsTrue_L1_Line=false;   //L1_Line 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_B6=0L;
		sheet10_C6=0;
		sheet10_D6=0;

		//DataSet 객체 생성
		//ResultSet L1 객체의 생성
		if(L1==null){
			L1 = stat_L1.executeQuery(sql_L1);
		}else{
			L1.beforeFirst();
		}

		while(L1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL1();	//RecordSet L1에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(true){    //L1_box 밴드 조건문
				bIsTrue_L1_box=true;
			}else{
				bIsTrue_L1_box=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromL1_header(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_L1_box=false;    //L1_box 조건 밴드 플래그 초기화
				bIsTrue_L1_Line=false;    //L1_Line 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B6=(long)L1_PROB_NUM;
			sheet10_C6=L1_YES_CNT;
			sheet10_D6=L1_YES_PER;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromL1_box(bIsFirst, false, bIsTrue_L1_box, false);    //L1_box 조건 밴드 호출
			getScriptFromL1_Line(bIsFirst, false, bIsTrue_L1_Line, true);   //L1_Line 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromL1_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptL1_list();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromL1_box(bIsFirst, true, true, false);    //L1_box 조건 밴드 호출
		getScriptFromL1_Line(bIsFirst, true, true, true);   //L1_Line 조건 밴드 호출
	}

	//----L2_header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L2_header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL2_header(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_B9="";

			//데이터 변수 할당
			sheet10_B9=p_ptype_nm_Param + " (총점: " + p_tot_point_Param + ", 평균: " + p_avgpoint_Param + " ) 응시인원 : " + p_totaledu_Param;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptL2_header();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----L2_box ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L2_box
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL2_box(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if (!bIsLast) {
				if(isPageSkip(nYCurPos+21)){
				pageSkip(10);}
				out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+3)+","+(sheet10_D11)+",14,0,RGB[120,120,255],RGB[120,120,255],0)\r");
				out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+14)+","+(sheet10_D11)+",3,0,RGB[80,80,255],RGB[80,80,255],0)\r");
			}
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromL2_header(false, true);	//반복 헤더 호출
				}
				writeScriptL2_box();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
			//조건 밴드의 거짓 값
			out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+3)+","+(sheet10_D11)+",14,0,RGB[120,120,255],RGB[120,120,255],0)\r");
			out.println("^BOX("+(nXCurPos+356)+","+(nYCurPos+14)+","+(sheet10_D11)+",3,0,RGB[80,80,255],RGB[80,80,255],0)\r");
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//----L2_Line ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : L2_Line
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromL2_Line(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromL2_header(false, true);	//반복 헤더 호출
				}
				writeScriptL2_Line();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
		}   //end if(!bIsLast)
	}

	//-----L2_list RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : L2_list
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromL2_list(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_L2_box=false;   //L2_box 조건 밴드 플래그 선언
		boolean bIsTrue_L2_Line=false;   //L2_Line 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_B11=0;
		sheet10_C11=0;
		sheet10_D11=0;

		//DataSet 객체 생성
		//ResultSet L2 객체의 생성
		if(L2==null){
			L2 = stat_L2.executeQuery(sql_L2);
		}else{
			L2.beforeFirst();
		}

		while(L2.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromL2();	//RecordSet L2에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(true){    //L2_box 밴드 조건문
				bIsTrue_L2_box=true;
			}else{
				bIsTrue_L2_box=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromL2_header(bIsFirst, true);	//반복 헤더 호출
				bIsTrue_L2_box=false;    //L2_box 조건 밴드 플래그 초기화
				bIsTrue_L2_Line=false;    //L2_Line 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B11=L2_PROB_NUM;
			sheet10_C11=L2_NO_CNT;
			sheet10_D11=L2_NO_PER;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromL2_box(bIsFirst, false, bIsTrue_L2_box, false);    //L2_box 조건 밴드 호출
			getScriptFromL2_Line(bIsFirst, false, bIsTrue_L2_Line, true);   //L2_Line 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromL2_header(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptL2_list();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromL2_box(bIsFirst, true, true, false);    //L2_box 조건 밴드 호출
		getScriptFromL2_Line(bIsFirst, true, true, true);   //L2_Line 조건 밴드 호출
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(41,41,484,1,16,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,30,1)");
		out.println(sheet10_A1+"\r");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(41,781,484,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A2+"\r");
	}

	//----L1_header 스크립트 문 출력 함수----
	private void writeScriptL1_header( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos+20)+",464,30,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",464,30,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",464,30,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",464,30,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+20)+",464,2,11,0/,돋움체,RGB[0,0,0], , , ,NONE,30,1)");
		out.println(sheet10_B4+"\r");
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos+50)+",50,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+50)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+50)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+50)+",50,20,1,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+50)+",50,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B5+"\r");
		out.println("^CELLBG("+(nXCurPos+70)+","+(nYCurPos+50)+",138,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+50)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+50)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+50)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+50)+",138,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+70)+","+(nYCurPos+50)+",138,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C5+"\r");
		out.println("^CELLBG("+(nXCurPos+208)+","+(nYCurPos+50)+",276,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+50)+",276,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+50)+",276,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+50)+",276,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos+50)+",276,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D5+"\r");
	}

	//----L1_box 스크립트 문 출력 함수----
	private void writeScriptL1_box( ) throws Exception{
	}

	//----L1_Line 스크립트 문 출력 함수----
	private void writeScriptL1_Line( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,19,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,19,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,19,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,19,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,19,1,RGB[0,0,0],0)\r");
	}

	//----L1_list 스크립트 문 출력 함수----
	private void writeScriptL1_list( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,1,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",50,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B6+"\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+70)+","+(nYCurPos)+",138,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C6+"\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],1)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos)+",92,2,11,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D6+"\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,0,RGB[0,0,0],1)\r");
		out.print("^PRINT("+(nXCurPos+300)+","+(nYCurPos)+",46,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E6+"\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,1,RGB[0,0,0],3)\r");
	}

	//----L2_header 스크립트 문 출력 함수----
	private void writeScriptL2_header( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos)+",464,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",464,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",464,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",464,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",464,2,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B9+"\r");
		out.println("^CELLBG("+(nXCurPos+20)+","+(nYCurPos+20)+",50,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos+20)+",50,20,1,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos+20)+",50,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B10+"\r");
		out.println("^CELLBG("+(nXCurPos+70)+","+(nYCurPos+20)+",138,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+20)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+20)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+20)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos+20)+",138,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+70)+","+(nYCurPos+20)+",138,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C10+"\r");
		out.println("^CELLBG("+(nXCurPos+208)+","+(nYCurPos+20)+",276,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+20)+",276,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+20)+",276,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos+20)+",276,20,1,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos+20)+",276,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D10+"\r");
	}

	//----L2_box 스크립트 문 출력 함수----
	private void writeScriptL2_box( ) throws Exception{
	}

	//----L2_Line 스크립트 문 출력 함수----
	private void writeScriptL2_Line( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,1,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,1,RGB[0,0,0],0)\r");
	}

	//----L2_list 스크립트 문 출력 함수----
	private void writeScriptL2_list( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,1,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+20)+","+(nYCurPos)+",50,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+20)+","+(nYCurPos)+",50,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+70)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+70)+","+(nYCurPos)+",138,1,11,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C11+"\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+208)+","+(nYCurPos)+",92,20,0,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+208)+","+(nYCurPos)+",92,2,11,1/0/2,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D11+"\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+300)+","+(nYCurPos)+",46,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+300)+","+(nYCurPos)+",46,0,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E11+"\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+346)+","+(nYCurPos)+",138,20,1,RGB[0,0,0],3)\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_subj_Param=toKor(GetB(request.getParameter("p_subj")));
		p_ptype_Param=toKor(GetB(request.getParameter("p_ptype")));
		p_title_Param=toKor(GetB(request.getParameter("p_title")));
		p_totaledu_Param=toKor(GetB(request.getParameter("p_totaledu")));
		p_tot_point_Param=toKor(GetB(request.getParameter("p_tot_point")));
		p_avgpoint_Param=toKor(GetB(request.getParameter("p_avgpoint")));
		p_ptype_nm_Param=toKor(GetB(request.getParameter("p_ptype_nm")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_DUNET = DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_L1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_L2=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_L1 = "select prob_num ";
		sql_L1 = sql_L1 + "     , yes_cnt ";
		sql_L1 = sql_L1 + "     , decode(" + p_totaledu_Param + ", 0, 0, null, 0, round(yes_cnt/" + p_totaledu_Param + "*100, 2))  yes_per ";
		sql_L1 = sql_L1 + "     , no_cnt ";
		sql_L1 = sql_L1 + "     , decode(" + p_totaledu_Param + ", 0, 0, null, 0, round(no_cnt/" + p_totaledu_Param + "*100, 2)) no_per ";
		sql_L1 = sql_L1 + "  from ( select decode(et.codetype, 'M', 1, 'S', 1, 2) prob_type ";
		sql_L1 = sql_L1 + "              , et.acodetype_seq ";
		sql_L1 = sql_L1 + "	      , sum(decode(sa.scr,'O', 1, 0)) yes_cnt ";
		sql_L1 = sql_L1 + "	      , sum(decode(sa.scr,'X', 1, 0)) no_cnt ";
		sql_L1 = sql_L1 + "	      , decode(decode(et.codetype, 'M', 1, 'S', 1, 2), 1, 0, max(ep.cntsingle))+et.acodetype_seq as prob_num ";
		sql_L1 = sql_L1 + "           from tb_expage ep, tb_on_subjexamans sa, tb_exdetail et ";
		sql_L1 = sql_L1 + "          where ep.grcode = sa.grcode  ";
		sql_L1 = sql_L1 + "	  and ep.grseq    = sa.grseq  ";
		sql_L1 = sql_L1 + "	  and ep.subj     = sa.subj  ";
		sql_L1 = sql_L1 + "	  and ep.ptype    = sa.ptype  ";
		sql_L1 = sql_L1 + "          and ep.grcode   = et.grcode  ";
		sql_L1 = sql_L1 + "	  and ep.grseq    = et.grseq  ";
		sql_L1 = sql_L1 + "	  and ep.subj     = et.subj  ";
		sql_L1 = sql_L1 + "	  and ep.ptype    = et.ptype  ";
		sql_L1 = sql_L1 + "          and sa.prob_no  = et.prob_no ";
		sql_L1 = sql_L1 + "          and et.grcode   = '" + p_grcode_Param + "'  ";
		sql_L1 = sql_L1 + "	  and et.grseq    = '" + p_grseq_Param + "'  ";
		sql_L1 = sql_L1 + "	  and et.subj     = '" + p_subj_Param + "'  ";
		sql_L1 = sql_L1 + "	  and et.ptype    = '" + p_ptype_Param + "'  ";
		sql_L1 = sql_L1 + "          group by decode(et.codetype, 'M', 1, 'S', 1, 2) , et.acodetype_seq  ";
		sql_L1 = sql_L1 + "          order by decode(et.codetype, 'M', 1, 'S', 1, 2) , et.acodetype_seq ";
		sql_L1 = sql_L1 + "       )";
		sql_L2 = "select prob_num, yes_cnt, decode(" + p_totaledu_Param + ", 0, 0, null, 0, round(yes_cnt/" + p_totaledu_Param + "*100, 2)) yes_per, ";
		sql_L2 = sql_L2 + "        no_cnt, decode(" + p_totaledu_Param + ", 0, 0, null, 0, round(no_cnt/" + p_totaledu_Param + "*100, 2)) no_per ";
		sql_L2 = sql_L2 + "from  ";
		sql_L2 = sql_L2 + "( ";
		sql_L2 = sql_L2 + "select decode(et.codetype, 'M', 1, 'S', 1, 2) prob_type, et.acodetype_seq,  ";
		sql_L2 = sql_L2 + "      sum(decode(sa.scr,'O', 1, 0)) yes_cnt, sum(decode(sa.scr,'X', 1, 0)) no_cnt, ";
		sql_L2 = sql_L2 + "      decode(decode(et.codetype, 'M', 1, 'S', 1, 2), 1, 0, max(ep.cntsingle))+et.acodetype_seq as prob_num ";
		sql_L2 = sql_L2 + "from tb_expage ep, tb_on_subjexamans sa, tb_exdetail et ";
		sql_L2 = sql_L2 + "where ep.grcode=sa.grcode and ep.grseq=sa.grseq and ep.subj=sa.subj and ep.ptype=sa.ptype  ";
		sql_L2 = sql_L2 + "    and ep.grcode=et.grcode and ep.grseq=et.grseq and ep.subj=et.subj and ep.ptype=et.ptype  ";
		sql_L2 = sql_L2 + "    and sa.prob_no =et.prob_no ";
		sql_L2 = sql_L2 + "    and et.grcode='" + p_grcode_Param + "' and et.grseq='" + p_grseq_Param + "' and et.subj='" + p_subj_Param + "' and et.ptype='" + p_ptype_Param + "' ";
		sql_L2 = sql_L2 + "group by decode(et.codetype, 'M', 1, 'S', 1, 2) , et.acodetype_seq  ";
		sql_L2 = sql_L2 + "order by decode(et.codetype, 'M', 1, 'S', 1, 2) , et.acodetype_seq ";
		sql_L2 = sql_L2 + ")";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet L1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL1() throws Exception{
		L1_PROB_NUM=L1.getDouble(1);
		L1_YES_CNT=L1.getDouble(2);
		L1_YES_PER=L1.getDouble(3);
		L1_NO_CNT=L1.getDouble(4);
		L1_NO_PER=L1.getDouble(5);
	}

	//ResultSet L1 객체의 필드 값 초기화 함수
	private void setFieldInitFromL1(){
		L1_PROB_NUM=0;
		L1_YES_CNT=0;
		L1_YES_PER=0;
		L1_NO_CNT=0;
		L1_NO_PER=0;
	}

	//ResultSet L2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromL2() throws Exception{
		L2_PROB_NUM=L2.getDouble(1);
		L2_YES_CNT=L2.getDouble(2);
		L2_YES_PER=L2.getDouble(3);
		L2_NO_CNT=L2.getDouble(4);
		L2_NO_PER=L2.getDouble(5);
	}

	//ResultSet L2 객체의 필드 값 초기화 함수
	private void setFieldInitFromL2(){
		L2_PROB_NUM=0;
		L2_YES_CNT=0;
		L2_YES_PER=0;
		L2_NO_CNT=0;
		L2_NO_PER=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="" + p_title_Param + "";
		sheet10_A2="#PAGE / #TOTALPAGE";
		sheet10_B5="문항";
		sheet10_C5="정답자수";
		sheet10_D5="정답률(%)";
		sheet10_E6="%";
		sheet10_B10="문항";
		sheet10_C10="오답자수";
		sheet10_D10="오답률(%)";
		sheet10_E11="%";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
