<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*,java.util.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A3;
	String sheet10_A4;
	String sheet10_B4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_A5;
	String sheet10_B5;
	String sheet10_C5;
	String sheet10_A7;
	String sheet10_A6;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_grcodenm;		//ResultSet grcodenm 객체를 생성하기 위한 Statement 객체
	private ResultSet grcodenm;		//ResultSet grcodenm 객체
	private java.sql.Statement stat_title;		//ResultSet title 객체를 생성하기 위한 Statement 객체
	private ResultSet title;		//ResultSet title 객체
	private java.sql.Statement stat_master;		//ResultSet master 객체를 생성하기 위한 Statement 객체
	private ResultSet master;		//ResultSet master 객체
	private java.sql.Statement stat_detail;		//ResultSet detail 객체를 생성하기 위한 Statement 객체
	private ResultSet detail;		//ResultSet detail 객체

	//-----SQL 변수 선언-----
	private String sql_grcodenm;		//ResultSet grcodenm 객체를 생성하기 위한 쿼리문 저장
	private String sql_title;		//ResultSet title 객체를 생성하기 위한 쿼리문 저장
	private String sql_master;		//ResultSet master 객체를 생성하기 위한 쿼리문 저장
	private String sql_detail;		//ResultSet detail 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet grcodenm 객체에서 필드 값을 받는 쿼리 필드 변수
	private String grcodenm_GRCODENM;

	//ResultSet title 객체에서 필드 값을 받는 쿼리 필드 변수
	private String title_SUBJCODE;
	private String title_SUBJNM;
	private double title_EXPAGEORDER;
	private double title_CODETYPE;

	//ResultSet master 객체에서 필드 값을 받는 쿼리 필드 변수
	private String master_MASTER_SUBJCODE;
	private String master_SUBJNM;
	private double master_MASTER_SORT_NO;
	private String master_CODETEXT;
	private String master_FILE_NAME;
	private String master_FILE_PATH;
	private String master_CONTENT;

	//ResultSet detail 객체에서 필드 값을 받는 쿼리 필드 변수
	private String detail_MASTER_SUBJCODE;
	private String detail_SUBJNM;
	private double detail_MASTER_SORT_NO;
	private String detail_SUBCODE;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_sort_type_Param;
	String p_ptype_Param;
	String p_selsubj_Param;

	//-----사용자 정의 변수 및 함수-----
	private int iParts = 0;


	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(stat_detail!=null) stat_detail.close();
				if(stat_master!=null) stat_master.close();
				if(title!=null) title.close();
				if(stat_title!=null) stat_title.close();
				if(grcodenm!=null) grcodenm.close();
				if(stat_grcodenm!=null) stat_grcodenm.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(38, 79, 549, 781, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromsubjnm(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet grcodenm 객체의 생성
			if(grcodenm==null){
				grcodenm = stat_grcodenm.executeQuery(sql_grcodenm);
			}else{
				grcodenm.beforeFirst();
			}

			//데이터 fetch
			if(grcodenm.next()){
				setFieldVariableFromgrcodenm();	//ResultSet grcodenm에서 필드 값 설정
			}else{
				setFieldInitFromgrcodenm();	//ResultSet grcodenm의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";

			//데이터 변수 할당
			sheet10_A1=grcodenm_GRCODENM;
		}   //end if(bIsFirst)

		if (p_sort_type_Param.equals("A")) {
			p_sort_type_Param = "b.acodetype_seq";
		} else if (p_sort_type_Param.equals("B")) {
			p_sort_type_Param = "b.bcodetype_seq";
		} else if (p_sort_type_Param.equals("C")) {
			p_sort_type_Param = "b.ccodetype_seq";
		}

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----path ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : path
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrompath(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_A5="";
			sheet10_B5="";
			sheet10_C5="";
		}   //end if(bIsFirst)

		//데이터 변수 할당
		sheet10_A5=master_FILE_PATH + master_FILE_NAME;
		sheet10_B5=String.valueOf(master_FILE_NAME);
		sheet10_C5=String.valueOf(master_FILE_PATH);

		if (sheet10_B5.equals("")) {
			nBandHeight=5;
		} else {
			iParts = sheet10_B5.lastIndexOf(".");

			if (sheet10_B5.substring(iParts +1).equals("txt")) {
				nBandHeight=20;
			} else if (sheet10_B5.substring(iParts +1).equals("TXT")) {
				nBandHeight=20;
			} else if (sheet10_B5.substring(iParts +1).equals("")) {
				nBandHeight=20;
			} else {
				nBandHeight=50;
			}
		}

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptpath();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet10_A5="";
				sheet10_B5="";
				sheet10_C5="";
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_A5=master_FILE_PATH + master_FILE_NAME;
			sheet10_B5=master_FILE_NAME;
			sheet10_C5=master_FILE_PATH;
		}   //end if(!bIsLast)
	}

	//----context ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : context
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromcontext(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_A7="";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptcontext();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet10_A7="";
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet10_A7=sheet10_D4;
		}   //end if(!bIsLast)
	}

	//-----detail RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : detail
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromdetail(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A6="";

		//DataSet 객체 생성
		//ResultSet detail 객체의 생성
		initSQLdetailVarient();
		detail = stat_detail.executeQuery(sql_detail);

		while(detail.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdetail();	//RecordSet detail에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A6=detail_SUBCODE;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptdetail();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//DataSet Close
		if(detail!=null) detail.close();
	}

	//-----master RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : master
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrommaster(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_path=false;   //path 조건 밴드 플래그 선언
		boolean bIsTrue_context=false;   //context 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet10_A4="";
		sheet10_B4="";
		sheet10_C4="";
		sheet10_D4="";

		//DataSet 객체 생성
		//ResultSet master 객체의 생성
		initSQLmasterVarient();
		master = stat_master.executeQuery(sql_master);

		while(master.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrommaster();	//RecordSet master에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(!sheet10_B4.equals("")){    //path 밴드 조건문
				bIsTrue_path=true;
			}else{
				bIsTrue_path=false;
			}
			if(true){    //context 밴드 조건문
				bIsTrue_context=true;
			}else{
				bIsTrue_context=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				bIsTrue_path=false;    //path 조건 밴드 플래그 초기화
				bIsTrue_context=false;    //context 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A4=master_CODETEXT;
			sheet10_B4=master_FILE_NAME;
			sheet10_C4=master_FILE_PATH;
			sheet10_D4=master_CONTENT;

			/*

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFrompath(bIsFirst, false, bIsTrue_path, true);   //path 조건 밴드 호출
			getScriptFromcontext(bIsFirst, false, bIsTrue_context, true);   //context 조건 밴드 호출

			*/
			getScriptFromcontext(bIsFirst, false, bIsTrue_context, true);   //context 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptmaster();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			getScriptFrompath(bIsFirst, true, true, true);

			//루프 내부 자식 밴드 호출
			getScriptFromdetail(true);

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		/*

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFrompath(bIsFirst, true, true, true);   //path 조건 밴드 호출
		getScriptFromcontext(bIsFirst, true, true, true);   //context 조건 밴드 호출

		*/

		getScriptFromcontext(bIsFirst, true, true, true);   //context 조건 밴드 호출

		//DataSet Close
		if(master!=null) master.close();
	}

	//-----subjnm RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : subjnm
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsubjnm(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A3="";

		//DataSet 객체 생성
		//ResultSet title 객체의 생성
		if(title==null){
			title = stat_title.executeQuery(sql_title);
		}else{
			title.beforeFirst();
		}

		while(title.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromtitle();	//RecordSet title에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A3=title_SUBJNM;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsubjnm();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//루프 내부 자식 밴드 호출
			getScriptFrommaster(true);

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT(38,41,510,0,14,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,38,1)");
		out.println(sheet10_A1+"\r");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
	}

	//----path 스크립트 문 출력 함수----
	private void writeScriptpath( ) throws Exception{
		if (sheet10_B5.equals("")) {
			out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,5,1)");
			out.println(sheet10_B5+"\r");
		} else {
			if (sheet10_B5.substring(iParts +1).equals("txt")) {
				out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
				out.println(sheet10_B5+"\r");
			} else if (sheet10_B5.substring(iParts +1).equals("txt")) {
				out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
				out.println(sheet10_B5+"\r");
			} else {
				out.println("^IMAGE("+(nXCurPos)+","+(nYCurPos)+",510,50,"+(sheet10_A5)+",1)\r");
			}
			/*

			//스크립트문 생성
			out.println("^IMAGE("+(nXCurPos)+","+(nYCurPos)+",510,20,"+(sheet10_A5)+",1)\r");

			*/
		}
	}

	//----context 스크립트 문 출력 함수----
	private void writeScriptcontext( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,XL,20,1)");
		out.println(sheet10_A7+"\r");
	}

	//----detail 스크립트 문 출력 함수----
	private void writeScriptdetail( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A6+"\r");
	}

	//----master 스크립트 문 출력 함수----
	private void writeScriptmaster( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,TR,20,1)");
		out.println(sheet10_A4+"\r");
	}

	//----subjnm 스크립트 문 출력 함수----
	private void writeScriptsubjnm( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",510,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_sort_type_Param=toKor(GetB(request.getParameter("p_sort_type")));
		p_ptype_Param=toKor(GetB(request.getParameter("p_ptype")));
		p_selsubj_Param=toKor(GetB(request.getParameter("p_selsubj")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_grcodenm=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_title=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_master=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_detail=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_grcodenm = "select substr('" + p_grseq_Param + "',1,4) || '. ' ||  grcodenm || ' '  || to_number(substr(" + p_grseq_Param + ",5,2)) || '기 ' || decode('" + p_ptype_Param + "','T','최종','M','중간','1','상시1회','2','상시3회','3','상시3회','4','상시4회','5','상시5회') || '평가'  as grcodenm ";
		sql_grcodenm = sql_grcodenm + "from tb_grcode  ";
		sql_grcodenm = sql_grcodenm + "where grcode = '" + p_grcode_Param + "'";
		sql_title = "SELECT b.subj as  subjcode ";
		sql_title = sql_title + "     , searchsubjnm(b.subj)  as subjnm ";
		sql_title = sql_title + "     , A.EXPAGEORDER, decode(b.codetype,'M',1,'S',1,2) as codetype ";
		sql_title = sql_title + "  FROM tb_grexpage a,    tb_exdetail b, tb_expbank c ";
		sql_title = sql_title + "     , tb_expbank_row d, tb_extext e,   tb_eval_fileup f ";
		sql_title = sql_title + " WHERE a.grcode = '" + p_grcode_Param + "' ";
		sql_title = sql_title + " and a.grseq    = '" + p_grseq_Param + "' ";
		sql_title = sql_title + " and a.ptype    = '" + p_ptype_Param + "' ";
		sql_title = sql_title + " and a.selsubj  = '" + p_selsubj_Param + "' ";
		sql_title = sql_title + " And a.grcode   = b.grcode ";
		sql_title = sql_title + " and a.grseq    = b.grseq ";
		sql_title = sql_title + " and a.subj     = b.subj ";
		sql_title = sql_title + " and a.ptype    = b.ptype ";
		sql_title = sql_title + " and b.prob_no  = c.prob_no ";
		sql_title = sql_title + " And c.prob_no  = d.prob_no ";
		sql_title = sql_title + " AND c.text_seq = e.text_seq(+) ";
		sql_title = sql_title + " AND c.groupseq=f.groupseq(+) ";
		sql_title = sql_title + "GROUP BY  b.subj, A.EXPAGEORDER, decode(b.codetype,'M',1,'S',1,2) ";
		sql_title = sql_title + "ORDER BY  decode(b.codetype,'M',1,'S',1,2), A.EXPAGEORDER";
	}

	private void initSQLmasterVarient(){
		sql_master = "SELECT b.subj as  master_subjcode ";
		sql_master = sql_master + "     , searchsubjnm(b.subj) as subjnm ";
		sql_master = sql_master + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_master = sql_master + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_master = sql_master + "			    ,b.ptype,b.subj) as  master_sort_no ";
		sql_master = sql_master + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_master = sql_master + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_master = sql_master + "			    ,b.ptype,b.subj) || '. ' || c.codetext as codetext ";
		sql_master = sql_master + "     , nvl(f.file_name,'') as file_name ";
		sql_master = sql_master + "     , nvl(f.file_path,'') || '/' as file_path ";
		sql_master = sql_master + "     , upper(dbms_lob.substr(e.content, 4000,1)) content ";
		sql_master = sql_master + "  FROM tb_grexpage a,    tb_exdetail b, tb_expbank c ";
		sql_master = sql_master + "     , tb_expbank_row d, tb_extext e,   tb_eval_fileup f ";
		sql_master = sql_master + " WHERE a.grcode = '" + p_grcode_Param + "' ";
		sql_master = sql_master + " and a.grseq    = '" + p_grseq_Param + "' ";
		sql_master = sql_master + " and a.ptype    = '" + p_ptype_Param + "' ";
		sql_master = sql_master + " and a.selsubj  = '" + p_selsubj_Param + "' ";
		sql_master = sql_master + " and b.subj       = '" + title_SUBJCODE + "' ";
		sql_master = sql_master + "and decode(b.codetype,'M',1,'S',1,2) =  '" + title_CODETYPE + "' ";
		sql_master = sql_master + "  ";
		sql_master = sql_master + " And a.grcode   = b.grcode ";
		sql_master = sql_master + " and a.grseq    = b.grseq ";
		sql_master = sql_master + " and a.subj     = b.subj ";
		sql_master = sql_master + " and a.ptype    = b.ptype ";
		sql_master = sql_master + " and b.prob_no  = c.prob_no ";
		sql_master = sql_master + " And c.prob_no  = d.prob_no ";
		sql_master = sql_master + " AND c.text_seq = e.text_seq(+) ";
		sql_master = sql_master + " AND c.groupseq=f.groupseq(+) ";
		sql_master = sql_master + " group by b.subj ";
		sql_master = sql_master + "     , searchsubjnm(b.subj) ";
		sql_master = sql_master + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_master = sql_master + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_master = sql_master + "			    ,b.ptype,b.subj) ";
		sql_master = sql_master + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_master = sql_master + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_master = sql_master + "			    ,b.ptype,b.subj), ";
		sql_master = sql_master + "			    c.codetext ";
		sql_master = sql_master + "     , f.file_name ";
		sql_master = sql_master + "     , f.file_path , upper(dbms_lob.substr(e.content, 4000,1)) ";
		sql_master = sql_master + ", decode(b.codetype,'M',1,'S',1,2) ";
		sql_master = sql_master + " order by   decode(b.codetype,'M',1,'S',1,2),  searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + " ";
		sql_master = sql_master + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_master = sql_master + "			    ,b.ptype,b.subj)";
	}

	private void initSQLdetailVarient(){
		sql_detail = "SELECT b.subj as  master_subjcode ";
		sql_detail = sql_detail + "     , searchsubjnm(b.subj) as subjnm ";
		sql_detail = sql_detail + "     , searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_detail = sql_detail + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_detail = sql_detail + "			    ,b.ptype,b.subj) as  master_sort_no ";
		sql_detail = sql_detail + ", '  ' || d.subseq || ') ' || d.subtext as subcode ";
		sql_detail = sql_detail + "  FROM tb_grexpage a,    tb_exdetail b, tb_expbank c ";
		sql_detail = sql_detail + "     , tb_expbank_row d, tb_extext e,   tb_eval_fileup f ";
		sql_detail = sql_detail + " WHERE a.grcode = '" + p_grcode_Param + "' ";
		sql_detail = sql_detail + " and a.grseq    = '" + p_grseq_Param + "' ";
		sql_detail = sql_detail + " and a.ptype    = '" + p_ptype_Param + "' ";
		sql_detail = sql_detail + " and a.selsubj  = '" + p_selsubj_Param + "' ";
		sql_detail = sql_detail + " and b.subj       = '" + title_SUBJCODE + "' ";
		sql_detail = sql_detail + " and decode(b.codetype,'M',1,'S',1,2) =  '" + title_CODETYPE + "' ";
		sql_detail = sql_detail + " And a.grcode   = b.grcode ";
		sql_detail = sql_detail + " and a.grseq    = b.grseq ";
		sql_detail = sql_detail + "and searchGRExamNo(decode(b.codetype,'M',1,'S',1,2),b.acodetype_seq ";
		sql_detail = sql_detail + "                            ,b.grcode,b.grseq,a.selsubj ";
		sql_detail = sql_detail + "			    ,b.ptype,b.subj) = '" + master_MASTER_SORT_NO + "' ";
		sql_detail = sql_detail + " and decode(b.codetype,'M',1,'S',1,2) = '1' ";
		sql_detail = sql_detail + " and a.subj     = b.subj ";
		sql_detail = sql_detail + " and a.ptype    = b.ptype ";
		sql_detail = sql_detail + " and b.prob_no  = c.prob_no ";
		sql_detail = sql_detail + " And c.prob_no  = d.prob_no ";
		sql_detail = sql_detail + " AND c.text_seq = e.text_seq(+) ";
		sql_detail = sql_detail + " AND c.groupseq=f.groupseq(+) ";
		sql_detail = sql_detail + " ORDER BY decode(b.codetype,'M',1,'S',1,2), ";
		sql_detail = sql_detail + "searchGRExamNo(decode(b.codetype,'M',1,'S',1,2)," + p_sort_type_Param + ",b.grcode,b.grseq,a.selsubj,b.ptype,b.subj)";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet grcodenm 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgrcodenm() throws Exception{
		grcodenm_GRCODENM=GetB(grcodenm.getString(1));
	}

	//ResultSet grcodenm 객체의 필드 값 초기화 함수
	private void setFieldInitFromgrcodenm(){
		grcodenm_GRCODENM="";
	}

	//ResultSet title 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtitle() throws Exception{
		title_SUBJCODE=GetB(title.getString(1));
		title_SUBJNM=GetB(title.getString(2));
		title_EXPAGEORDER=title.getDouble(3);
		title_CODETYPE=title.getDouble(4);
	}

	//ResultSet title 객체의 필드 값 초기화 함수
	private void setFieldInitFromtitle(){
		title_SUBJCODE="";
		title_SUBJNM="";
		title_EXPAGEORDER=0;
		title_CODETYPE=0;
	}

	//ResultSet master 객체에서 필드 값 설정 함수
	private void setFieldVariableFrommaster() throws Exception{
		master_MASTER_SUBJCODE=GetB(master.getString(1));
		master_SUBJNM=GetB(master.getString(2));
		master_MASTER_SORT_NO=master.getDouble(3);
		master_CODETEXT=GetB(master.getString(4));
		master_FILE_NAME=GetB(master.getString(5));
		master_FILE_PATH=GetB(master.getString(6));
		master_CONTENT=GetB(master.getString(7));
	}

	//ResultSet master 객체의 필드 값 초기화 함수
	private void setFieldInitFrommaster(){
		master_MASTER_SUBJCODE="";
		master_SUBJNM="";
		master_MASTER_SORT_NO=0;
		master_CODETEXT="";
		master_FILE_NAME="";
		master_FILE_PATH="";
		master_CONTENT="";
	}

	//ResultSet detail 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdetail() throws Exception{
		detail_MASTER_SUBJCODE=GetB(detail.getString(1));
		detail_SUBJNM=GetB(detail.getString(2));
		detail_MASTER_SORT_NO=detail.getDouble(3);
		detail_SUBCODE=GetB(detail.getString(4));
	}

	//ResultSet detail 객체의 필드 값 초기화 함수
	private void setFieldInitFromdetail(){
		detail_MASTER_SUBJCODE="";
		detail_SUBJNM="";
		detail_MASTER_SORT_NO=0;
		detail_SUBCODE="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
