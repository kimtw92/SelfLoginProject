<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_B2;
	String sheet10_A4;
	String sheet10_C4;
	String sheet10_D4;
	String sheet10_E4;
	String sheet10_F4;
	String sheet10_F5;
	String sheet10_F6;
	String sheet10_C7;
	String sheet10_D7;
	String sheet10_E7;
	String sheet10_F7;
	String sheet10_F8;
	String sheet10_F9;
	String sheet10_A10;
	String sheet10_B10;
	String sheet10_C10;
	String sheet10_B11;
	String sheet10_C11;
	String sheet10_A12;
	String sheet10_C12;
	int[] nAutoHeight_major=new int[1];
	String sheet10_A13_Buf;
	int sheet10_A13_YPos;
	boolean sheet10_A13_Flag;
	String sheet10_A13;
	String sheet10_C13;
	boolean bEnabledVirtualMerge_major;
	String sheet10_A14;
	String sheet10_C14;
	String sheet10_E14;
	String sheet10_F14;
	String sheet10_A15;
	String sheet10_A16;
	String sheet10_A17;
	String sheet10_C17;
	String sheet10_A18;
	String sheet10_A19;
	String sheet10_B19;
	String sheet10_E19;
	String sheet10_G19;
	String sheet10_A20;
	String sheet10_B20;
	String sheet10_E20;
	double sheet10_G20;
	String sheet10_A21;
	String sheet10_C21;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_career;		//ResultSet career 객체를 생성하기 위한 Statement 객체
	private ResultSet career;		//ResultSet career 객체
	private java.sql.Statement stat_lectures;		//ResultSet lectures 객체를 생성하기 위한 Statement 객체
	private ResultSet lectures;		//ResultSet lectures 객체
	private java.sql.Statement stat_major;		//ResultSet major 객체를 생성하기 위한 Statement 객체
	private ResultSet major;		//ResultSet major 객체
	private java.sql.Statement stat_master;		//ResultSet master 객체를 생성하기 위한 Statement 객체
	private ResultSet master;		//ResultSet master 객체
	private java.sql.Statement stat_career_1;		//ResultSet career_1 객체를 생성하기 위한 Statement 객체
	private ResultSet career_1;		//ResultSet career_1 객체

	//-----SQL 변수 선언-----
	private String sql_career;		//ResultSet career 객체를 생성하기 위한 쿼리문 저장
	private String sql_lectures;		//ResultSet lectures 객체를 생성하기 위한 쿼리문 저장
	private String sql_major;		//ResultSet major 객체를 생성하기 위한 쿼리문 저장
	private String sql_master;		//ResultSet master 객체를 생성하기 위한 쿼리문 저장
	private String sql_career_1;		//ResultSet career_1 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet career 객체에서 필드 값을 받는 쿼리 필드 변수
	private String career_OCGUBUN;
	private double career_OC_NO;
	private String career_OCINFO;

	//ResultSet lectures 객체에서 필드 값을 받는 쿼리 필드 변수
	private String lectures_YEAR;
	private String lectures_GRCODENM;
	private String lectures_LECNM;
	private double lectures_TTIME;

	//ResultSet major 객체에서 필드 값을 받는 쿼리 필드 변수
	private String major_MAJOR;
	private String major_OCGUBUN;
	private double major_OC_NO;
	private String major_OCINFO;

	//ResultSet master 객체에서 필드 값을 받는 쿼리 필드 변수
	private String master_NAME;
	private String master_OFFICE_TEL;
	private String master_HOME_TEL;
	private String master_HP;
	private String master_FAX;
	private String master_EMAIL;
	private String master_HOME_ADDR;
	private String master_OFFICE_ADDR;
	private String master_RESNO;
	private String master_JIKWI;
	private String master_SCHOOL;
	private String master_CNAME;
	private String master_BANK;
	private String master_TPOSITION;

	//ResultSet career_1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String career_1_OCGUBUN;
	private double career_1_OC_NO;
	private String career_1_OCINFO;

	//파라미터 변수 선언
	String p_userno_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(career_1!=null) career_1.close();
				if(stat_career_1!=null) stat_career_1.close();
				if(master!=null) master.close();
				if(stat_master!=null) stat_master.close();
				if(major!=null) major.close();
				if(stat_major!=null) stat_major.close();
				if(lectures!=null) lectures.close();
				if(stat_lectures!=null) stat_lectures.close();
				if(career!=null) career.close();
				if(stat_career!=null) stat_career.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(41, 101, 546, 801, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFromtitle(true, true);    //머리글 밴드 호출
		getScriptFromvoid01(true, true);    //Void 밴드 호출
		getScriptFrommajor(true);    //반복 밴드 호출
		getScriptFromvoid02(true, true);    //Void 밴드 호출
		getScriptFromcareerList(true);    //반복 밴드 호출
		getScriptFrominfoList(true);    //반복 밴드 호출
		getScriptFromlist(true);    //반복 밴드 호출
		getScriptFromvoid03(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----title HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : title
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromtitle(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripttitle();
		}   //end if(bIsPrint)
	}

	//----void01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : void01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=180;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet master 객체의 생성
			if(master==null){
				master = stat_master.executeQuery(sql_master);
			}else{
				master.beforeFirst();
			}

			//데이터 fetch
			if(master.next()){
				setFieldVariableFrommaster();	//ResultSet master에서 필드 값 설정
			}else{
				setFieldInitFrommaster();	//ResultSet master의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_D4="";
			sheet10_F5="";
			sheet10_F6="";
			sheet10_D7="";
			sheet10_E7="";
			sheet10_F7="";
			sheet10_F8="";
			sheet10_F9="";
			sheet10_C10="";
			sheet10_C11="";
			sheet10_C12="";

			//데이터 변수 할당
			sheet10_D4=master_NAME;
			sheet10_F5=master_OFFICE_TEL;
			sheet10_F6=master_HOME_TEL;
			sheet10_D7=master_CNAME;
			sheet10_E7=master_RESNO;
			sheet10_F7=master_HP;
			sheet10_F8=master_FAX;
			sheet10_F9=master_EMAIL;
			sheet10_C10=master_HOME_ADDR;
			sheet10_C11=master_OFFICE_ADDR;
			sheet10_C12=master_SCHOOL;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----major RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : major
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrommajor(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움체
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10};

		//데이터 변수 초기화
		sheet10_A13_Buf="";
		sheet10_A13_Flag=true;
		sheet10_A13="";
		sheet10_C13="";
		bEnabledVirtualMerge_major=false;

		//DataSet 객체 생성
		//ResultSet major 객체의 생성
		if(major==null){
			major = stat_major.executeQuery(sql_major);
		}else{
			major.beforeFirst();
		}

		while(major.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrommajor();	//RecordSet major에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			/*
			if(!sheet10_A13.equals(major_MAJOR)){
				if(!bIsFirst){
					sheet10_A13_Buf=sheet10_A13;
					sheet10_A13_Flag=true;
				}
				sheet10_A13=major_MAJOR;
			}
			*/

			if(!sheet10_A13.equals("전공과목")){
				if(!bIsFirst){
					sheet10_A13_Buf=sheet10_A13;
					sheet10_A13_Flag=true;
				}
				sheet10_A13="전공과목";
			}
			sheet10_C13=major_OCINFO;

			//루프 내부 가상병합 출력 함수 호출
			if(bIsPrint){
				writeScriptVirtualMergemajor();
			}

			//Auto Size Code
			nAutoHeight_major[0]=0;
			nAutoHeight_major[0]=getPrintHeight(sheet10_C13, charWidth, 10, 410, 20, nAutoHeight_major[0]);
			nAutoHeight_major[0]=nAutoHeight_major[0]+20;
			nBandHeight=nAutoHeight_major[0];   //밴드 출력 높이 설정

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//가상병합 출력 및 한번만 데이터 Reset
					pageSkipVirtualMergemajor();

					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptmajor();

				//페이지 연결 출력 및 가상병합 플래그 Reset
				if(sheet10_A13_Flag){
					sheet10_A13_YPos=nYCurPos;
					sheet10_A13_Buf="";
					sheet10_A13_Flag=false;
				}
				bEnabledVirtualMerge_major=true;

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		//루프 외부 가상병합 출력 함수 호출
		sheet10_A13_Buf=sheet10_A13;
		if(bIsPrint){
			writeScriptVirtualMergemajor();
		}
	}

	//----major 반복밴드 Page Skip시 가상 병합 데이터 설정 및 출력 함수----
	private void pageSkipVirtualMergemajor( ) throws Exception{
		//가상 병합 데이터 설정 및 출력
		if(bEnabledVirtualMerge_major){
			if(sheet10_A13_Buf.equals(isEmpty)){
				sheet10_A13_Buf=sheet10_A13;
			}else{
				sheet10_A13_Buf="";
			}
			sheet10_A13_Flag=true;
			writeScriptVirtualMergemajor();
		}
	}

	//----void02 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : void02
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid02(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet master 객체의 생성
			if(master==null){
				master = stat_master.executeQuery(sql_master);
			}else{
				master.beforeFirst();
			}

			//데이터 fetch
			if(master.next()){
				setFieldVariableFrommaster();	//ResultSet master에서 필드 값 설정
			}else{
				setFieldInitFrommaster();	//ResultSet master의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C14="";
			sheet10_F14="";

			//데이터 변수 할당
			sheet10_C14=master_TPOSITION;
			sheet10_F14=master_JIKWI;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid02();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----careerList RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : careerList
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromcareerList(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A16="";

		//DataSet 객체 생성
		//ResultSet career_1 객체의 생성
		if(career_1==null){
			career_1 = stat_career_1.executeQuery(sql_career_1);
		}else{
			career_1.beforeFirst();
		}

		while(career_1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromcareer_1();	//RecordSet career_1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A16=career_1_OCINFO;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptcareerList();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//-----infoList RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : infoList
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfoList(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_C17="";

		//DataSet 객체 생성
		//ResultSet career 객체의 생성
		if(career==null){
			career = stat_career.executeQuery(sql_career);
		}else{
			career.beforeFirst();
		}

		while(career.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromcareer();	//RecordSet career에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_C17=career_OCINFO;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfoList();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----listHeader RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : listHeader
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlistHeader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptlistHeader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----list RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : list
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_A20="";
		sheet10_B20="";
		sheet10_E20="";
		sheet10_G20=0;

		//DataSet 객체 생성
		//ResultSet lectures 객체의 생성
		if(lectures==null){
			lectures = stat_lectures.executeQuery(sql_lectures);
		}else{
			lectures.beforeFirst();
		}

		while(lectures.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromlectures();	//RecordSet lectures에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//반복 헤더 호출 및 조건 플래그 초기화
				getScriptFromlistHeader(bIsFirst, true);	//반복 헤더 호출
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A20=lectures_YEAR;
			sheet10_B20=lectures_GRCODENM;
			sheet10_E20=lectures_LECNM;
			sheet10_G20=lectures_TTIME;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromlistHeader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptlist();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end
	}

	//----void03 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : void03
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. treu면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid03(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet master 객체의 생성
			if(master==null){
				master = stat_master.executeQuery(sql_master);
			}else{
				master.beforeFirst();
			}

			//데이터 fetch
			if(master.next()){
				setFieldVariableFrommaster();	//ResultSet master에서 필드 값 설정
			}else{
				setFieldInitFrommaster();	//ResultSet master의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C21="";

			//데이터 변수 할당
			sheet10_C21=master_BANK;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid03();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----title 스크립트 문 출력 함수----
	private void writeScripttitle( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG(92,61,388,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE(92,61,388,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE(92,61,388,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE(92,61,388,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE(92,61,388,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT(92,61,388,1,11,0/,굴림체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B2+"\r");
	}

	//----void01 스크립트 문 출력 함수----
	private void writeScriptvoid01( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",94,120,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,120,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,120,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,120,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,120,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,120,1)");
		out.println(sheet10_A4+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",36,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",36,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",36,60,0,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos)+",36,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,60,1)");
		out.println(sheet10_C4+"\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos)+",97,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos)+",97,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos)+",97,60,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+130)+","+(nYCurPos)+",97,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,60,1)");
		out.println(sheet10_D4+"\r");
		out.println("^CELLBG("+(nXCurPos+227)+","+(nYCurPos)+",95,60,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,60,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,60,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+227)+","+(nYCurPos)+",95,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,60,1)");
		out.println(sheet10_E4+"\r");
		out.println("^CELLBG("+(nXCurPos+322)+","+(nYCurPos)+",182,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos)+",182,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_F4+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+20)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+20)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+20)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+20)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+20)+",182,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F5+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+40)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+40)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+40)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+40)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+40)+",182,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F6+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+60)+",36,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+60)+",36,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+60)+",36,60,0,RGB[0,0,0],2)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos+60)+",36,2,10,0/,돋움체,RGB[0,0,0], , , ,NONE,60,1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos+60)+",97,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos+60)+",97,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+130)+","+(nYCurPos+60)+",97,60,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+130)+","+(nYCurPos+60)+",97,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,60,1)");
		out.println(sheet10_D7+"\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+60)+",95,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+60)+",95,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+60)+",95,60,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+60)+",95,60,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+227)+","+(nYCurPos+60)+",95,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,60,1)");
		out.println(sheet10_E7+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+60)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+60)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+60)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+60)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+60)+",182,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F7+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+80)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+80)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+80)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+80)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+80)+",182,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F8+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+100)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+100)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+100)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos+100)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos+100)+",182,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F9+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+120)+",51,40,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+120)+",51,40,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+120)+",51,40,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+120)+",51,40,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+120)+",51,40,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+120)+",51,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,40,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLBG("+(nXCurPos+51)+","+(nYCurPos+120)+",43,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+120)+",43,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+120)+",43,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+120)+",43,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+120)+",43,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+51)+","+(nYCurPos+120)+",43,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B10+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+120)+",410,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+120)+",410,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+120)+",410,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+120)+",410,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos+120)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C10+"\r");
		out.println("^CELLBG("+(nXCurPos+51)+","+(nYCurPos+140)+",43,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+140)+",43,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+140)+",43,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+140)+",43,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+140)+",43,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+51)+","+(nYCurPos+140)+",43,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_B11+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+140)+",410,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+140)+",410,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+140)+",410,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+140)+",410,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos+140)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C11+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+160)+",94,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+160)+",94,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+160)+",94,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+160)+",94,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+160)+",94,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+160)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+160)+",410,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+160)+",410,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+160)+",410,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos+160)+",410,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos+160)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C12+"\r");
	}

	//----major 스크립트 문 출력 함수----
	private void writeScriptmajor( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,"+(nAutoHeight_major[0])+",0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,"+(nAutoHeight_major[0])+",0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,"+(nAutoHeight_major[0])+",0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,"+(nAutoHeight_major[0])+",0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,XL,"+(nAutoHeight_major[0])+",1)");
		out.println(sheet10_C13+"\r");
	}

	//----major VirtualMerge 스크립트 문 출력 함수----
	private void writeScriptVirtualMergemajor( ) throws Exception{
		//가상병합 스크립트문 생성
		if(!sheet10_A13_Buf.equals(isEmpty)){
			out.println("^CELLBG("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,"+(nYCurPos-sheet10_A13_YPos)+",1,RGB[230,230,250],RGB[230,230,250],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,"+(nYCurPos-sheet10_A13_YPos)+",0,RGB[0,0,0],0)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,"+(nYCurPos-sheet10_A13_YPos)+",0,RGB[0,0,0],1)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,"+(nYCurPos-sheet10_A13_YPos)+",0,RGB[0,0,0],2)\r");
			out.println("^CELLLINE("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,"+(nYCurPos-sheet10_A13_YPos)+",0,RGB[0,0,0],3)\r");
			out.print("^PRINT("+(nXCurPos)+","+(sheet10_A13_YPos)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,"+(nYCurPos-sheet10_A13_YPos)+",1)");
			out.println(sheet10_A13_Buf+"\r");
		}
	}

	//----void02 스크립트 문 출력 함수----
	private void writeScriptvoid02( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",94,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A14+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",133,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",133,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",133,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",133,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos)+",133,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C14+"\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",95,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+227)+","+(nYCurPos)+",95,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_E14+"\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+322)+","+(nYCurPos)+",182,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+322)+","+(nYCurPos)+",182,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_F14+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+20)+",504,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",504,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",504,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",504,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",504,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",504,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A15+"\r");
	}

	//----careerList 스크립트 문 출력 함수----
	private void writeScriptcareerList( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",504,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A16+"\r");
	}

	//----infoList 스크립트 문 출력 함수----
	private void writeScriptinfoList( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",94,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A17+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C17+"\r");
	}

	//----listHeader 스크립트 문 출력 함수----
	private void writeScriptlistHeader( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",504,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",504,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",504,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A18+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",51,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",51,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",51,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+20)+",51,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+20)+",51,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A19+"\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+20)+",176,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+20)+",176,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+20)+",176,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos+20)+",176,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+51)+","+(nYCurPos+20)+",176,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B19+"\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+20)+",212,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+20)+",212,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+20)+",212,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos+20)+",212,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+227)+","+(nYCurPos+20)+",212,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E19+"\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos+20)+",65,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos+20)+",65,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos+20)+",65,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos+20)+",65,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+439)+","+(nYCurPos+20)+",65,1,11,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G19+"\r");
	}

	//----list 스크립트 문 출력 함수----
	private void writeScriptlist( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",51,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",51,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",51,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",51,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",51,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A20+"\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos)+",176,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos)+",176,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos)+",176,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+51)+","+(nYCurPos)+",176,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+51)+","+(nYCurPos)+",176,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B20+"\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",212,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",212,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",212,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+227)+","+(nYCurPos)+",212,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+227)+","+(nYCurPos)+",212,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E20+"\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos)+",65,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos)+",65,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos)+",65,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+439)+","+(nYCurPos)+",65,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+439)+","+(nYCurPos)+",65,0,10,1/0/0,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G20+"\r");
	}

	//----void03 스크립트 문 출력 함수----
	private void writeScriptvoid03( ) throws Exception{
		//스크립트문 생성
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos)+",94,20,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos)+",94,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",94,1,11,0/,돋움체,RGB[0,0,0],BOLD, , ,NONE,20,1)");
		out.println(sheet10_A21+"\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+94)+","+(nYCurPos)+",410,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+94)+","+(nYCurPos)+",410,0,10,0/,돋움체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C21+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_userno_Param=toKor(GetB(request.getParameter("p_userno")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.203)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.12.204)(PORT=1521))(FAILOVER=on)(LOAD_BALANCE=off))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=LOTI)))","inchlms","fhxl21");stat_career=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_lectures=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_major=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_master=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_career_1=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_career = "select ocgubun, oc_no, ocinfo ";
		sql_career = sql_career + "from tb_tutor_history ";
		sql_career = sql_career + "where userno = '" + p_userno_Param + "' ";
		sql_career = sql_career + "and oc_no = '4'";
		sql_lectures = "select substr(a.grseq,0,4) as year, c.grcodenm, b.lecnm, ";
		sql_lectures = sql_lectures + "    nvl(b.lessontime, 0)+nvl(b.silgitime, 0)+nvl(b.torontime, 0)+nvl(b.hyuntime, 0) ";
		sql_lectures = sql_lectures + "    +nvl(b.multitime, 0)+nvl(b.etctime, 0) as ttime ";
		sql_lectures = sql_lectures + "from tb_classtutor a, ";
		sql_lectures = sql_lectures + "  tb_subjseq b, ";
		sql_lectures = sql_lectures + "  tb_grcode c ";
		sql_lectures = sql_lectures + "where a.grcode = b.grcode ";
		sql_lectures = sql_lectures + "  and a.grseq = b.grseq ";
		sql_lectures = sql_lectures + "  and a.subj = b.subj ";
		sql_lectures = sql_lectures + "  and a.grcode = c.grcode ";
		sql_lectures = sql_lectures + "  and a.tuserno = '" + p_userno_Param + "'";
		sql_major = "select '전공과목' as  major, ocgubun, oc_no, ocinfo ";
		sql_major = sql_major + "from tb_tutor_history ";
		sql_major = sql_major + "where userno = '" + p_userno_Param + "' ";
		sql_major = sql_major + "and oc_no = '1'";
		sql_master = "select a.name, ";
		sql_master = sql_master + "  '직장) ' || a.office_tel as office_tel, ";
		sql_master = sql_master + "  '자택) ' || a.home_tel as home_tel, ";
		sql_master = sql_master + "  '핸드폰) ' || a.hp as hp , ";
		sql_master = sql_master + "  'FAX) ' ||  b.fax as fax, ";
		sql_master = sql_master + "  'E-mail) ' ||  a.email as email, ";
		sql_master = sql_master + "  a.home_post1 || '-' || a.home_post2 || ' ' || a.home_addr as home_addr, ";
		sql_master = sql_master + "  a.office_post1 || '-' || a.office_post2 || ' ' || a.office_addr as office_addr, ";
		sql_master = sql_master + "  a.resno, ";
		sql_master = sql_master + "  a.jikwi, ";
		sql_master = sql_master + "  decode (a.school, '01', '박사', '02', '석사', '03', '대졸', '04', '대재.퇴,초대졸', '05', '고졸', '06','중졸이하','07','기타',null) as school, ";
		sql_master = sql_master + "  b.cname, ";
		sql_master = sql_master + "  b.bankname || ' ' || b.bankno as bank, ";
		sql_master = sql_master + "  b.tposition ";
		sql_master = sql_master + "from tb_member a, ";
		sql_master = sql_master + "  tb_tutor b ";
		sql_master = sql_master + "where a.userno = b.userno  ";
		sql_master = sql_master + "and a.userno = '" + p_userno_Param + "'";
		sql_career_1 = "select ocgubun, oc_no, ocinfo ";
		sql_career_1 = sql_career_1 + "from tb_tutor_history ";
		sql_career_1 = sql_career_1 + "where userno = '" + p_userno_Param + "' ";
		sql_career_1 = sql_career_1 + "and oc_no = '3'";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet career 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcareer() throws Exception{
		career_OCGUBUN=GetB(career.getString(1));
		career_OC_NO=career.getDouble(2);
		career_OCINFO=GetB(career.getString(3));
	}

	//ResultSet career 객체의 필드 값 초기화 함수
	private void setFieldInitFromcareer(){
		career_OCGUBUN="";
		career_OC_NO=0;
		career_OCINFO="";
	}

	//ResultSet lectures 객체에서 필드 값 설정 함수
	private void setFieldVariableFromlectures() throws Exception{
		lectures_YEAR=GetB(lectures.getString(1));
		lectures_GRCODENM=GetB(lectures.getString(2));
		lectures_LECNM=GetB(lectures.getString(3));
		lectures_TTIME=lectures.getDouble(4);
	}

	//ResultSet lectures 객체의 필드 값 초기화 함수
	private void setFieldInitFromlectures(){
		lectures_YEAR="";
		lectures_GRCODENM="";
		lectures_LECNM="";
		lectures_TTIME=0;
	}

	//ResultSet major 객체에서 필드 값 설정 함수
	private void setFieldVariableFrommajor() throws Exception{
		major_MAJOR=GetB(major.getString(1));
		major_OCGUBUN=GetB(major.getString(2));
		major_OC_NO=major.getDouble(3);
		major_OCINFO=GetB(major.getString(4));
	}

	//ResultSet major 객체의 필드 값 초기화 함수
	private void setFieldInitFrommajor(){
		major_MAJOR="";
		major_OCGUBUN="";
		major_OC_NO=0;
		major_OCINFO="";
	}

	//ResultSet master 객체에서 필드 값 설정 함수
	private void setFieldVariableFrommaster() throws Exception{
		master_NAME=GetB(master.getString(1));
		master_OFFICE_TEL=GetB(master.getString(2));
		master_HOME_TEL=GetB(master.getString(3));
		master_HP=GetB(master.getString(4));
		master_FAX=GetB(master.getString(5));
		master_EMAIL=GetB(master.getString(6));
		master_HOME_ADDR=GetB(master.getString(7));
		master_OFFICE_ADDR=GetB(master.getString(8));
		master_RESNO=GetB(master.getString(9));
		master_JIKWI=GetB(master.getString(10));
		master_SCHOOL=GetB(master.getString(11));
		master_CNAME=GetB(master.getString(12));
		master_BANK=GetB(master.getString(13));
		master_TPOSITION=GetB(master.getString(14));
	}

	//ResultSet master 객체의 필드 값 초기화 함수
	private void setFieldInitFrommaster(){
		master_NAME="";
		master_OFFICE_TEL="";
		master_HOME_TEL="";
		master_HP="";
		master_FAX="";
		master_EMAIL="";
		master_HOME_ADDR="";
		master_OFFICE_ADDR="";
		master_RESNO="";
		master_JIKWI="";
		master_SCHOOL="";
		master_CNAME="";
		master_BANK="";
		master_TPOSITION="";
	}

	//ResultSet career_1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcareer_1() throws Exception{
		career_1_OCGUBUN=GetB(career_1.getString(1));
		career_1_OC_NO=career_1.getDouble(2);
		career_1_OCINFO=GetB(career_1.getString(3));
	}

	//ResultSet career_1 객체의 필드 값 초기화 함수
	private void setFieldInitFromcareer_1(){
		career_1_OCGUBUN="";
		career_1_OC_NO=0;
		career_1_OCINFO="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_B2="강사 소개 카드";
		sheet10_A4="성명";
		sheet10_C4="(한글)";
		sheet10_E4="주민등록번호";
		sheet10_F4="전화번호";
		sheet10_C7="(한자)";
		sheet10_A10="주소";
		sheet10_B10="자택";
		sheet10_B11="직장";
		sheet10_A12="학위";
		sheet10_A14="직장명";
		sheet10_E14="현직위";
		sheet10_A15="주요경력";
		sheet10_A17="저서 및 논문";
		sheet10_A18="교육원출강현황";
		sheet10_A19="년도";
		sheet10_B19="과정명";
		sheet10_E19="강의제목(과목명)";
		sheet10_G19="강의시간";
		sheet10_A21="계좌번호";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromtitle(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int cellWidth, int cellHeight, int nMaxHeight){
		int ch;
		int len = 95;
		int width = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		cellWidth = cellWidth-4;
		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if(ch>0x7F){
				width += asciiWidth;

				if (width > cellWidth) {
					width = asciiWidth;
					height += linePitch;
				}
				asciiWidth = 0;

				width += charWidth[len];
				if (width > cellWidth) {
					width = charWidth[len];
					height += linePitch;
				}
			} else if (ch==10 || ch==20) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
			} else if (ch==13) {
				width = 0;
				asciiWidth = 0;
				height += linePitch;
				if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
					i++;
				}
			} else {
				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						width = width + asciiWidth;
						if (width>cellWidth){
							height += linePitch;
						}
					}
				} else {
					width += asciiWidth;

					if (width > cellWidth) {
						width = asciiWidth;
						height += linePitch;
					}

					asciiWidth = 0;

					width += charWidth[ch-32];
					if (width > cellWidth) {
						width = charWidth[ch-32];
						height += linePitch;
					}
				}
			}
		}

		if (height>cellHeight) {
			height=height-cellHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}
}
%>
