<%
/* ### Generated by AIDesigner 3.7.1.23 ### */
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.text.*" %>
<%@ page contentType="text/plain; charset=euc-kr" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(request,response,userObj);
handler.service(out);
%>

<%!
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A3;
	String sheet10_A5;
	String sheet10_A6;
	String sheet10_C6;
	String sheet10_A7;
	String sheet10_C7;
	String sheet10_A8;
	String sheet10_C8;
	String sheet10_D8;
	String sheet10_F8;
	String sheet10_A9;
	String sheet10_C9;
	String sheet10_E9;
	double sheet10_H9;
	String sheet10_A10;
	String sheet10_C10;
	String sheet10_A12;
	String sheet10_A14;
	String sheet10_G16;
	String sheet10_C17;
	String sheet10_D17;
	String sheet10_E17;
	String sheet10_A20;
	String sheet10_B23;
	String sheet10_A25;
	String sheet10_A27;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_DUNET;		//DSN DUNET Connection 객체
	private java.sql.Statement stat_RT;		//ResultSet RT 객체를 생성하기 위한 Statement 객체
	private ResultSet RT;		//ResultSet RT 객체

	//-----SQL 변수 선언-----
	private String sql_RT;		//ResultSet RT 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet RT 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RT_TITLE;
	private String RT_PERIOD;
	private double RT_PACCEPT;
	private String RT_DEPTNM;
	private String RT_JIKNM;
	private String RT_NAME;
	private String RT_RESNO;
	private String RT_RNO;
	private String RT_YEAR;
	private String RT_MONTH;
	private String RT_DAY;
	private String RT_CUR_DATE;

	//파라미터 변수 선언
	String p_grcode_Param;
	String p_grseq_Param;
	String p_year_Param;
	String p_userno_Param;

	//ReportHandler 생성자 함수
	ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			this.out=out;
			nMaxPage=0;    //nMaxPage 초기화

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL");

			//파라미터 설정 함수 호출
			setParam();

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			out.print("--SCRIPT_END--\r");
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			try{    //finally try 구문
				//DataSet Close
				if(RT!=null) RT.close();
				if(stat_RT!=null) stat_RT.close();
				if(conn_DUNET!=null) conn_DUNET.close();
			}catch(Exception e){    //finally catch 구문
			}    //end finally try
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		initSheetVariant(66, 83, 515, 759, true);

		//시작 페이지 번호 출력
		out.print("-- " + nPageNum + " PAGE --\r");

		//밴드 함수 호출
		getScriptFrompart(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----part VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : part
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompart(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=601;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RT 객체의 생성
			if(RT==null){
				RT = stat_RT.executeQuery(sql_RT);
			}else{
				RT.beforeFirst();
			}

			//데이터 fetch
			if(RT.next()){
				setFieldVariableFromRT();	//ResultSet RT에서 필드 값 설정
			}else{
				setFieldInitFromRT();	//ResultSet RT의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A3="";
			sheet10_C6="";
			sheet10_C7="";
			sheet10_C8="";
			sheet10_F8="";
			sheet10_C9="";
			sheet10_H9=0;
			sheet10_C10="";
			sheet10_A14="";
			sheet10_D17="";
			sheet10_A25="";

			//데이터 변수 할당
			sheet10_A3= "제 " + p_year_Param + " - 호";
			sheet10_C6=RT_DEPTNM;
			sheet10_C7=RT_JIKNM;
			sheet10_C8=RT_NAME;
			sheet10_F8=RT_RESNO;
			sheet10_C9=RT_TITLE;
			sheet10_H9=RT_PACCEPT;
			sheet10_C10=RT_PERIOD;
			sheet10_A14=RT_CUR_DATE;
			sheet10_D17=RT_NAME;
			sheet10_A25=RT_CUR_DATE;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpart();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----part 스크립트 문 출력 함수----
	private void writeScriptpart( ) throws Exception{
		//스크립트문 생성
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos)+",447,1,20,0/,굴림,RGB[0,0,0],BOLD, , ,NONE,61,1)");
		out.println(sheet10_A1+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+76)+",240,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A3+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+111)+",104,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+111)+",104,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+111)+",104,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+111)+",104,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+111)+",104,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+111)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A5+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+111)+",343,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+111)+",343,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+111)+",343,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+111)+",343,25,0,RGB[0,0,0],3)\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+136)+",104,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+136)+",104,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+136)+",104,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+136)+",104,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+136)+",104,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+136)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A6+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+136)+",343,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+136)+",343,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+136)+",343,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+136)+",343,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+136)+",343,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_C6+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+161)+",104,35,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+161)+",104,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+161)+",104,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+161)+",104,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+161)+",104,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+161)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet10_A7+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+161)+",343,35,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+161)+",343,35,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+161)+",343,35,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+161)+",343,35,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+161)+",343,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,35,1)");
		out.println(sheet10_C7+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+196)+",104,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+196)+",104,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+196)+",104,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+196)+",104,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+196)+",104,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+196)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A8+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+196)+",136,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+196)+",136,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+196)+",136,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+196)+",136,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+196)+",136,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_C8+"\r");
		out.println("^CELLBG("+(nXCurPos+240)+","+(nYCurPos+196)+",94,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+240)+","+(nYCurPos+196)+",94,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+240)+","+(nYCurPos+196)+",94,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+240)+","+(nYCurPos+196)+",94,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+240)+","+(nYCurPos+196)+",94,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+240)+","+(nYCurPos+196)+",94,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_D8+"\r");
		out.println("^CELLLINE("+(nXCurPos+334)+","+(nYCurPos+196)+",113,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+334)+","+(nYCurPos+196)+",113,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+334)+","+(nYCurPos+196)+",113,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+334)+","+(nYCurPos+196)+",113,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+334)+","+(nYCurPos+196)+",113,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_F8+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+221)+",104,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+221)+",104,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+221)+",104,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+221)+",104,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+221)+",104,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+221)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A9+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+221)+",210,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+221)+",210,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+221)+",210,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+221)+",210,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+221)+",210,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_C9+"\r");
		out.println("^CELLBG("+(nXCurPos+314)+","+(nYCurPos+221)+",55,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos+314)+","+(nYCurPos+221)+",55,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+314)+","+(nYCurPos+221)+",55,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+314)+","+(nYCurPos+221)+",55,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+314)+","+(nYCurPos+221)+",55,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+314)+","+(nYCurPos+221)+",55,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_E9+"\r");
		out.println("^CELLLINE("+(nXCurPos+369)+","+(nYCurPos+221)+",78,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+369)+","+(nYCurPos+221)+",78,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+369)+","+(nYCurPos+221)+",78,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+369)+","+(nYCurPos+221)+",78,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+369)+","+(nYCurPos+221)+",78,1,11,1/0/2,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_H9+"\r");
		out.println("^CELLBG("+(nXCurPos)+","+(nYCurPos+246)+",104,25,1,RGB[230,230,250],RGB[230,230,250],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+246)+",104,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+246)+",104,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+246)+",104,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+246)+",104,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+246)+",104,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_A10+"\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+246)+",343,25,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+246)+",343,25,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+246)+",343,25,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+246)+",343,25,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+246)+",343,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,25,1)");
		out.println(sheet10_C10+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+291)+",447,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A12+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+321)+",447,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A14+"\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+361)+",90,20,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+361)+",90,20,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+361)+",90,20,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+361)+",90,20,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos+357)+","+(nYCurPos+361)+",90,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_G16+"\r");
		out.print("^PRINT("+(nXCurPos+104)+","+(nYCurPos+381)+",136,2,13,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_C17+"\r");
		out.print("^PRINT("+(nXCurPos+240)+","+(nYCurPos+381)+",74,1,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_D17+"\r");
		out.print("^PRINT("+(nXCurPos+314)+","+(nYCurPos+381)+",43,0,11,0/,굴림체,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_E17+"\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+381)+",90,60,0,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+381)+",90,60,0,RGB[0,0,0],1)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+381)+",90,60,0,RGB[0,0,0],2)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+381)+",90,60,0,RGB[0,0,0],3)\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+461)+",447,1,13,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A20+"\r");
		out.println("^CELLLINE("+(nXCurPos)+","+(nYCurPos+496)+",52,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+52)+","+(nYCurPos+496)+",52,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+104)+","+(nYCurPos+496)+",136,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+240)+","+(nYCurPos+496)+",74,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+314)+","+(nYCurPos+496)+",20,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+334)+","+(nYCurPos+496)+",23,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+357)+","+(nYCurPos+496)+",12,15,6,RGB[0,0,0],0)\r");
		out.println("^CELLLINE("+(nXCurPos+369)+","+(nYCurPos+496)+",78,15,6,RGB[0,0,0],0)\r");
		out.print("^PRINT("+(nXCurPos+52)+","+(nYCurPos+511)+",188,0,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_B23+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+541)+",447,1,11,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A25+"\r");
		out.print("^PRINT("+(nXCurPos)+","+(nYCurPos+581)+",447,0,13,0/,굴림,RGB[0,0,0], , , ,NONE,20,1)");
		out.println(sheet10_A27+"\r");
	}

	//파라미터 설정 함수
	private void setParam(){
		p_grcode_Param=toKor(GetB(request.getParameter("p_grcode")));
		p_grseq_Param=toKor(GetB(request.getParameter("p_grseq")));
		p_year_Param=toKor(GetB(request.getParameter("p_year")));
		p_userno_Param=toKor(GetB(request.getParameter("p_userno")));
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//DUNET Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		conn_DUNET=DriverManager.getConnection("jdbc:oracle:thin:@192.168.10.253:1521:LOTI","inchlms","fhxl21");stat_RT=conn_DUNET.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_RT = "SELECT SUBSTR(B.GRSEQ,1,4) ||'년도 ' || SEARCHGRCODENM(A.GRCODE,A.GRSEQ) || ' ' || SUBSTR(A.grseq, 5,2) ||'기'  AS TITLE ";
		sql_RT = sql_RT + "     , TO_CHAR(B.STARTED, 'YYYY.MM.DD')  || ' ~ ' || TO_CHAR(B.ENDDATE,'MM.DD') AS PERIOD ";
		sql_RT = sql_RT + "     , A.PACCEPT ";
		sql_RT = sql_RT + "     , SEARCHDEPTNM(A.RDEPT) || ' ' || A.RDEPTSUB AS DEPTNM ";
		sql_RT = sql_RT + "     , SEARCHJIKNM(A.RJIK) AS JIKNM ";
		sql_RT = sql_RT + "     , A.RNAME NAME ";
		sql_RT = sql_RT + "     , A.RRESNO RESNO ";
		sql_RT = sql_RT + "     , A.RNO ";
		sql_RT = sql_RT + "     , to_char(b.enddate,'yyyy') year ";
		sql_RT = sql_RT + "     , to_char(b.enddate,'mm') month ";
		sql_RT = sql_RT + "     , to_char(b.enddate,'dd') day ";
		sql_RT = sql_RT + "     , to_char(sysdate, 'yyyy')  || '년 ' ||  ";
		sql_RT = sql_RT + "       to_char(sysdate,'mm')  || '월 ' || ";
		sql_RT = sql_RT + "       to_char(sysdate, 'dd')  || '일' as cur_date ";
		sql_RT = sql_RT + " FROM TB_GRRESULT A, TB_GRSEQ B, TB_MEMBER C  ";
		sql_RT = sql_RT + "WHERE A.GRCODE = B.GRCODE(+)  ";
		sql_RT = sql_RT + "AND A.GRSEQ    = B.GRSEQ(+)  ";
		sql_RT = sql_RT + "AND A.USERNO   = C.USERNO(+) ";
		sql_RT = sql_RT + "AND A.GRCODE   = '" + p_grcode_Param + "' ";
		sql_RT = sql_RT + "AND A.GRSEQ    = '" + p_grseq_Param + "' ";
		sql_RT = sql_RT + "AND A.rgrayn <> 'N' ";
		sql_RT = sql_RT + "AND '" + p_userno_Param + "'  = A.userno";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet RT 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRT() throws Exception{
		RT_TITLE=GetB(RT.getString(1));
		RT_PERIOD=GetB(RT.getString(2));
		RT_PACCEPT=RT.getDouble(3);
		RT_DEPTNM=GetB(RT.getString(4));
		RT_JIKNM=GetB(RT.getString(5));
		RT_NAME=GetB(RT.getString(6));
		RT_RESNO=GetB(RT.getString(7));
		RT_RNO=GetB(RT.getString(8));
		RT_YEAR=GetB(RT.getString(9));
		RT_MONTH=GetB(RT.getString(10));
		RT_DAY=GetB(RT.getString(11));
		RT_CUR_DATE=GetB(RT.getString(12));
	}

	//ResultSet RT 객체의 필드 값 초기화 함수
	private void setFieldInitFromRT(){
		RT_TITLE="";
		RT_PERIOD="";
		RT_PACCEPT=0;
		RT_DEPTNM="";
		RT_JIKNM="";
		RT_NAME="";
		RT_RESNO="";
		RT_RNO="";
		RT_YEAR="";
		RT_MONTH="";
		RT_DAY="";
		RT_CUR_DATE="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarient(){
		sheet10_A1="교육 확인서";
		sheet10_A5="주소(교육 당시)";
		sheet10_A6="소속(교육 당시)";
		sheet10_A7="직급 및 직위(교육 당시)";
		sheet10_A8="성    명";
		sheet10_D8="주민등록번호";
		sheet10_A9="교육 과정명";
		sheet10_E9="성적";
		sheet10_A10="교육기간";
		sheet10_A12="위와 같이 소정의 교육과정에 교육을 받았음을 확인하여 주시기 바랍니다";
		sheet10_G16="확인대조필";
		sheet10_C17="신청인";
		sheet10_E17="(인)";
		sheet10_A20="인천광역시지방공무원교육원장  귀하";
		sheet10_B23="위 사실을 확인함";
		sheet10_A27="인천광역시지방공무원교육원장";
	}

	//-----페이지 스킵 관련 함수-----
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		out.print("-- " + nPageNum + " PAGE --\r");

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//-----공통 함수 선언-----
	private void getScriptHeader(String paper, String size, String value, String orient) throws Exception{
		out.print("--SCRIPT_START31--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient) throws Exception{
		out.print("--PAPER_INFO--\r");
		out.print("PAPER=" + paper + "\r");
		out.print("PAPER_SIZE=" + size + "\r");
		out.print("PAPER_SETTING_VALUE=" + value + "\r");
		out.print("ORIENTATION=" + orient + "\r");
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}
	private long MAX(long maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		while(strAll.indexOf(strSrc) != -1) {
			strAll = strAll.substring(0, strAll.indexOf(strSrc)) + strDest + strAll.substring(strAll.indexOf(strSrc) + strSrc.length(), strAll.length());
		}
		return strAll;
	}

	private String toDate() {
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}
}
%>
